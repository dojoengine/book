msgid ""
msgstr ""
"Project-Id-Version: Dojo: The Provable Game Engine\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2023-10-04 03:01+0700\n"
"Last-Translator:  <vietnameserick@gmail.com>\n"
"Language-Team: Vietnamese <translation-team-vi@lists.sourceforge.net>\n"
"Language: vi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/SUMMARY.md:3
msgid "Foreword"
msgstr "Lời Tựa"

#: src/SUMMARY.md:4 src/theory/what-is-dojo.md:1
msgid "What is Dojo?"
msgstr "Dojo Là Gì ?"

#: src/SUMMARY.md:5
msgid "AW Theory"
msgstr "Thuyết AW"

#: src/SUMMARY.md:6
msgid "Cairo Ecosystem"
msgstr "Hệ Sinh Thái Cairo"

#: src/SUMMARY.md:7 src/theory/faqs.md:1
msgid "FAQs"
msgstr "Câu Hỏi Thường Gặp"

#: src/SUMMARY.md:9 src/client/npm/core.md:10 src/misc/contributors.md:12
msgid "Getting Started"
msgstr "Bắt đầu"

#: src/SUMMARY.md:11 src/getting-started/quick-start.md:1
msgid "Quick Start"
msgstr "Bắt đầu nhanh"

#: src/SUMMARY.md:12
msgid "Manual Install"
msgstr "Cài Đặt Thủ Công"

#: src/SUMMARY.md:13 src/getting-started/setup.md:1
msgid "Development Setup"
msgstr "Setup môi trường"

#: src/SUMMARY.md:14
msgid "Contributing"
msgstr "Đóng Góp"

#: src/SUMMARY.md:16
msgid "Community"
msgstr "Cộng Đồng"

#: src/SUMMARY.md:18 src/community/get-started.md:1
msgid "Get Started"
msgstr "Bắt Đầu"

#: src/SUMMARY.md:20
msgid "Architecture"
msgstr "Kiến Trúc"

#: src/SUMMARY.md:22 src/cairo/hello-dojo.md:1
msgid "Hello Dojo"
msgstr "Xin chào Dojo"

#: src/SUMMARY.md:23 src/cairo/config.md:1
msgid "Config"
msgstr "Cấu Hình"

#: src/SUMMARY.md:24
msgid "World"
msgstr "Thế giới"

#: src/SUMMARY.md:25 src/cairo/components.md:1
msgid "Components"
msgstr "Thành phần"

#: src/SUMMARY.md:26 src/cairo/systems.md:1
msgid "Systems"
msgstr "Hệ thống"

#: src/SUMMARY.md:27 src/cairo/entities.md:1
msgid "Entities"
msgstr "Các thực thể"

#: src/SUMMARY.md:28 src/cairo/authorization.md:1
msgid "Authorization"
msgstr "Sự Phân Quyền"

#: src/SUMMARY.md:29 src/cairo/commands.md:1
msgid "Commands"
msgstr "Các Dòng Lệnh"

#: src/SUMMARY.md:30 src/cairo/events.md:1
msgid "Events"
msgstr "Các sự kiện"

#: src/SUMMARY.md:31 src/cairo/testing.md:1
msgid "Testing"
msgstr "Kiểm Thử"

#: src/SUMMARY.md:32 src/cairo/modules.md:1
msgid "Dojo Modules"
msgstr "Mô-đun Dojo"

#: src/SUMMARY.md:33 src/cairo/modules/erc20.md:1
msgid "ERC20"
msgstr ""

#: src/SUMMARY.md:34
msgid "ERC721"
msgstr ""

#: src/SUMMARY.md:35
msgid "ERC1155"
msgstr ""

#: src/SUMMARY.md:36
msgid "DeFi"
msgstr "Tài chính phi tập trung"

#: src/SUMMARY.md:38
msgid "Client SDKs"
msgstr ""

#: src/SUMMARY.md:40 src/client/overview.md:1
msgid "Overview"
msgstr "Tổng Quan"

#: src/SUMMARY.md:41
msgid "JS"
msgstr "JavaScript"

#: src/SUMMARY.md:42
msgid "Core"
msgstr ""

#: src/SUMMARY.md:44
msgid "Toolchain"
msgstr "Chuỗi Công Cụ"

#: src/SUMMARY.md:46
msgid "Dojoup"
msgstr ""

#: src/SUMMARY.md:47 src/toolchain/sozo/overview.md:1
msgid "Sozo"
msgstr "Sozo"

#: src/SUMMARY.md:48 src/SUMMARY.md:60 src/SUMMARY.md:62
msgid "Reference"
msgstr "Tài liệu tham khảo"

#: src/SUMMARY.md:49
msgid "init"
msgstr ""

#: src/SUMMARY.md:50
msgid "build"
msgstr ""

#: src/SUMMARY.md:51
msgid "test"
msgstr ""

#: src/SUMMARY.md:52
msgid "migrate"
msgstr ""

#: src/SUMMARY.md:53
msgid "execute"
msgstr "thực hiện"

#: src/SUMMARY.md:54
msgid "register"
msgstr "đăng kí"

#: src/SUMMARY.md:55
msgid "system"
msgstr "hệ thống"

#: src/SUMMARY.md:56
msgid "component"
msgstr "thành phần"

#: src/SUMMARY.md:57
msgid "events"
msgstr ""

#: src/SUMMARY.md:58
msgid "auth"
msgstr ""

#: src/SUMMARY.md:59 src/toolchain/katana/overview.md:1
msgid "Katana"
msgstr "Katana"

#: src/SUMMARY.md:61
msgid "Torii"
msgstr "Torii"

#: src/SUMMARY.md:64
msgid "Deploying"
msgstr "Triển Khai - Deploy"

#: src/SUMMARY.md:66
msgid "Locally"
msgstr "Nội Bộ - Local"

#: src/SUMMARY.md:67
msgid "Remote"
msgstr "Từ Xa - Remote"

#: src/SUMMARY.md:69
msgid "Tutorial"
msgstr "Hướng Dẫn"

#: src/SUMMARY.md:71
msgid "Onchain Chess"
msgstr ""

#: src/SUMMARY.md:72 src/tutorial/onchain-chess/0-setup.md:1
msgid "0. Setup"
msgstr "0. Cài Đặt"

#: src/SUMMARY.md:73
msgid "1. Initiate"
msgstr "1. Khởi Tạo"

#: src/SUMMARY.md:74
msgid "2. Move"
msgstr "2. Di Chuyển"

#: src/SUMMARY.md:75 src/tutorial/onchain-chess/3-legal.md:1
msgid "3. Check Legal Move"
msgstr "3. Kiểm Tra Các Bước Hợp Lệ"

#: src/SUMMARY.md:76
msgid "4. Test Chess"
msgstr "4. Kiểm Thử"

#: src/SUMMARY.md:79
msgid "Contributors"
msgstr "Người Đóng Góp"

#: src/index.md:1
msgid "![Dojo](images/dojo-mark-full-dark.svg)"
msgstr ""

#: src/index.md:3
msgid ""
"Dojo is an open-source project, currently in its early development phase, "
"and warmly welcomes contributors. For additional resources, join the "
"community on [Discord](https://discord.gg/vUN4Xq9Qv6) and check out the "
"[contribution guide](./misc/contributors.md)."
msgstr ""
"Dojo là dự án mã nguồn mở đang trong quá trình phát triển ban đầu, Dojo luôn "
"chào đón nồng nhiệt những đóng góp mới. Với những tài liệu bổ sung chưa có "
"trong sách, bạn có thể tham gia cộng đồng tại [Discord](https://discord.gg/"
"vUN4Xq9Qv6) và đừng quên đọc [contribution guide](./misc/contributors.md)."

#: src/index.md:7
msgid "Dojo: The Provable Game Engine"
msgstr ""

#: src/index.md:9
msgid ""
"Dojo employs [Cairo](https://github.com/starkware-libs/cairo) to deliver a "
"robust architecture and toolset for designing autonomous worlds and onchain "
"games. It features an integrated entity component system (ECS) and includes "
"a native indexer, RPC testnet, and a comprehensive CLI management toolkit."
msgstr ""
"Dojo sử dụng [Cairo](https://github.com/starkware-libs/cairo) để mang đến "
"kiến ​​trúc và bộ công cụ mạnh mẽ nhằm thiết kế các thế giới tự trị "
"(Autonomous Worlds) và trò chơi trên chuỗi (Onchain games). Dojo sử dụng mẫu "
"thiết kế Entity-component System (ECS) và bao gồm bộ Indexer, RPC testnet và "
"bộ công cụ quản lý CLI toàn diện."

#: src/index.md:11
msgid ""
"This book is dedicated to familiarizing you with the Dojo engine and the "
"potential of Provable games. A special section on the [Theory](./theory/"
"autonomous-worlds.md) elucidates this emergent concept of autonomous worlds "
"and Provable games."
msgstr ""
"Cuốn sách này được thiết kế để giúp bạn làm quen với công cụ Dojo và tiềm "
"năng của các trò chơi có thể chứng minh được (Provable Games). Một bài viết "
"đặc biệt trên [Theory](./theory/autonomous-worlds.md) làm sáng tỏ khái niệm "
"mới nổi này về thế giới tự trị và trò chơi có thể chứng minh được."

#: src/index.md:13
msgid "[Quickstart](./getting-started/quick-start.md)"
msgstr ""

#: src/index.md:14
msgid "[What is Dojo? ](./theory/what-is-dojo.md)"
msgstr "[Công Cụ Dojo Là Gì? ](./theory/what-is-dojo.md)"

#: src/index.md:15
msgid "[Explore the Architecture](./cairo/hello-dojo.md)"
msgstr "[Tìm Hiểu Về Kiến Trúc Của Dojo Engine](./cairo/hello-dojo.md)"

#: src/index.md:18
msgid "Explainer"
msgstr "Giải Thích"

#: src/index.md:20
msgid ""
"Here's a video of [Cartridge](https://cartridge.gg/)'s [Tarrence](https://"
"twitter.com/tarrenceva) explaining how Dojo works at the 2023 [Autonomous "
"Anonymous Summit](https://twitter.com/pet3rpan_/status/1666764726427353091):"
msgstr ""
"Đây là một video của [Cartridge](https://cartridge.gg/)'s [Tarrence](https://"
"twitter.com/tarrenceva) giải thích cách mà Dojo hoạt động tại [Autonomous "
"Anonymous Summit 2023](https://twitter.com/pet3rpan_/"
"status/1666764726427353091):"

#: src/index.md:30
msgid "Organizational Structure"
msgstr "Cơ Cấu Tổ Chức"

#: src/index.md:31
msgid ""
"Dojo is an open-source initiative, licensed under MIT, dedicated to "
"promoting and advancing the concept of Autonomous Worlds (AWs). It is "
"spearheaded by [Cartridge](https://cartridge.gg/), [Realms & BibliothecaDAO]"
"(https://bibliothecadao.xyz/), [briq](https://briq.construction/) and many "
"more [contributors](https://github.com/orgs/dojoengine/people)."
msgstr ""
"Dojo là một sáng kiến ​​nguồn mở với giấy phép MIT, dành riêng cho việc quảng "
"bá và nâng cao khái niệm Thế giới tự trị - Autonomous Worlds (AWs). Dojo được dẫn đầu bởi "
"[Cartridge](https://cartridge.gg/), [Realms & BibliothecaDAO](https://"
"bibliothecadao.xyz/), [briq](https://briq.construction/) và "
"[người đóng góp](https://github.com/orgs/dojoengine/people)."

#: src/index.md:33
msgid "How do I get involved?"
msgstr "Tôi có thể tham gia bằng cách nào ?"

#: src/index.md:35
msgid ""
"Check out our [Github](https://github.com/dojoengine), our [Twitter](https://"
"twitter.com/dojostarknet), [Discord](https://discord.gg/vUN4Xq9Qv6) and "
"[contribution guide](https://book.dojoengine.org/misc/contributors.html)"
msgstr ""
"Hãy đọc qua [Github](https://github.com/dojoengine),[Twitter](https://"
"twitter.com/dojostarknet), [Discord](https://discord.gg/vUN4Xq9Qv6) và "
"[contribution guide](https://book.dojoengine.org/misc/contributors.html) của "
"chúng tôi."

#: src/theory/what-is-dojo.md:3
msgid ""
"Dojo is the culmination of lessons learned from attempts at building [on-"
"chain games](https://naavik.co/digest/primer-fully-on-chain-gaming), an "
"emerging sector in the gaming industry. Any developer who has endeavored to "
"build an on-chain game recognizes the inherent engineering hurdles - a "
"realization that drove us to create Dojo. Just as you wouldn't recreate "
"Unity every time you develop a new game, the same principle applies here. "
"Dojo is designed to handle the complex infrastructure, allowing developers "
"to focus on the unique aspects of their games."
msgstr ""
"Dojo là đỉnh cao của những bài học rút ra từ nỗ lực xây dựng [trò chơi on-"
"chain](https://naavik.co/digest/primer-full-on-chain-gaming), một lĩnh vực "
"mới nổi trong ngành công nghiệp trò chơi. Bất kỳ nhà phát triển game nào đã "
"nỗ lực xây dựng một trò chơi on-chain đều nhận ra những rào cản kỹ thuật cố "
"hữu - nhận thức đó đã thúc đẩy chúng tôi tạo ra Dojo. Cũng giống như cách mà "
"bạn sẽ không tạo lại Unity mỗi khi phát triển một trò chơi mới, nguyên tắc "
"tương tự cũng được áp dụng ở đây. Dojo được thiết kế để xử lý cơ sở hạ tầng "
"phức tạp, cho phép các nhà phát triển tập trung vào các khía cạnh độc đáo "
"trong trò chơi của họ."

#: src/theory/what-is-dojo.md:5
msgid ""
"Dojo aspires to be the go-to tool for building provable games. It is "
"radically open-source, and all contributions are welcome."
msgstr ""
"Dojo mong muốn trở thành công cụ phù hợp để xây dựng các provable games (Trò "
"chơi có thể chứng mình được bằng công nghệ zero-knowledge). Dojo hoàn toàn "
"là nguồn mở và mọi đóng góp đều được hoan nghênh."

#: src/theory/what-is-dojo.md:9
msgid "Stop building infrastructure; start building games"
msgstr ""
"Không cần bận tâm về thiết kế hạ tầng nữa, hãy tập trung vào xây dựng các "
"trò chơi"

#: src/theory/what-is-dojo.md:11
msgid ""
"Dojo's suite of tools takes the infrastructure complexity out of building on-"
"chain games. It includes:"
msgstr ""
"Bộ công cụ của Dojo giúp loại bỏ sự phức tạp về cơ sở hạ tầng khi xây dựng "
"trò chơi on-chain. Nó bao gồm:"

#: src/theory/what-is-dojo.md:13
msgid "Entity Component System (ECS)"
msgstr ""

#: src/theory/what-is-dojo.md:15
msgid ""
"Dojo offers a standardized approach to building games on smart contracts. "
"Recognizing the intricacies of game design, Dojo simplifies the development "
"process, allowing creators to focus on gameplay logic. This standardization "
"paves the way for an interconnected network of worlds, streamlining "
"developer expertise and promoting game integration."
msgstr ""
"Dojo cung cấp một cách tiếp cận tiêu chuẩn hóa để xây dựng trò chơi trên hợp "
"đồng thông mình (Smart Contract). Nhận thấy sự phức tạp của thiết kế trò "
"chơi, Dojo đơn giản hóa quá trình phát triển, cho phép người sáng tạo tập "
"trung vào logic của trò chơi. Tiêu chuẩn hóa này mở đường cho một mạng lưới "
"các thế giới được kết nối với nhau, hợp lý hóa chuyên môn của nhà phát triển "
"và thúc đẩy tích hợp trò chơi."

#: src/theory/what-is-dojo.md:17
msgid ""
"Utilizing the ECS (Entity Component System) as its core architecture, Dojo "
"effectively manages the state and behavior of Autonomous Worlds (AWs). This "
"model revolves around systems acting on entities, which are collections of "
"pure data components. Systems efficiently determine which entities to "
"process based on persistent queries over these components."
msgstr ""
"Bằng cách sử dụng ECS ​​(Hệ thống thành phần thực thể) làm kiến ​​trúc cốt lõi, "
"Dojo quản lý hiệu quả trạng thái và hành vi của Thế giới tự trị (AWs). Mô "
"hình này xoay quanh các hệ thống hoạt động trên các thực thể, là tập hợp các "
"thành phần dữ liệu thuần túy. Hệ thống xác định một cách hiệu quả những thực "
"thể nào cần xử lý dựa trên các truy vấn liên tục về các thành phần này."

#: src/theory/what-is-dojo.md:19
msgid "Read detailed information about the [Dojo ECS](../cairo/overview.md)."
msgstr "Đọc thông tin chi tiết về [Dojo ECS](../cairo/overview.md)."

#: src/theory/what-is-dojo.md:21
msgid "[Torii](/crates/torii/README.md) - Starknet Indexer"
msgstr ""

#: src/theory/what-is-dojo.md:23
msgid ""
"Building on-chain games often involves grappling with the challenge of "
"indexing on-chain state. However, Dojo standardizes contract states to "
"mirror traditional relational databases. This setup enables the [Torii "
"Indexer](../toolchain/torii/overview.md) to auto-index all contract states, "
"ensuring efficient and streamlined queries. Torii then exposes these states "
"via a GraphQL API or gRPC (coming soon), allowing developers to easily query "
"and retrieve data."
msgstr ""
"Xây dựng trò chơi trên chuỗi thường liên quan đến việc phải vật lộn với "
"indexing các trạng thái (state) on-chain. Tuy nhiên, Dojo tiêu chuẩn hóa các "
"state của contract để phản ánh cơ sở dữ liệu quan hệ truyền thống. Thiết lập "
"này cho phép [Torii Indexer](../toolchain/torii/overview.md) tự động lập "
"index của tất cả các state, đảm bảo các truy vấn hiệu quả và hợp lý. Sau đó, "
"Torii hiển thị các trạng thái này thông qua API GraphQL hoặc gRPC (sắp ra "
"mắt), cho phép các nhà phát triển dễ dàng truy vấn và truy xuất dữ liệu."

#: src/theory/what-is-dojo.md:25
msgid ""
"Using Torii drastically reduces the time and effort required to build on-"
"chain games. It also eliminates the need to manually create indexers, which "
"can be a tedious and error-prone process."
msgstr ""
"Sử dụng Torii giúp giảm đáng kể thời gian và công sức cần thiết để xây dựng "
"trò chơi on-chain. Nó cũng loại bỏ nhu cầu tạo các index theo cách thủ công, "
"đây có thể là một quá trình tẻ nhạt và dễ xảy ra lỗi."

#: src/theory/what-is-dojo.md:27
msgid "[Katana](/crates/katana/README.md) - Blazingly fast development network"
msgstr "[Katana](/crates/katana/README.md) - Development Network tốc độ cao"

#: src/theory/what-is-dojo.md:29
msgid ""
"Katana is a customizable StarkNet development network. It is blazingly fast "
"and allows you to iterate on your game logic swiftly."
msgstr ""
"Katana là mạng lưới để thử nghiệm sản phẩm dựa trên nguyên mẫu là Starknet "
"và có thể tuỳ chỉnh được. Nó cực kỳ nhanh và cho phép bạn lặp lại logic trò "
"chơi của mình một cách nhanh chóng."

#: src/theory/what-is-dojo.md:31
msgid "[Sozo CLI](/crates/sozo/README.md) - CLI Management Tool"
msgstr "[Sozo CLI](/crates/sozo/README.md) - Bộ công cụ quản lý CLI"

#: src/theory/what-is-dojo.md:33
msgid ""
"Dojo worlds are poised to become some of the largest contracts. Sozo is a "
"CLI tool that assists you in managing your worlds. It enables you to create, "
"build, test, and deploy your worlds. Additionally, you can craft new "
"components and systems and register them with your world."
msgstr ""
"Các contract World của Dojo sẽ trở thành một trong những contract lớn nhất. "
"Sozo là một công cụ CLI hỗ trợ bạn quản lý World của mình. Nó cho phép bạn "
"tạo, xây dựng, thử nghiệm và triển khai World của mình. Ngoài ra, bạn có thể "
"tạo các components, system mới và register chúng với World của bạn."

#: src/theory/what-is-dojo.md:35
msgid "What Dojo doesn't give you"
msgstr "Những gì Dojo không cung cấp cho bạn"

#: src/theory/what-is-dojo.md:37
msgid ""
"Visual graphics - While Dojo provides networking and contracts, it doesn't "
"offer graphical engines. You can bring your graphics of choice! Integrate "
"your Dojo world with Unreal, Godot, or Unity."
msgstr ""
"Đồ họa trực quan - Mặc dù Dojo cung cấp mạng lưới và contracts nhưng Dojo "
"không cung cấp công cụ đồ họa. Bạn có thể sử dụng engine đồ hoạ mà bạn chọn! "
"Bạn có thể tích hợp thế giới Dojo của bạn với Unreal, Godot hoặc Unity."

#: src/theory/what-is-dojo.md:39
msgid "Understanding the Dojo Workflow: A Visual Guide"
msgstr "Tìm hiểu Workflow của Dojo: Hướng dẫn trực quan"

#: src/theory/what-is-dojo.md:41
msgid ""
"To help you understand how `Sozo` works, we've created a visual guide that "
"outlines the flow of execution using the powerful sozo tool and the katana "
"development network."
msgstr ""
"Để giúp bạn hiểu cách `Sozo` hoạt động, chúng tôi đã tạo một hướng dẫn trực "
"quan phác thảo quy trình thực thi bằng cách sử dụng công cụ Sozo và "
"development network Katana."

#: src/theory/what-is-dojo.md:43
msgid ""
"This visual representation will help you grasp the fundamental steps of "
"working with Dojo, guiding you through the process of creating and managing "
"your on-chain games."
msgstr ""
"Phần trình bày trực quan này sẽ giúp bạn nắm bắt các bước cơ bản khi làm "
"việc với Dojo, hướng dẫn bạn trong quá trình tạo và quản lý trò chơi trên "
"chuỗi của mình."

#: src/theory/what-is-dojo.md:45
msgid "![Dojo Sozo Workflow](../images/dojo-sozo-workflow.jpg)"
msgstr ""

#: src/theory/autonomous-worlds.md:1
msgid "Autonomous Worlds"
msgstr "Thế giới tự trị (Autonomous Worlds)"

#: src/theory/autonomous-worlds.md:3
msgid ""
"\"Autonomous worlds represent persistent, permissionless, and decentralized "
"open environments that users can freely interact with and contribute to.\""
msgstr ""
"\"Các Autonomous World đại diện cho các môi trường mở liên tục, không cần "
"cấp phép và phi tập trung mà người dùng có thể tự do tương tác và đóng góp.\""

#: src/theory/autonomous-worlds.md:5
msgid ""
"The precise definition of Autonomous Worlds (AWs) remains somewhat elusive, "
"as it is more of an abstract concept that has yet to be fully crystallized. "
"Lattice first [introduced](https://0xparc.org/blog/autonomous-worlds) the "
"terminology in 2022, but the notion of open worlds operating on the "
"blockchain has been around for a while. The abstraction introduced by MUD "
"served as a catalyst for the market to recognize the potential of these "
"worlds."
msgstr ""
"Định nghĩa chính xác về Thế giới tự trị (AW) vẫn còn hơi khó nắm bắt, vì nó "
"giống như một khái niệm trừu tượng vẫn chưa được kết tinh hoàn toàn. Lattice "
"lần đầu tiên [giới thiệu](https://0xparc.org/blog/autonomous-worlds) thuật "
"ngữ này vào năm 2022, nhưng khái niệm về thế giới mở hoạt động trên mạng "
"lưới blockchain đã xuất hiện được một thời gian. Sự trừu tượng được MUD giới "
"thiệu đóng vai trò như một chất xúc tác để thị trường nhận ra tiềm năng của "
"AWs."

#: src/theory/autonomous-worlds.md:7
msgid ""
"Autonomous Worlds share notable similarities with blockchains in their "
"fundamental nature. Once established, they persist, maintaining their state "
"throughout the lifespan of the chain. Players can join or leave, and "
"developers can expand these worlds by deploying features in a permissionless "
"manner, much like how contracts are added to a chain. While there is no "
"universally accepted definition for an Autonomous World, we believe that a "
"game must possess at least the following two essential features to be "
"considered as such:"
msgstr ""
"Autonomous Worlds có những điểm tương đồng đáng chú ý với blockchain về bản "
"chất cơ bản của chúng. Sau khi được thiết lập, chúng sẽ tồn tại, duy trì "
"trạng thái trong suốt vòng đời của chain. Người chơi có thể tham gia hoặc "
"rời đi và nhà phát triển có thể mở rộng những thế giới này bằng cách triển "
"khai các tính năng theo cách không cần cấp phép, giống như cách thêm hợp "
"đồng vào chuỗi. Mặc dù không có định nghĩa được chấp nhận rộng rãi cho "
"Autonomous Worlds, chúng tôi tin rằng một trò chơi phải sở hữu ít nhất hai "
"tính năng thiết yếu sau đây để được coi là Autonomous Worlds:"

#: src/theory/autonomous-worlds.md:9
msgid ""
"Decentralized data availability layer: While the state execution may reside "
"on a centralized layer, it is crucial that the state can be reconstructed if "
"the execution layer ceases to exist. Rollups offer a solution, providing "
"increased capacity execution layers while ensuring data is permanently "
"settled on Ethereum. This guarantees the world's perpetual persistence."
msgstr ""
"Layer có dữ liệu khả dụng và phi tập trung: Mặc dù việc thực thi trạng thái "
"(state) có thể nằm trên một lớp tập trung, nhưng điều quan trọng là state có "
"thể được xây dựng lại nếu lớp thực thi (execution layer) không còn tồn tại. "
"Công nghệ Rollups cung cấp các nhà phát triển một giải pháp giúp cung cấp "
"các lớp thực thi công suất tăng lên trong khi vẫn đảm bảo dữ liệu được giải "
"quyết vĩnh viễn trên Ethereum. Điều này đảm bảo sự tồn tại vĩnh viễn của thế "
"giới."

#: src/theory/autonomous-worlds.md:11
msgid ""
"Permissionless entry point for expanding the world: The World contract must "
"be capable of accepting new systems and components without requiring "
"permission. While this doesn't imply that every component and system will be "
"utilized, they must adhere to this pattern, ensuring open and unrestricted "
"access for potential enhancements."
msgstr ""
"Entry point không cần cấp phép để mở rộng thế giới: Contract World phải có "
"khả năng chấp nhận các System và Component mới mà không cần xin phép. Mặc dù "
"điều này không có nghĩa là mọi Component và System sẽ được sử dụng nhưng "
"chúng phải tuân thủ mô hình này, đảm bảo quyền truy cập mở và không hạn chế "
"đối với các cải tiến tiềm năng."

#: src/theory/autonomous-worlds.md:13
msgid ""
"We're firm believers in the potential for Autonomous Worlds to catalize the "
"exploration of novel forms in the medium provided by zk proofs and "
"blockchain technology. This is not only about games, but also about new "
"forms of artwork, coordination, fun, emerging from tinkering and radical "
"innovation, eventually questioning the very notion of \"play\" in this brave "
"new decentralized and trustless world."
msgstr ""
"Chúng tôi tin tưởng chắc chắn vào tiềm năng của Autonomous Worlds trong việc "
"thúc đẩy việc khám phá các hình thức mới trong môi trường zk proofs và công "
"nghệ blockchain. Đây không chỉ là về trò chơi mà còn về các hình thức nghệ "
"thuật mới, sự phối hợp, niềm vui, nổi lên từ sự mày mò và đổi mới triệt để, "
"cuối cùng đặt câu hỏi về chính khái niệm \"chơi\" trong thế giới phi tập "
"trung và không bị ràng buộc bởi niềm tin như thế giới truyền thống."

#: src/theory/autonomous-worlds.md:15
msgid "Homework"
msgstr "Bài Tập Về Nhà"

#: src/theory/autonomous-worlds.md:16
msgid ""
"[Wired - Autonomous Worlds Primer](https://www.wired.com/story/autonomous-"
"worlds-aim-to-free-online-games-from-corporate-control/)"
msgstr ""

#: src/theory/autonomous-worlds.md:17
msgid ""
"[0xParc - Autonomous Worlds (Part 1)](https://0xparc.org/blog/autonomous-"
"worlds)"
msgstr ""

#: src/theory/autonomous-worlds.md:18
msgid ""
"[Gubsheep - The Strongest Crypto Gaming Thesis](https://gubsheep.substack."
"com/p/the-strongest-crypto-gaming-thesis)"
msgstr ""

#: src/theory/autonomous-worlds.md:19
msgid ""
"[Lattice - MUD: An engine for Autonomous Worlds](https://lattice.xyz/blog/"
"mud-an-engine-for-autonomous-worlds)"
msgstr ""

#: src/theory/autonomous-worlds.md:20
msgid "[Guiltygyoza - Game 2.0](https://www.guiltygyoza.xyz/2022/07/game2)"
msgstr ""

#: src/theory/autonomous-worlds.md:21
msgid ""
"[Guiltygyoza - Composable Engineering](https://www.guiltygyoza.xyz/2023/05/"
"composable-engineering)"
msgstr ""

#: src/theory/autonomous-worlds.md:22
msgid ""
"[Jay Springett - Wind-up Worlds](https://www.thejaymo.net/2022/05/06/wind-up-"
"worlds/)"
msgstr ""

#: src/theory/autonomous-worlds.md:23
msgid ""
"[Are.na collection on Autonomous Worlds](https://www.are.na/sylve-chevet/on-"
"chain-realities-and-autonomous-worlds)"
msgstr ""

#: src/theory/cairo.md:1
msgid "Provable games"
msgstr "Những trò chơi sử dụng công nghệ zk-proofs(Provable games)"

#: src/theory/cairo.md:3
msgid ""
"Provable games demand [zero-knowledge](https://ethereum.org/en/zero-"
"knowledge-proofs/) properties for efficient scaling and verification of "
"computations. [Cairo](https://book.starknet.io/chapter_1/what_is_cairo.html) "
"addresses this need by providing a generalized language, eliminating the "
"complexity of creating circuits to incorporate [SNARKs](https://consensys."
"net/blog/developers/introduction-to-zk-snarks/). "
msgstr ""
"Provable games cần phải có thuộc tính [zero-knowledge](https://ethereum.org/en/"
"zero-know-proofs/) để mở rộng quy mô và xác minh tính toán một cách hiệu "
"quả. [Cairo](https://book.starknet.io/chapter_1/what_is_cairo.html) giải "
"quyết nhu cầu này bằng cách cung cấp ngôn ngữ tổng quát, loại bỏ sự phức tạp "
"của việc tạo mạch để kết hợp [SNARK](https://consensys.net/blog /nhà phát "
"triển/giới thiệu-to-zk-snarks/). "

#: src/theory/cairo.md:5
msgid ""
"**You can simply program in Cairo and your applications become automatically "
"provable**. "
msgstr ""
"**Bạn chỉ cần lập trình ở Cairo và các ứng dụng của bạn sẽ tự động được "
"chứng minh**. "

#: src/theory/cairo.md:7
msgid ""
"Moreover, you can deploy your programs on the [Cairo Virtual Machine]"
"(https://medium.com/starkware/cairo-welcome-on-board-1cf3487554f) (CVM), "
"which is compatible with Starknet's Layer 2, Starknet appchains, and even in-"
"browser through WebAssembly (WASM)! Dojo aims to supply straightforward ZK "
"primitives to fuel your game development."
msgstr ""
"Ngoài ra, bạn có thể triển khai các chương trình của mình trên [Cairo VM]"
"(https://medium.com/starkware/cairo-welcome-on-board-1cf3487554f) (CVM), "
"tương thích với Starknet Layer 2, Starknet appchains, và thậm chí trong "
"trình duyệt thông qua WebAssembly (WASM)! Dojo nhằm mục đích cung cấp các "
"nguyên hàm ZK đơn giản để thúc đẩy quá trình phát triển trò chơi của bạn."

#: src/theory/cairo.md:9
msgid ""
"For more information about Starknet, Cairo and its tech stack, check out the "
"[Starknet & Cairo book](https://book.starknet.io/)."
msgstr ""
"Để biết thêm thông tin về Starknet, Cairo và nền tảng công nghệ của nó, hãy "
"xem [Starknet & Cairo book](https://book.starknet.io/)."

#: src/theory/cairo.md:11 src/getting-started/setup.md:8
msgid "Cairo"
msgstr ""

#: src/theory/cairo.md:13
msgid ""
"Cairo is an open-source, Turing-complete smart contract language developed "
"by Starkware, designed to power the Validity Rollup Starknet. The language "
"enables highly expressive and verifiable computation, making it well-suited "
"for building scalable and secure applications, including decentralized "
"finance (DeFi) projects."
msgstr ""
"Cairo là một ngôn ngữ hợp đồng thông minh hoàn chỉnh, mã nguồn mở, được phát "
"triển bởi Starkware, được thiết kế để cung cấp năng lượng cho Validity "
"Rollup Starknet. Ngôn ngữ này cho phép tính toán có tính biểu cảm cao và có "
"thể kiểm chứng, khiến nó rất phù hợp để xây dựng các ứng dụng an toàn và có "
"thể mở rộng, bao gồm các dự án tài chính phi tập trung (DeFi)."

#: src/theory/cairo.md:15
msgid ""
"Dojo builds on Cairo to create a robust framework for developing Autonomous "
"Worlds (AWs). By leveraging the capabilities of Cairo, Dojo aims to "
"streamline the development process, improve maintainability, and enhance the "
"performance of AWs."
msgstr ""
"Dojo xây dựng trên Cairo để tạo ra một khuôn khổ vững chắc cho việc phát "
"triển Autonomous Worlds. Bằng cách tận dụng các khả năng của Cairo, Dojo "
"hướng tới hợp lý hóa quy trình phát triển, cải thiện khả năng bảo trì và "
"nâng cao hiệu suất của AW."

#: src/theory/cairo.md:17
msgid ""
"A key feature of the Dojo framework is its use of [commands](../cairo/"
"commands.md). Commands are a design pattern that helps to reduce boilerplate "
"code, resulting in cleaner and more maintainable applications. They achieve "
"this by encapsulating specific actions or operations within self-contained, "
"reusable units."
msgstr ""
"Một tính năng chính của Dojo là việc sử dụng [Commands](../cairo/commands."
"md). Commands là một mẫu thiết kế giúp giảm thiểu mã soạn sẵn, mang lại các "
"ứng dụng sạch hơn và dễ bảo trì hơn. Commands đạt được điều này bằng cách "
"gói gọn các hành động hoặc hoạt động cụ thể trong các đơn vị khép kín, có "
"thể tái sử dụng."

#: src/theory/cairo.md:19
msgid ""
"Developers can write commands freely within Systems, and the Cairo compiler "
"takes care of inlining the appropriate functions. "
msgstr ""
"Các nhà phát triển có thể viết lệnh một cách tự do trong Systems và trình "
"biên dịch Cairo sẽ đảm nhiệm việc nội tuyến các hàm thích hợp. "

#: src/theory/cairo.md:21
msgid "Essential Reading"
msgstr "Tài Liệu Nên Đọc"

#: src/theory/cairo.md:22
msgid "[Cairo book](https://cairo-book.github.io/)"
msgstr ""

#: src/theory/cairo.md:23
msgid "[Awesome Cairo](https://github.com/auditless/awesome-cairo)"
msgstr ""

#: src/theory/cairo.md:24
msgid "[Starknet Book](https://book.starknet.io/)"
msgstr ""

#: src/theory/cairo.md:26
msgid "Starknet as an L2"
msgstr "Starknet như một L2"

#: src/theory/cairo.md:28
msgid ""
"Starknet is a Validity Rollup Layer 2 (L2) solution designed to scale "
"Ethereum. It operates by offering high transaction throughput and low gas "
"costs while maintaining the same level of security as Ethereum Layer 1 (L1). "
"The strategy it uses is akin to solving a sudoku puzzle: verifying a "
"solution is easier than finding the solution from scratch. Similarly, "
"Starknet replaces heavy and costly L1 computation with cheaper L1 "
"verification through the use of STARK proofs computed off-chain."
msgstr ""
"Starknet là giải pháp Validity Rollup Layer 2 (L2) được thiết kế để mở rộng "
"quy mô của Ethereum. Starknet hoạt động bằng cách cung cấp thông lượng giao "
"dịch cao và chi phí gas thấp trong khi vẫn duy trì mức độ bảo mật tương tự "
"như Ethereum Layer 1 (L1). Chiến lược mà Starknet sử dụng giống như giải một "
"câu đố sudoku: xác minh một giải pháp dễ dàng hơn việc tìm ra giải pháp từ "
"đầu. Tương tự, Starknet thay thế việc tính toán L1 nặng nề và tốn kém bằng "
"xác minh L1 rẻ hơn thông qua việc sử dụng các proofs STARK được tính toán "
"off-chain."

#: src/theory/cairo.md:30
msgid ""
"In more technical terms, Starknet is a permissionless Validity-Rollup (also "
"known as a \"ZK-Rollup\") that supports general computation and currently "
"runs as an L2 network over Ethereum. The network's L1 security is guaranteed "
"by its utilization of the STARK cryptographic proof system, which is "
"considered one of the safest and most scalable."
msgstr ""
"Theo thuật ngữ kỹ thuật hơn, Starknet là một Validity-Rollup không cần cấp "
"phép (còn được gọi là \"ZK-Rollup\") hỗ trợ tính toán chung và hiện đang "
"chạy dưới dạng mạng L2 trên Ethereum. Bảo mật L1 của mạng được đảm bảo bằng "
"cách sử dụng hệ thống cryptographic STARK, được coi là một trong những hệ "
"thống an toàn nhất và có khả năng mở rộng nhất."

#: src/theory/cairo.md:32
msgid "Starknet as an Appchain"
msgstr "Starknet như một Appchain"

#: src/theory/cairo.md:34
msgid ""
"Cairo is an isomorphic, general-purpose language, optimized for Zero-"
"Knowledge (ZK) proofs. It's the driving force behind Starknet, Starkex, and "
"appchains. Remarkably, you can also run it in WebAssembly (WASM) to generate "
"proofs on the client-side! The Dojo team is working closely with the [Madara]"
"(https://github.com/keep-starknet-strange/madara) team to enable Starknet "
"appchains to seamlessly run Dojo worlds."
msgstr ""
"Cairo là một ngôn ngữ đa hình, có mục đích chung, được tối ưu hóa cho các "
"Zero-Knowledge (ZK) proofs. Đó là động lực thúc đẩy Starknet, Starkex và các "
"appchains. Đáng chú ý hơn, bạn cũng có thể chạy Cairo trong WebAssembly "
"(WASM) để tạo proof ở phía client! Nhóm phát triển Dojo đang hợp tác chặt "
"chẽ với nhóm [Madara](https://github.com/keep-starknet-strange/madara) để "
"cho phép appchains Starknet vận hành liền mạch các thế giới Dojo."

#: src/theory/faqs.md:3
msgid "Who owns Dojo?"
msgstr "Ai sở hữu Dojo?"

#: src/theory/faqs.md:5
msgid ""
"Dojo is strictly open-source and uses the Apache 2.0 license. Anyone can use "
"Dojo for free, and anyone can contribute to the project."
msgstr ""
"Dojo hoàn toàn là nguồn mở và sử dụng giấy phép Apache 2.0. Bất kỳ ai cũng "
"có thể sử dụng Dojo miễn phí và bất kỳ ai cũng có thể đóng góp cho dự án."

#: src/theory/faqs.md:7
msgid "Why Dojo?"
msgstr "Tại sao lại là Dojo?"

#: src/theory/faqs.md:9
msgid ""
"Dojo was created to solve problems the founders faced when building onchain "
"games. It standardizes the process of building such games and provides a "
"suite of tools to make it easier."
msgstr ""
"Dojo được tạo ra để giải quyết các vấn đề mà những nhà sáng lập gặp phải khi "
"xây dựng trò chơi on-chain. Nó tiêu chuẩn hóa quy trình xây dựng những trò "
"chơi như vậy và cung cấp một bộ công cụ để giúp việc này trở nên dễ dàng hơn."

#: src/theory/faqs.md:11
msgid "What is the Dojo roadmap?"
msgstr "Lộ Trình Phát Triển của Dojo?"

#: src/theory/faqs.md:13
msgid ""
"Dojo is rapidly evolving. You can find open issues on the [Dojo Github]"
"(https://github.com/dojoengine/dojo/issues) and join the [Discord](https://"
"discord.gg/vUN4Xq9Qv6) to get involved. If you have ideas for the project, "
"please open an issue."
msgstr ""
"Dojo đang phát triển nhanh chóng. Bạn có thể tìm thấy các sự cố còn tồn tại "
"trên [Dojo Github](https://github.com/dojoengine/dojo/issues) và [Discord]"
"(https://discord.gg/vUN4Xq9Qv6). Nếu bạn có ý tưởng cho dự án, vui lòng mở "
"một issue trên Github."

#: src/theory/faqs.md:15
msgid "What is an onchain game?"
msgstr "Trò chơi on-chain là gì?"

#: src/theory/faqs.md:17
msgid ""
"Onchain games are games that exist entirely on a public blockchain network; "
"all states and logic are onchain. Clients (like web browsers) do not exist "
"on the chain but exist purely to interact with and interpret the onchain "
"state."
msgstr ""
"Trò chơi onchain là trò chơi tồn tại hoàn toàn trên mạng blockchain công "
"cộng; tất cả các trạng thái và logic đều trên chain. Các client (như trình "
"duyệt web) không nằm trên chain và được sử dụng để tương tác và thông dịch "
"state trên chain."

#: src/theory/faqs.md:19
msgid "What is an autonomous world?"
msgstr "Autonomous World là gì?"

#: src/theory/faqs.md:21
msgid ""
"An autonomous world is one that exists entirely onchain. It's not controlled "
"by any single entity but is instead governed by the rules set within that "
"world. Dive deeper into the topic here: [Autonomous Worlds](../theory/"
"autonomous-worlds.md)."
msgstr ""
"Một Autonomous Worlds là một thế giới tồn tại hoàn toàn trên chain. Nó không "
"bị kiểm soát bởi bất kỳ thực thể đơn lẻ nào mà thay vào đó được điều chỉnh "
"bởi các quy tắc được đặt ra trong thế giới đó. Tìm hiểu sâu hơn về chủ đề "
"tại đây: [Autonomous Worlds](../theory/autonomous-worlds.md)."

#: src/theory/faqs.md:23
msgid "What is Cairo?"
msgstr "Cairo Là Gì ?"

#: src/theory/faqs.md:25
msgid ""
"Cairo is an opensource programming language invented by Starkware. It's a "
"Turing-complete language meant for general-purpose computation. It's a low-"
"level language designed to compile to the Cairo Virtual Machine. Learn more "
"about it here: [Cairo](../theory/cairo.md)."
msgstr ""
"Cairo là ngôn ngữ lập trình mã nguồn mở được phát minh bởi Starkware. Đó là "
"một ngôn ngữ Turing-complete dành chung cho mục đích tính toán. Đó là ngôn "
"ngữ cấp thấp được thiết kế để biên dịch sang CairoVM. Tìm hiểu thêm về nó "
"tại đây: [Cairo](../theory/cairo.md)."

#: src/theory/faqs.md:27
msgid "What is a provable game?"
msgstr "Một trò chơi có thể chứng minh được (provable game) là gì?"

#: src/theory/faqs.md:29
msgid ""
"Thanks to the magic of zero-knowledge proofs, we can ensure a game is fair "
"by verifying a zk proof created off-chain. But what does that entail? "
"Consider a game of chess. We aim for an experience where players trust each "
"other's moves. In a straightforward approach — and given the simple rules of "
"chess — if this were in a blockchain environment, every move would be a "
"transaction on the blockchain. This is costly. We just want to know the "
"winner, not every move."
msgstr ""
"Nhờ vào sự kỳ diệu của zero-knowledge proofs, chúng tôi có thể đảm bảo trò "
"chơi diễn ra công bằng bằng cách xác minh zk proof được tạo off-chain. Nhưng "
"để làm được điều đó đòi hỏi những gì? Hãy xem xét một ván cờ vua. Chúng tôi "
"hướng đến trải nghiệm mà người chơi tin tưởng vào bước đi của nhau. Theo "
"cách tiếp cận đơn giản – và đưa ra các quy tắc đơn giản của cờ vua – nếu đây "
"là trong môi trường blockchain, mọi nước đi sẽ là một giao dịch trên "
"blockchain. Việc này rất tốn kém. Chúng tôi chỉ muốn biết người chiến thắng "
"chứ không phải mọi nước đi."

#: src/theory/faqs.md:31
msgid ""
"With zk proofs and client communications, players can establish a state "
"channel, sharing moves off-chain and ensuring their validity. At the end, a "
"zk proof can be submitted to the blockchain to confirm the game's fairness. "
"This constitutes a provable game."
msgstr ""
"Với zk proofs và thông tin liên lạc giữa các client, người chơi có thể thiết "
"lập state channel, chia sẻ các bước đi off-chain và đảm bảo tính hợp lệ của "
"chúng. Cuối cùng, zk proof có thể được gửi tới blockchain để xác nhận tính "
"công bằng của trò chơi. Điều này tạo thành một trò chơi có thể chứng minh "
"được (provable game)."

#: src/getting-started/quick-start.md:3
msgid ""
"It is worth reading [theory](../theory/autonomous-worlds.md) to familiarize "
"yourself with the concept of Autonomous Worlds (AWs) and the [Cairo "
"ecosystem](../theory/cairo.md) before diving into the code."
msgstr ""
"Bạn nên đọc [thuyết AWs](../theory/autonomous-worlds.md) để làm quen với "
"khái niệm về Autonomous Worlds (AWs) và [hệ sinh thái Cairo](../theory/cairo."
"md) trước khi đi sâu vào code."

#: src/getting-started/quick-start.md:6
msgid "Install Dojoup"
msgstr "Cài đặt Dojoup"

#: src/getting-started/quick-start.md:8
msgid ""
"Dojo is built around a set of development tools - Katana, Torii and Sozo. "
"Install them all easily with Dojoup. You can find detailed information about "
"Dojoup [here](https://github.com/dojoengine/dojo/blob/master/dojoup/README."
"md)."
msgstr ""
"Dojo được xây dựng xung quanh một bộ công cụ phát triển (SDK) - Katana, "
"Torii và Sozo. Cài đặt tất cả chúng một cách dễ dàng với Dojoup. Bạn có thể "
"tìm thông tin chi tiết về Dojoup [tại đây](https://github.com/dojoengine/"
"dojo/blob/master/dojoup/README.md)."

#: src/getting-started/quick-start.md:10 src/toolchain/dojoup.md:7
msgid ""
"```sh\n"
"curl -L https://install.dojoengine.org | bash\n"
"```"
msgstr ""

#: src/getting-started/quick-start.md:14
msgid ""
"This will install Dojoup, then simply follow the instructions on-screen, "
"which will make the `dojoup` command available in your CLI."
msgstr ""
"Thao tác này sẽ cài đặt Dojoup, sau đó chỉ cần làm theo hướng dẫn trên màn "
"hình, lệnh `dojoup` sẽ có sẵn trong CLI của bạn."

#: src/getting-started/quick-start.md:21
msgid ""
"For full `dojoup` reference and debugging see [Dojoup](../toolchain/dojoup."
"md)."
msgstr ""
"Để biết thông tin tham khảo và debug về `dojoup`, hãy xem [Dojoup](../"
"toolchain/dojoup.md)."

#: src/getting-started/quick-start.md:23
msgid "Next steps"
msgstr "Bước tiếp theo"

#: src/getting-started/quick-start.md:25
msgid ""
"Head to [Hello Dojo](../cairo/hello-dojo.md) to get create your first Dojo "
"world."
msgstr ""
"Hãy đến [Hello Dojo](../cairo/hello-dojo.md) để tạo thế giới Dojo đầu tiên "
"của bạn."

#: src/getting-started/from-source.md:1
msgid "Building from source"
msgstr "Build từ các source"

#: src/getting-started/from-source.md:3
msgid ""
"If you are just wanting to play with the toolchain, we strongly suggest "
"following the [Quick Start](./quick-start.md) guide."
msgstr ""
"Nếu bạn chỉ muốn thử nghiệm với chuỗi công cụ, chúng tôi thực sự khuyên bạn "
"nên làm theo hướng dẫn [Quick Start](./quick-start.md)."

#: src/getting-started/from-source.md:5 src/getting-started/setup.md:5
msgid "Prerequisites"
msgstr "Điều Kiện Tiên Quyết"

#: src/getting-started/from-source.md:7
msgid ""
"You will need the [Rust](https://rust-lang.org) compiler and Cargo, the Rust "
"package manager. The easiest way to install both is with [`rustup.rs`]"
"(https://rustup.rs/)."
msgstr ""
"Bạn sẽ cần trình biên dịch [Rust](https://rust-lang.org) và Cargo, trình "
"quản lý gói Rust. Cách dễ nhất để cài đặt cả hai là bằng [`rustup.rs`]"
"(https://rustup.rs/)."

#: src/getting-started/from-source.md:10
msgid ""
"On Windows, you will also need a recent version of [Visual Studio](https://"
"visualstudio.microsoft.com/downloads/), installed with the \"Desktop "
"Development With C++\" Workloads option."
msgstr ""
"Trên Windows, bạn cũng cần có phiên bản mới nhất của [Visual Studio](https://"
"visualstudio.microsoft.com/downloads/), được cài đặt với tùy chọn \"Desktop "
"Development With C++\"."

#: src/getting-started/from-source.md:13
msgid "Building"
msgstr "Xây dựng"

#: src/getting-started/from-source.md:15
msgid "You can either use the different [Dojoup](#using-dojoup) flags:"
msgstr "Bạn có thể sử dụng các flags [Dojoup](#using-dojoup) khác nhau:"

#: src/getting-started/from-source.md:22
msgid "Or, by using a single Cargo command:"
msgstr "Hoặc bằng cách sử dụng một lệnh Cargo duy nhất:"

#: src/getting-started/from-source.md:24
msgid ""
"```sh\n"
"cargo install --git https://github.com/dojoengine/dojo --force sozo katana "
"torii\n"
"```"
msgstr ""

#: src/getting-started/from-source.md:28
msgid ""
"Or, by manually building from a local copy of the [Dojo repository](https://"
"github.com/dojoengine/dojo):"
msgstr ""
"Hoặc bằng cách build thủ công từ bản sao local của [kho lưu trữ Dojo]"
"(https://github.com/dojoengine/dojo):"

#: src/getting-started/from-source.md:30
msgid ""
"```sh\n"
"# clone the repository\n"
"git clone https://github.com/dojoengine/dojo.git\n"
"cd dojo\n"
"# install Sozo\n"
"cargo install --path ./crates/sozo --force\n"
"# install Katana\n"
"cargo install --path ./crates/katana --force\n"
"# install Torii\n"
"cargo install --path ./crates/torii --force\n"
"```"
msgstr ""

#: src/getting-started/setup.md:3
msgid ""
"This article is a guide to setting up a development environment for Dojo. It "
"is not suggested to follow this guide if you are just wanting to play with "
"the toolchain. We strongly suggest following the [Quick Start](../getting-"
"started/quick-start.md) guide."
msgstr ""
"Bài viết này là hướng dẫn thiết lập môi trường phát triển cho Dojo. Bạn "
"không nên làm theo hướng dẫn này nếu bạn chỉ muốn thử nghiệm với Dojo. Chúng "
"tôi thực sự khuyên bạn nên làm theo hướng dẫn [Bắt đầu nhanh](../getting-"
"started/quick-start.md)."

#: src/getting-started/setup.md:7
msgid "Rust"
msgstr ""

#: src/getting-started/setup.md:12
msgid "Guide"
msgstr "Hướng dẫn"

#: src/getting-started/setup.md:14
msgid "Clone"
msgstr "Tạo Bản Sao"

#: src/getting-started/setup.md:16
msgid ""
"```sh\n"
"git clone https://github.com/dojoengine/dojo.git\n"
"```"
msgstr ""

#: src/getting-started/setup.md:20
msgid "Linux & Mac"
msgstr ""

#: src/getting-started/setup.md:22
msgid "1. Install Rust and Dependencies"
msgstr "1. Cài đặt Rust và Dependencies"

#: src/getting-started/setup.md:24
msgid ""
"Start by installing Rust and running the test suite to confirm your setup:"
msgstr ""
"Bắt đầu bằng cách cài đặt Rust và chạy bộ thử nghiệm để xác nhận thiết lập "
"của bạn đã đúng:"

#: src/getting-started/setup.md:30
msgid ""
"Note: Depending on your Linux distribution, you may need to install "
"additional dependencies. Make sure to install any suggested or missing "
"dependencies that arise during the setup process."
msgstr ""
"Lưu ý: Tùy thuộc vào bản phân phối Linux của bạn, bạn có thể cần cài đặt "
"thêm các phần phụ thuộc. Đảm bảo cài đặt mọi dependencies được đề xuất hoặc "
"bị thiếu trong quá trình thiết lập."

#: src/getting-started/setup.md:32
msgid "2. Install Scarb Package Manager"
msgstr "2. Cài đặt Scarb Package Manager"

#: src/getting-started/setup.md:34
msgid ""
"Next, install the [Scarb](https://docs.swmansion.com/scarb) package manager "
"by running:"
msgstr ""
"Tiếp theo, cài đặt trình Package Manager [Scarb](https://docs.swmansion.com/"
"scarb) bằng cách chạy:"

#: src/getting-started/setup.md:36
msgid ""
"```sh\n"
"curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/"
"install.sh | sh\n"
"```"
msgstr ""

#: src/getting-started/setup.md:40
msgid "3. Add the Cairo 1.0 VSCode Extension"
msgstr "3. Thêm tiện ích mở rộng VSCode Cairo 1.0"

#: src/getting-started/setup.md:42
msgid ""
"Install the [Cairo 1.0](https://marketplace.visualstudio.com/items?"
"itemName=starkware.cairo1) extension for Visual Studio Code."
msgstr ""
"Cài đặt extension [Cairo 1.0](https://marketplace.visualstudio.com/items?"
"itemName=starkware.cairo1) cho Visual Studio Code."

#: src/getting-started/setup.md:45
msgid "Windows"
msgstr ""

#: src/getting-started/setup.md:47 src/getting-started/setup.md:51
msgid "_Coming soon_"
msgstr "_Sắp ra mắt_"

#: src/getting-started/setup.md:49
msgid "Container"
msgstr ""

#: src/getting-started/contributing.md:1
msgid "Contributing to the Core"
msgstr "Đóng góp cho Core"

#: src/getting-started/contributing.md:3
msgid ""
"Dojo is an open-source project, currently in its early development phase, "
"and warmly welcomes contributors."
msgstr ""
"Dojo là một dự án nguồn mở, hiện đang trong giai đoạn phát triển ban đầu và "
"nồng nhiệt chào đón những đóng góp mới."

#: src/getting-started/contributing.md:5
msgid "How to Contribute"
msgstr "Cách Contribute"

#: src/getting-started/contributing.md:7
msgid ""
"Head to the [Github](https://github.com/dojoengine/dojo/issues) for open "
"issues, if you see an issue that is unassigned, please request in the "
"comments to be assigned to it. If you have an idea for a new feature, please "
"create an issue with the `enhancement` tag."
msgstr ""
"Hãy truy cập [Github](https://github.com/dojoengine/dojo/issues) để biết các "
"vấn đề đang mở, nếu bạn thấy một vấn đề chưa được assigned, vui lòng yêu cầu "
"trong phần comment để vấn đề được assigned. Nếu bạn có ý tưởng về tính năng "
"mới, vui lòng tạo issue tại github với tag `enhancement`."

#: src/community/get-started.md:3
msgid ""
"[Community Hub](https://dojoengine.notion.site/Dojo-Engine-Community-Hub-"
"d316194b998941c48ddf771a4dd5ff08#bcd6a32db1b2406cb6c325f3b700d45a)"
msgstr ""

#: src/community/get-started.md:4
msgid "[Discord](https://discord.gg/KG9w9BmDrV)"
msgstr ""

#: src/community/get-started.md:5
msgid "[Twitter](https://twitter.com/dojostarknet)"
msgstr ""

#: src/community/get-started.md:6
msgid "[Awesome Dojo](https://github.com/dojoengine/awesome-dojo)"
msgstr ""

#: src/cairo/hello-dojo.md:3
msgid ""
"This section assumes that you have already installed the Dojo toolchain and "
"are familiar with Cairo. If not, please refer to the [Getting Started](../"
"getting-started/quick-start.md) section."
msgstr ""
"Phần này giả định rằng bạn đã cài đặt chuỗi công cụ Dojo và quen thuộc với "
"Cairo. Nếu không, vui lòng tham khảo phần [Bắt đầu](../getting-started/quick-"
"start.md)."

#: src/cairo/hello-dojo.md:5
msgid "Dojo in 15 Minutes"
msgstr "Làm quen với Dojo trong 15 phút"

#: src/cairo/hello-dojo.md:7
msgid ""
"Think of Dojo as an abstraction over Cairo, similar to how React is to "
"JavaScript. It enables you to write shorthand commands that expand into "
"complex queries during compile time. Dojo is grounded in the well-known "
"architecture known as the Entity Component System (ECS)."
msgstr ""
"Hãy coi Dojo như một sự trừu tượng hóa đối với Cairo, tương tự như cách "
"React đối với JavaScript. Nó cho phép bạn viết các commands ngắn gọn có thể "
"mở rộng thành các truy vấn phức tạp trong thời gian biên dịch. Dojo dựa trên "
"kiến ​​trúc nổi tiếng được gọi là Entity Component System (ECS)."

#: src/cairo/hello-dojo.md:9
msgid ""
"In Dojo, you design your worlds using Systems and Components. Systems "
"outline the logic of your world, while components signify the state. This "
"powerful pattern allows you to structure your logic in a highly modular way. "
"If you don't understand this yet, don't fret; we'll delve into it in detail "
"below."
msgstr ""
"Trong Dojo, bạn thiết kế thế giới của mình bằng Systems and Components. Các "
"Systems phác thảo logic thế giới của bạn, trong khi các thành phần biểu thị "
"state. Pattern mạnh mẽ này cho phép bạn thiết kế cấu trúc logic của mình "
"theo cách mang tính mô-đun cao. Nếu bạn chưa hiểu điều này, đừng lo lắng; "
"chúng ta sẽ đi sâu vào chi tiết bên dưới."

#: src/cairo/hello-dojo.md:11
msgid ""
"To start, let's set up a project to run locally on your machine. From an "
"empty directory, execute:"
msgstr ""
"Để bắt đầu, hãy thiết lập một dự án để chạy local trên máy của bạn. Từ một "
"thư mục trống, hãy chạy lệnh sau:"

#: src/cairo/hello-dojo.md:17
msgid ""
"Congratulations! You now have a local Dojo project. This command creates a "
"`dojo-starter` project in your current directory. It's the ideal starting "
"point for a new project and equips you with everything you need to begin."
msgstr ""
"Chúc mừng! Bây giờ bạn có một dự án Dojo local. Lệnh này tạo một dự án `dojo-"
"starter` trong thư mục hiện tại của bạn. Đây là điểm khởi đầu lý tưởng cho "
"một dự án mới và trang bị cho bạn mọi thứ bạn cần để bắt đầu."

#: src/cairo/hello-dojo.md:19
msgid "Anatomy of a Dojo Project"
msgstr "Cấu trúc của một dự án Dojo"

#: src/cairo/hello-dojo.md:21
msgid ""
"Inspect the contents of the `dojo-starter` project, and you'll notice the "
"following structure (excluding the non-cairo files):"
msgstr ""
"Kiểm tra code của dự án `dojo-starter` và bạn sẽ nhận thấy cấu trúc sau "
"(không bao gồm các tệp không phải cairo):"

#: src/cairo/hello-dojo.md:31
msgid ""
"Dojo projects largely resemble standard Cairo projects, with the distinction "
"being some special attribute tags you use when creating `Components` and "
"`Systems`. Let's explore this next."
msgstr ""
"Các dự án Dojo phần lớn giống với các dự án Cairo tiêu chuẩn, với điểm khác "
"biệt là một số tags thuộc tính đặc biệt mà bạn sử dụng khi tạo `Components` "
"và `Systems`. Hãy cùng khám phá điều này ở bước tiếp theo."

#: src/cairo/hello-dojo.md:33
msgid "Open the `src/components.cairo` file to continue."
msgstr "Mở tệp `src/comments.cairo` để tiếp tục."

#: src/cairo/hello-dojo.md:54
msgid ""
"Notice the `#[derive(Component, Copy, Drop, Serde, SerdeLen)]` attributes. "
"For a component to be recognized, we _must_ include `Component`. This "
"signals to the Dojo compiler that this struct should be treated as a "
"component."
msgstr ""
"Lưu ý các thuộc tính `#[derive(Component, Copy, Drop, Serde, SerdeLen)]`. Để "
"một component được nhận dạng, chúng ta _phải_ bao gồm `Component`. Điều này "
"báo hiệu cho trình biên dịch Dojo rằng cấu trúc (struct) này phải được coi "
"là một component."

#: src/cairo/hello-dojo.md:56
msgid ""
"Our `Moves` component houses a `remaining` value in its state. The `#[key]` "
"attribute informs Dojo that this component is indexed by the `player` field. "
"If this is unfamiliar to you, we'll clarify its importance later in the "
"chapter. Essentially, it implies that you can query this component using the "
"`player` field."
msgstr ""
"Component `Moves` của chúng ta chứa giá trị `remaining` ở state của nó. "
"Thuộc tính `#[key]` thông báo cho Dojo rằng thành phần này được lập index "
"bởi field `player`. Nếu điều này xa lạ với bạn, chúng tôi sẽ làm rõ tầm quan "
"trọng của nó ở phần sau của chương này. Về cơ bản, nó ngụ ý rằng bạn có thể "
"truy vấn thành phần này bằng field `player`."

#: src/cairo/hello-dojo.md:58
msgid ""
"In a similar vein, we possess a `Position` component that holds `x` and `y` "
"values. Once again, this component is indexed by the `player` field."
msgstr ""
"Theo cách tương tự, chúng ta sở hữu component `Position` chứa các giá trị "
"`x` và `y`. Một lần nữa, component này được lập index bởi field `player`."

#: src/cairo/hello-dojo.md:60
msgid "Now, let's examine the `src/systems.cairo` file:"
msgstr "Bây giờ, hãy kiểm tra tệp `src/systems.cairo`:"

#: src/cairo/hello-dojo.md:91
msgid "Let us break this down:"
msgstr "Chúng ta hãy chia nhỏ như sau:"

#: src/cairo/hello-dojo.md:97
msgid ""
"Just as we use the `#[derive(Component)]` attribute, the `#[system]` "
"attribute informs the Dojo compiler that this struct is a system, "
"instructing it to compile accordingly."
msgstr ""
"Giống như chúng ta sử dụng thuộc tính `#[derive(Component)]`, thuộc tính "
"`#[system]` thông báo cho trình biên dịch Dojo rằng cấu trúc này là một "
"Systems, điều này sẽ giúp trình biên dịch có thể biên dịch đúng."

#: src/cairo/hello-dojo.md:103
msgid ""
"You'll observe that the system features an `execute` function. It's crucial "
"to note that all Dojo systems necessitate an `execute` function. This "
"function accepts a `Context` as its parameter. The `Context` is a distinct "
"struct that provides information about the world and the caller."
msgstr ""
"Bạn sẽ quan sát thấy system có hàm `execute`. Điều quan trọng cần lưu ý là "
"tất cả các system của Dojo đều cần có chức năng `execute`. Hàm này chấp nhận "
"`Context` làm tham số. `Context` là một cấu trúc riêng biệt cung cấp thông "
"tin về World và caller."

#: src/cairo/hello-dojo.md:105
msgid ""
"It's worth mentioning that a system can contain more than just the `execute` "
"function. You're free to include numerous functions as needed. However, the "
"`execute` function is mandatory since it's invoked when your system is "
"executed."
msgstr ""
"Điều đáng nói là một system có thể chứa nhiều thứ hơn là chỉ chức năng "
"`execute`. Bạn có thể tự do thêm nhiều chức năng nếu cần. Tuy nhiên, hàm "
"`execute` là bắt buộc vì nó được gọi khi system của bạn được thực thi."

#: src/cairo/hello-dojo.md:107
msgid "Now lets look at the next line:"
msgstr "Bây giờ chúng ta hãy nhìn vào dòng tiếp theo:"

#: src/cairo/hello-dojo.md:113
msgid ""
"Here we use `get!` [command](./commands.md) to retrieve the `Position` "
"component for the `ctx.origin` entity. `ctx.origin` is the address of the "
"caller. When called for the first time, it will return:"
msgstr ""
"Ở đây chúng ta sử dụng `get!` [command](./commands.md) để truy xuất "
"component `Position` cho entity `ctx.origin`. `ctx.origin` là địa chỉ của "
"caller. Khi được gọi lần đầu tiên, nó sẽ trả về:"

#: src/cairo/hello-dojo.md:115
msgid ""
"```rust,ignore\n"
"Position {\n"
"  player: 0x0, // zero address\n"
"  x: 0,\n"
"  y: 0\n"
"}\n"
"```"
msgstr ""

#: src/cairo/hello-dojo.md:123
msgid "Now the next line:"
msgstr "Bây giờ là dòng tiếp theo:"

#: src/cairo/hello-dojo.md:138
msgid ""
"Here we use the `set!` [command](./commands.md) to set the `Moves` and "
"`Position` components for the `ctx.origin` entity."
msgstr ""
"Ở đây, chúng ta sử dụng `set!` [command](./commands.md) để thiết lập các "
"components `Moves` và `Position` cho entity `ctx.origin`."

#: src/cairo/hello-dojo.md:140
msgid "We covered a lot here in a short time. Let's recap:"
msgstr ""
"Chúng ta đã đề cập rất nhiều điều ở đây trong một thời gian ngắn. Hãy tóm "
"tắt lại:"

#: src/cairo/hello-dojo.md:142
msgid "Explained the anatomy of a Dojo project"
msgstr "Giải thích cấu trúc của một dự án Dojo"

#: src/cairo/hello-dojo.md:143
msgid ""
"Explained the importace of the `#[derive(Component)]` and `#[system]` "
"attribute"
msgstr ""
"Giải thích tầm quan trọng của thuộc tính `#[derive(Component)]` và "
"`#[system]`"

#: src/cairo/hello-dojo.md:144
msgid "Explained the `execute` function"
msgstr "Giải thích hàm `execute`"

#: src/cairo/hello-dojo.md:145
msgid "Explained the `Context` struct"
msgstr "Giải thích cấu trúc `Context`"

#: src/cairo/hello-dojo.md:146
msgid "Touched on the `get!` and `set!` commands"
msgstr "Đã thử qua lệnh `get!` và `set!`"

#: src/cairo/hello-dojo.md:149
msgid "Run it locally!"
msgstr "Chạy World ở local!"

#: src/cairo/hello-dojo.md:151
msgid ""
"Now that we have some theory out of the way, lets build the Dojo project!"
msgstr ""
"Bây giờ chúng ta đã nắm một số lý thuyết, hãy xây dựng project bằng Dojo!"

#: src/cairo/hello-dojo.md:157
msgid ""
"That compiled the components and system into an artifact that can be "
"deployed! Simple as that!"
msgstr ""
"Điều đó đã biên dịch các thành phần và hệ thống thành một thành phẩm có thể "
"được deploy! Cực kỳ đơn giản!"

#: src/cairo/hello-dojo.md:159
msgid ""
"Now lets deploy it to [Katana](../toolchain/katana/overview.md)! First we "
"need to get Katana running:"
msgstr ""
"Bây giờ hãy deploy tới [Katana](../toolchain/katana/overview.md)! Đầu tiên "
"chúng ta cần chạy Katana:"

#: src/cairo/hello-dojo.md:165
msgid ""
"Success! [Katana](../toolchain/katana/overview.md) should now be running "
"locally on your machine. Now lets deploy!"
msgstr ""
"Thành công! [Katana](../toolchain/katana/overview.md) hiện sẽ chạy local "
"trên máy của bạn. Bây giờ đến bước deploy!"

#: src/cairo/hello-dojo.md:171
msgid ""
"This will deploy the artifact to [Katana](../toolchain/katana/overview.md). "
"You should see terminal output similar to this:"
msgstr ""
"Điều này sẽ deploy thành phẩm tới [Katana](../toolchain/katana/overview.md). "
"Bạn sẽ thấy output của terminal tương tự như thế này:"

#: src/cairo/hello-dojo.md:203
msgid ""
"Your 🌎 is now deployed at "
"`0x71b95a2c000545624c51813444b57dbcdcc153dfc79b6b0e3a9a536168d1e16`!"
msgstr ""
"🌎 của bạn hiện đã được triển khai tại "
"`0x71b95a2c000545624c51813444b57dbcdcc153dfc79b6b0e3a9a536168d1e16`!"

#: src/cairo/hello-dojo.md:205
msgid ""
"Let's discuss the `Scarb.toml` file in the project. This file contains "
"environment variables that make running CLI commands in your project a "
"breeze. (Read more about it [here](./config.md))."
msgstr ""
"Hãy cùng thảo luận về tệp `Scarb.toml` trong dự án. Tệp này chứa các biến "
"môi trường giúp việc chạy các lệnh CLI trong dự án của bạn trở nên dễ dàng. "
"(Đọc thêm về nó [tại đây](./config.md))."

#: src/cairo/hello-dojo.md:207
msgid "Add the world address to the bottom of the file:"
msgstr "Thêm địa chỉ của World vào cuối tệp:"

#: src/cairo/hello-dojo.md:209
msgid ""
"```toml\n"
"world_address = "
"\"0x71b95a2c000545624c51813444b57dbcdcc153dfc79b6b0e3a9a536168d1e16\"\n"
"```"
msgstr ""

#: src/cairo/hello-dojo.md:213
msgid ""
"This establishes the world address for your project. You can then run "
"commands like:"
msgstr ""
"Điều này thiết lập địa chỉ World cho dự án của bạn. Sau đó bạn có thể chạy "
"các lệnh như:"

#: src/cairo/hello-dojo.md:219
msgid ""
"By doing so, you've just activated the spawn system. You now have a local "
"world that you can interact with."
msgstr ""
"Bằng cách đó, bạn vừa kích hoạt system `spawn`. Bây giờ bạn có một world vận "
"hành tại local mà bạn có thể tương tác."

#: src/cairo/hello-dojo.md:221
msgid "Indexing"
msgstr "Hiển thị"

#: src/cairo/hello-dojo.md:223
msgid ""
"With your local world set up, let's delve into indexing. You can index the "
"entire world with this simple command:"
msgstr ""
"Khi local world của bạn đã được thiết lập, hãy đi sâu vào việc lập index. "
"Bạn có thể lập index toàn bộ thế giới bằng lệnh đơn giản này:"

#: src/cairo/hello-dojo.md:229
msgid ""
"Executing the above activates a local torii server using SQLite as its "
"database, which is exposed at `http://0.0.0.0:8080`. It will automatically "
"index your world into tables, allowing you to query them using GraphQL."
msgstr ""
"Việc thực hiện thao tác trên sẽ kích hoạt một máy chủ torii tại local sử "
"dụng SQLite làm database của nó, được hiển thị tại `http://0.0.0.0:8080`. Nó "
"sẽ tự động lập index về thế giới của bạn thành các bảng, cho phép bạn truy "
"vấn chúng bằng GraphQL."

#: src/cairo/hello-dojo.md:231
msgid "We've covered quite a bit! Here's a recap:"
msgstr "Chúng ta đã đề cập khá nhiều! Đây là một bản tóm tắt:"

#: src/cairo/hello-dojo.md:233
msgid "Built a Dojo world"
msgstr "Xây dựng một Dojo World"

#: src/cairo/hello-dojo.md:234
msgid "Deployed the project to Katana"
msgstr "Triển khai dự án tới Katana"

#: src/cairo/hello-dojo.md:235
msgid "Ran the spawn system locally"
msgstr "Chạy system spawn tại local"

#: src/cairo/hello-dojo.md:236
msgid "Indexed the world with Torii"
msgstr "Lập index về World với Torii"

#: src/cairo/hello-dojo.md:238
msgid "Next Steps"
msgstr "Bước tiếp theo"

#: src/cairo/hello-dojo.md:240
msgid ""
"This overview provides a rapid end-to-end glimpse into Dojo. However, the "
"potential of these worlds is vast! Designed to manage hundreds of systems "
"and components, Dojo is equipped for expansive creativity. So, what will you "
"craft next?"
msgstr ""
"Phần tổng quan này cung cấp cái nhìn tổng thể nhanh chóng về Dojo. Tuy "
"nhiên, tiềm năng của những thế giới này là rất lớn! Được thiết kế để quản lý "
"hàng trăm system và component, Dojo được trang bị cho khả năng sáng tạo mở "
"rộng. Vậy tiếp theo bạn sẽ chế tạo thế giới như thế nào?"

#: src/cairo/config.md:3
msgid ""
"Dojo worlds are defined in their Scarb.toml files. This is just a [Scarb]"
"(https://docs.swmansion.com/scarb/) file which is an excellent Cairo package "
"manager and project manager."
msgstr ""
"Thế giới Dojo được xác định trong tệp Scarb.toml của chúng. Đây chỉ là tệp "
"[Scarb](https://docs.swmansion.com/scarb/), một trình quản lý dự án và quản "
"lý gói Cairo."

#: src/cairo/config.md:5
msgid "Full example of a Scarb.toml file:"
msgstr "Ví dụ đầy đủ về tệp Scarb.toml:"

#: src/cairo/config.md:7
msgid ""
"```toml\n"
"[package]\n"
"cairo-version = \"2.1.0-rc4\"\n"
"name = \"dojo_examples\"\n"
"version = \"0.1.0\"\n"
"\n"
"[cairo]\n"
"sierra-replace-ids = true\n"
"\n"
"[dependencies]\n"
"dojo = { git = \"https://github.com/dojoengine/dojo\" }\n"
"\n"
"[[target.dojo]]\n"
"\n"
"[tool.dojo]\n"
"initializer_class_hash = \"0xbeef\"\n"
"\n"
"[tool.dojo.env]\n"
"rpc_url = \"http://localhost:5050/\"\n"
"\n"
"# account address of world deployer\n"
"account_address = "
"\"0x33c627a3e5213790e246a917770ce23d7e562baa5b4d2917c23b1be6d91961c\"\n"
"\n"
"# private key of world deployer\n"
"private_key = "
"\"0x333803103001800039980190300d206608b0070db0012135bd1fb5f6282170b\"\n"
"\n"
"# world contract address\n"
"world_address = "
"\"0x789c94ef39aeebc7f8c4c4633030faefb8bee454e358ae53d06ced36136d7d6\"\n"
"```"
msgstr ""

#: src/cairo/world.md:1
msgid "World Contract"
msgstr "Hợp đồng thế giới"

#: src/cairo/world.md:3
msgid ""
"The world contract functions as a central system kernel, serving as the "
"foundation for initiating and resolving all interactions. Within this "
"kernel, contracts are deployed, registered, and executed, streamlining the "
"process for downstream systems by enabling clients to engage with a single "
"contract rather than potentially hundreds."
msgstr ""
"Hợp đồng thế giới hoạt động như một central system kernel, đóng vai trò là "
"nền tảng để bắt đầu và giải quyết mọi tương tác. Trong kernel này, các "
"contract được deploy, đăng ký và thực thi, hợp lý hóa quy trình cho các hệ "
"thống hạ nguồn bằng cách cho phép clients tham gia vào một contract duy nhất "
"thay vì hàng trăm contract."

#: src/cairo/world.md:5
msgid ""
"Dojo core abstracts this contract away from the developer as a developer you "
"do not write it and it is not meant to be altered when building a world. "
"However, it's important to understand how it works and how it interacts with "
"the rest of the system."
msgstr ""
"Dojo Core rút gọn việc phát triển contract này, với tư cách là nhà phát "
"triển bạn sẽ không viết nó và cũng không có nghĩa là nó nên được thay đổi "
"khi xây dựng một World. Tuy nhiên, điều quan trọng là phải hiểu cách nó hoạt "
"động và cách nó tương tác với phần còn lại của hệ thống."

#: src/cairo/world.md:8
msgid ""
"**To think about:** Consider Autonomous Worlds as sovereign blockchains "
"residing within another blockchain - a nested blockchain, so to speak. Just "
"as you can deploy contracts onto Ethereum to enhance its functionality, you "
"can similarly introduce systems into the World contract to enrich its "
"features. While anyone can contribute to the World, akin to Ethereum, "
"authorization is required to interact with component state. There is a "
"dedicated topic to Authorisation."
msgstr ""
"**Giải thích dễ hiểu:** Hãy coi các Autonomous Worlds như các blockchain có "
"chủ quyền nằm trong một blockchain khác - có thể nói là một blockchain lồng "
"vào nhau. Giống như bạn có thể deploy các hợp đồng trên Ethereum để nâng cao "
"chức năng của nó, bạn cũng có thể đưa các system vào contract World để làm "
"phong phú thêm các tính năng của nó. Mặc dù bất kỳ ai cũng có thể đóng góp "
"cho World, giống như Ethereum, nhưng cần có ủy quyền để tương tác với state "
"của component. Có một chủ đề dành riêng cho Ủy quyền."

#: src/cairo/world.md:11
msgid "Context"
msgstr "Bối cảnh"

#: src/cairo/world.md:13
msgid ""
"You will notice every System accepts a `Context` struct as the first "
"parameter. This is a special struct that contains information about the "
"world and the caller."
msgstr ""
"Bạn sẽ nhận thấy mọi System đều chấp nhận cấu trúc `Context` làm tham số đầu "
"tiên. Đây là một cấu trúc đặc biệt chứa thông tin về world và về caller."

#: src/cairo/world.md:15
msgid ""
"```rust,ignore\n"
"#[derive(Copy, Drop, Serde)]\n"
"struct Context {\n"
"    world: IWorldDispatcher, // Dispatcher to the world contract\n"
"    origin: ContractAddress, // Address of the origin\n"
"    system: felt252, // Name of the calling system\n"
"    system_class_hash: ClassHash, // Class hash of the calling system\n"
"}\n"
"```"
msgstr ""

#: src/cairo/world.md:25
msgid "The `uuid()` command"
msgstr "Lệnh `uuid()`"

#: src/cairo/world.md:27
msgid ""
"It is often useful to generate unique IDs for entities. The `uuid()` fn can "
"be used to generate a unique ID."
msgstr ""
"Việc tạo ID duy nhất cho các entities thường rất hữu ích. hàm `uuid()` có "
"thể được sử dụng để tạo một ID độc nhất."

#: src/cairo/world.md:29 src/cairo/commands.md:20 src/cairo/commands.md:34
#: src/cairo/commands.md:56
msgid "Use it like this:"
msgstr "Sử dụng nó như thế này:"

#: src/cairo/world.md:36
msgid "Full World API"
msgstr ""

#: src/cairo/world.md:38
msgid ""
"The world exposes an interface which can be interacted with by any client."
msgstr "Thế giới có một interface có thể được tương tác bởi bất kỳ client nào."

#: src/cairo/world.md:40
msgid ""
"```rust,ignore\n"
"// World interface\n"
"#[starknet::interface]\n"
"trait IWorld<T> {\n"
"    fn component(self: @T, name: felt252) -> ClassHash;\n"
"    fn register_component(ref self: T, class_hash: ClassHash);\n"
"    fn system(self: @T, name: felt252) -> ClassHash;\n"
"    fn register_system(ref self: T, class_hash: ClassHash);\n"
"    fn uuid(ref self: T) -> usize;\n"
"    fn emit(self: @T, keys: Array<felt252>, values: Span<felt252>);\n"
"    fn execute(ref self: T, system: felt252, calldata: Array<felt252>) -> "
"Span<felt252>;\n"
"    fn entity(\n"
"        self: @T, component: felt252, keys: Span<felt252>, offset: u8, "
"length: usize\n"
"    ) -> Span<felt252>;\n"
"    fn set_entity(\n"
"        ref self: T, component: felt252, keys: Span<felt252>, offset: u8, "
"value: Span<felt252>\n"
"    );\n"
"    fn entities(\n"
"        self: @T, component: felt252, index: felt252, length: usize\n"
"    ) -> (Span<felt252>, Span<Span<felt252>>);\n"
"    fn set_executor(ref self: T, contract_address: ContractAddress);\n"
"    fn executor(self: @T) -> ContractAddress;\n"
"    fn delete_entity(ref self: T, component: felt252, keys: Span<felt252>);\n"
"    fn origin(self: @T) -> ContractAddress;\n"
"\n"
"    fn is_owner(self: @T, account: ContractAddress, target: felt252) -> "
"bool;\n"
"    fn grant_owner(ref self: T, account: ContractAddress, target: felt252);\n"
"    fn revoke_owner(ref self: T, account: ContractAddress, target: "
"felt252);\n"
"\n"
"    fn is_writer(self: @T, component: felt252, system: felt252) -> bool;\n"
"    fn grant_writer(ref self: T, component: felt252, system: felt252);\n"
"    fn revoke_writer(ref self: T, component: felt252, system: felt252);\n"
"}\n"
"```"
msgstr ""

#: src/cairo/components.md:3
msgid "Components = Data"
msgstr "Thành phần = Dữ liệu"

#: src/cairo/components.md:5
msgid ""
"Components serve as the foundation for defining the world's structure, "
"encapsulating state for systems to mutate. "
msgstr ""
"Các thành phần đóng vai trò là nền tảng để xác định cấu trúc của World, đóng "
"gói state để các system có thể biến đổi chúng. "

#: src/cairo/components.md:7
msgid ""
"When designing a world's components, it is crucial to carefully consider the "
"abstractions you create, always keeping composability in mind."
msgstr ""
"Khi thiết kế các components của World, điều quan trọng là phải xem xét cẩn "
"thận những điều trừu tượng mà bạn tạo ra, luôn lưu ý đến khả năng kết hợp "
"của chúng để tận dụng tối đa thiết kế ECS."

#: src/cairo/components.md:10
msgid "Components are Structs"
msgstr "Thành phần (Component) là các Cấu trúc (Struct)"

#: src/cairo/components.md:12
msgid ""
"Components are defined as structs in Cairo. They can contain any number of "
"fields, however it is best practice in ECS to have small isolated "
"components. This promotes modularity and composability, allowing you to "
"reuse components across multiple entity types."
msgstr ""
"Components được định nghĩa là struct ở Cairo. Chúng có thể chứa bất kỳ số "
"lượng fields nào, tuy nhiên cách tốt nhất trong ECS ​​là có các components nhỏ "
"biệt lập. Điều này thúc đẩy tính mô-đun và khả năng kết hợp, cho phép bạn sử "
"dụng lại các thành phần trên nhiều loại thực thể."

#: src/cairo/components.md:23
msgid "The #\\[key\\] attribute"
msgstr "Thuộc tính #\\[key\\]"

#: src/cairo/components.md:25
msgid ""
"The `#[key]` attribute indicates to Dojo that this component is indexed by "
"the `player` field. You need to define a key for each component, as this is "
"how you query the component. However, you can create composite keys by "
"defining multiple fields as keys. "
msgstr ""
"Thuộc tính `#[key]` cho Dojo biết rằng component này được lập index bởi "
"field `player`. Bạn cần xác định key cho từng component vì đây là cách bạn "
"truy vấn component đó. Tuy nhiên, bạn có thể tạo key tổng hợp bằng cách xác "
"định nhiều field làm key. "

#: src/cairo/components.md:38
msgid ""
"In this case you then would set the component with both the player and "
"location fields:"
msgstr ""
"Trong trường hợp này, bạn sẽ thiết lập component với cả field player và "
"field vị trí:"

#: src/cairo/components.md:53
msgid "Implementing Traits"
msgstr "Implementing các Traits"

#: src/cairo/components.md:55
msgid ""
"Components can implement traits. This is useful for defining common "
"functionality across components. For example, you may want to define a "
"`Position` component that implements a `PositionTrait` trait. This trait "
"could define functions such as `is_zero` and `is_equal` which could be used "
"when accessing the component."
msgstr ""
"Components có thể implement các Traits. Điều này rất hữu ích để xác định "
"chức năng chung giữa các thành phần. Ví dụ: bạn có thể muốn xác định "
"component `Position` implement trait `PositionTrait`. Trait này có thể xác "
"định các hàm như `is_zero` và `is_equal` có thể được sử dụng khi truy cập "
"component."

#: src/cairo/components.md:77
msgid "Custom Setting Components"
msgstr "Tùy chỉnh Setting Components"

#: src/cairo/components.md:79
msgid ""
"Suppose we need a place to keep a global value with the flexibility to "
"modify it in the future. Take, for instance, a global combat_cool_down "
"parameter that defines the duration required for an entity to be primed for "
"another attack. To achieve this, we can craft a component dedicated to "
"storing this value, while also allowing for its modification via a "
"decentralized governance model."
msgstr ""
"Giả sử chúng ta cần một nơi để lưu giữ value global với khả năng linh hoạt "
"sửa đổi giá trị đó trong tương lai. Ví dụ: lấy tham số battle_cool_down toàn "
"cầu xác định khoảng thời gian cần thiết để một entity sẵn sàng cho một cuộc "
"tấn công khác. Để đạt được điều này, chúng ta có thể tạo ra một component "
"dành riêng cho việc lưu trữ giá trị này, đồng thời cho phép sửa đổi nó thông "
"qua mô hình quản trị phi tập trung (DAO)."

#: src/cairo/components.md:81
msgid ""
"To establish these components, you'd follow the usual creation method. "
"However, when initializing them, employ a constant identifier, such as "
"GAME_SETTINGS_ID."
msgstr ""
"Để thiết lập các thành phần này, bạn hãy làm theo phương pháp khởi tạo thông "
"thường. Tuy nhiên, khi khởi tạo chúng, hãy sử dụng mã định danh không đổi, "
"chẳng hạn như GAME_SETTINGS_ID."

#: src/cairo/components.md:94
msgid "Types"
msgstr ""

#: src/cairo/components.md:96
msgid "Support Component types:"
msgstr "Các component được hỗ trợ:"

#: src/cairo/components.md:98
msgid "`u8`"
msgstr ""

#: src/cairo/components.md:99
msgid "`u16`"
msgstr ""

#: src/cairo/components.md:100
msgid "`u32`"
msgstr ""

#: src/cairo/components.md:101
msgid "`u64`"
msgstr ""

#: src/cairo/components.md:102
msgid "`u128`"
msgstr ""

#: src/cairo/components.md:103
msgid "`u256`"
msgstr ""

#: src/cairo/components.md:104
msgid "`ContractAddress`"
msgstr ""

#: src/cairo/components.md:106
msgid "It is currently not possible to use Arrays."
msgstr "Hiện tại không thể sử dụng Arrays."

#: src/cairo/components.md:109
msgid "In practice with modularity in mind"
msgstr "Ví dụ thực tế về tính mô-đun"

#: src/cairo/components.md:111
msgid ""
"Consider a tangible analogy: Humans and Goblins. While they possess "
"intrinsic differences, they share common traits, such as having a position "
"and health. However, humans possess an additional component. Furthermore, we "
"introduce a Counter component, a distinct feature that tallies the numbers "
"of humans and goblins."
msgstr ""
"Hãy xem xét một sự ví dụ hữu hình: Con người và Yêu tinh. Mặc dù họ có những "
"khác biệt nội tại nhưng họ có những đặc điểm chung, chẳng hạn như có địa vị "
"và sức khỏe. Tuy nhiên, con người có một thành phần bổ sung. Hơn nữa, chúng "
"tôi còn giới thiệu component Counter, một tính năng riêng biệt giúp kiểm tra "
"số lượng người và yêu tinh."

#: src/cairo/components.md:113
msgid ""
"```rust,ignore\n"
"#[derive(Component, Copy, Drop, Serde, SerdeLen)]\n"
"struct Potions {\n"
"    #[key]\n"
"    entity_id: u32,\n"
"    quantity: u8,\n"
"}\n"
"\n"
"#[derive(Component, Copy, Drop, Serde, SerdeLen)]\n"
"struct Health {\n"
"    #[key]\n"
"    entity_id: u32,\n"
"    health: u8,\n"
"}\n"
"\n"
"#[derive(Component, Copy, Drop, Serde, SerdeLen)]\n"
"struct Position {\n"
"    #[key]\n"
"    entity_id: u32,\n"
"    x: u32,\n"
"    y: u32\n"
"}\n"
"\n"
"// Special counter component\n"
"#[derive(Component, Copy, Drop, Serde, SerdeLen)]\n"
"struct Counter {\n"
"    #[key]\n"
"    counter: u32,\n"
"    goblin_count: u32,\n"
"    human_count: u32,\n"
"}\n"
"```"
msgstr ""

#: src/cairo/components.md:146
msgid ""
"So the Human will have a `Potions`, `Health` and `Position` component, and "
"the Goblin will have a `Health` and `Position` component. By doing we save "
"having to create Health and Position components for each entity type."
msgstr ""
"Vì vậy, Con người sẽ có các component như `Độc dược`, `Sức khỏe` và `Vị "
"trí`, còn Yêu tinh sẽ có component `Sức khỏe` và `Vị trí`. Bằng cách này, "
"chúng ta tiết kiệm được việc phải tạo các component Sức khỏe và Vị trí cho "
"từng loại entity."

#: src/cairo/components.md:148
msgid "So then a system would look like this:"
msgstr "Như vậy, một system sẽ trong như thế này:"

#: src/cairo/components.md:150
msgid ""
"```rust,ignore\n"
"#[system]\n"
"mod spawnHuman {\n"
"    use array::ArrayTrait;\n"
"    use box::BoxTrait;\n"
"    use traits::Into;\n"
"    use dojo::world::Context;\n"
"\n"
"    use dojo_examples::components::Position;\n"
"    use dojo_examples::components::Health;\n"
"    use dojo_examples::components::Potions;\n"
"    use dojo_examples::components::Counter;\n"
"\n"
"    // we can set the counter value as a const, then query it easily! This "
"pattern is useful for settins.\n"
"    const COUNTER_ID: u32 = 9999999999999;\n"
"\n"
"    fn execute(ctx: Context, entity_id: u32) {\n"
"\n"
"        let counter = get!(ctx.world, COUNTER_ID, (Counter));\n"
"\n"
"        let human_count = counter.human_count + 1;\n"
"        let goblin_count = counter.goblin_count + 1;\n"
"\n"
"        // spawn a human\n"
"        set!(\n"
"            ctx.world,\n"
"            (\n"
"                Health {\n"
"                    entity_id: human_count, health: 100\n"
"                    }, \n"
"                Position {\n"
"                    entity_id: human_count, x: position.x + 10, y: position."
"y + 10,\n"
"                    }, \n"
"                Potions {\n"
"                    entity_id: human_count, quantity: 10\n"
"                    \n"
"                },\n"
"            )\n"
"        );\n"
"\n"
"        // spawn a goblin\n"
"        set!(\n"
"            ctx.world,\n"
"            (\n"
"                Health {\n"
"                    entity_id: goblin_count, health: 100\n"
"                    }, \n"
"                Position {\n"
"                    entity_id: goblin_count, x: position.x + 10, y: position."
"y + 10,\n"
"                    },\n"
"            )\n"
"        );\n"
"\n"
"        // increment the counter\n"
"        set!(\n"
"            ctx.world,\n"
"            (\n"
"                Counter {\n"
"                    counter: COUNTER_ID, human_count: human_count, "
"goblin_count: goblin_count\n"
"                },\n"
"            )\n"
"        );\n"
"        \n"
"        return ();\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/cairo/components.md:218
msgid ""
"A complete example can be found in the [Dojo Starter](https://github.com/"
"dojoengine/dojo-starter)"
msgstr ""
"Một ví dụ hoàn chỉnh có thể tìm thấy tại: [Dojo Starter](https://github.com/"
"dojoengine/dojo-starter)"

#: src/cairo/systems.md:3
msgid "Systems = Logic"
msgstr ""

#: src/cairo/systems.md:5
msgid ""
"Systems underpin the logic of your world. While systems are inherently "
"stateless, their primary role is to modify the state of components. Every "
"system features an 'execute' function that's called upon during interactions "
"within the world."
msgstr ""
"Các Systems củng cố logic cho World của bạn. Mặc dù các systems vốn không có "
"state nhưng vai trò chính của chúng là sửa đổi state của các component. Mọi "
"system đều có hàm 'execute' bắt buộc có trong quá trình tương tác với World."

#: src/cairo/systems.md:7
msgid ""
"Let's look at the simplest possible system which mutates the state of the "
"`Moves` component."
msgstr ""
"Chúng ta hãy xem system đơn giản nhất có thể làm thay đổi state của "
"component `Moves`."

#: src/cairo/systems.md:31
msgid "The Execute function"
msgstr "Hàm Execute"

#: src/cairo/systems.md:33
msgid ""
"The `execute` function is mandatory in a system and runs when called, taking "
"`Context` as its first parameter. See more in [Context](./world.md)."
msgstr ""
"Hàm `execute` là bắt buộc trong các system và sẽ chạy khi được call, lấy "
"`Context` làm tham số đầu tiên. Xem thêm trong [Context](./world.md)."

#: src/cairo/systems.md:35
msgid "Other functions in a System"
msgstr "Các hàm khác trong System"

#: src/cairo/systems.md:37
msgid ""
"You are free to add other functions to your system, but they will not be "
"callable from the world. This is useful for breaking up your logic into "
"smaller chunks."
msgstr ""
"Bạn được tự do thêm các hàm khác vào system của mình, nhưng chúng sẽ không "
"thể được call được từ World. Điều này rất hữu ích nhằm giúp chia logic của "
"bạn thành các phần nhỏ hơn."

#: src/cairo/systems.md:39
msgid "Using View Functions"
msgstr "Sử dụng các hàm View"

#: src/cairo/systems.md:41
msgid ""
"There are times when we need to compute the value of a component "
"dynamically, rather than fetching its static state. For instance, in the "
"context of a VRGDA, if you want to ascertain the current price, merely "
"querying the component state won't suffice. Instead, you'd need to compute "
"the price based on certain parameters and the current state."
msgstr ""
"Đôi khi chúng ta cần tính toán giá trị của một component một cách linh hoạt "
"thay vì fetch static state của nó. Ví dụ: trong VRGDA, nếu bạn muốn xác định "
"giá hiện tại, chỉ truy vấn state của component sẽ không đủ. Thay vào đó, bạn "
"cần tính giá dựa trên các thông số nhất định và state ở hiện tại."

#: src/cairo/systems.md:43
msgid "This is where view functions come into play."
msgstr "Đây là nơi các hàm View phát huy tác dụng."

#: src/cairo/systems.md:45
msgid "**What are View Functions?**"
msgstr "**Hàm View là gì?**"

#: src/cairo/systems.md:47
msgid ""
"View functions are a way to derive or compute values from the existing state "
"of a component. They are invoked by the world and receive the current state "
"of the component as an argument. Subsequently, these functions return a "
"computed value based on this state."
msgstr ""
"Các hàm View được sử dụng để lấy hoặc tính toán các giá trị từ state ở thời "
"điểm call của một component. Chúng có thể được invoke bởi world và nhận "
"state của component làm đối số. Sau đó, các hàm này trả về giá trị được tính "
"toán dựa trên state này."

#: src/cairo/systems.md:49
msgid "**Example from VRGDA**:"
msgstr "**Ví dụ từ VRGDA**:"

#: src/cairo/systems.md:51
msgid ""
"The below snippet, taken from the VRGDA example available on [this link]"
"(https://github.com/dojoengine/dojo-examples), illustrates how to implement "
"a view function:"
msgstr ""
"Đoạn mã bên dưới, được lấy từ ví dụ VRGDA tại [liên kết này](https://github."
"com/dojoengine/dojo-examples), minh họa cách triển khai hàm view:"

#: src/cairo/systems.md:53
msgid ""
"```rust,ignore\n"
"#[system]\n"
"mod view_price {\n"
"    //... other code ...\n"
"\n"
"    fn execute(ctx: Context, game_id: u64, item_id: u128, amount: u128) -> "
"Fixed {\n"
"        let mut auction = get!(ctx.world, (game_id, item_id), Auction);\n"
"\n"
"        // Convert auction to VRGDA\n"
"        let VRGDA = auction.to_LogisticVRGDA();\n"
"\n"
"        // Calculate time since the auction began\n"
"        let time_since_start: u128 = get_block_timestamp().into() - auction."
"start_time.into();\n"
"\n"
"        // Compute the current price\n"
"        VRGDA.get_vrgda_price(\n"
"            FixedTrait::new(time_since_start, false), // Time elapsed since "
"auction start\n"
"            FixedTrait::new(auction.sold, false)      // Quantity sold\n"
"        )\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/cairo/systems.md:76
msgid ""
"In this example, the function computes and returns the current price of the "
"VRGDA based on the ongoing state of the auction."
msgstr ""
"Trong ví dụ này, hàm tính toán và trả về state của VRGDA dựa trên state của "
"cuộc đấu giá đang diễn ra."

#: src/cairo/systems.md:78
msgid "**How to Invoke View Functions?**"
msgstr "**Làm cách nào để gọi các hàm View?**"

#: src/cairo/systems.md:80
msgid ""
"**Using Dojo Core**: If you are working within the [Dojo Core](../client/npm/"
"core.md), utilize the `call` function. "
msgstr ""
"**Sử dụng Dojo Core**: Nếu bạn đang làm việc với [Dojo Core](../client/npm/"
"core.md), hãy sử dụng hàm `call`. "

#: src/cairo/systems.md:82
msgid ""
"**For Rust Users**: The [Starkli](https://book.starkli.rs/) library provides "
"a handy method to invoke view functions in Rust."
msgstr ""
"**Dành cho người dùng Rust**: Thư viện [Starkli](https://book.starkli.rs/) "
"cung cấp một phương thức tiện dụng để invoke (gọi) các hàm View trong Rust."

#: src/cairo/systems.md:84
msgid ""
"I hope this revised version enhances the clarity and flow of the information "
"you want to convey!"
msgstr ""
"Tôi hy vọng phiên bản sửa đổi này sẽ giúp tăng tính rõ ràng và cải thiện "
"flow của thông tin mà bạn muốn truyền tải!"

#: src/cairo/systems.md:86
msgid "System Authentication"
msgstr ""

#: src/cairo/systems.md:88
msgid ""
"Systems must be given permission to write to components. By default they "
"have no permissions. With `sozo` we can however give them permissions to "
"write to components."
msgstr ""
"Systems phải được cấp quyền ghi vào các components. Theo mặc định system sẽ "
"không có quyền ghi. Tuy nhiên, với `sozo`, chúng ta có thể cấp cho system "
"quyền ghi vào các component."

#: src/cairo/systems.md:94
msgid ""
"Here we have authorised the `Spawn` system to write to the `Moves` "
"component. "
msgstr ""
"Ở đây chúng ta đã ủy quyền cho system `Spawn` để có thể ghi dữ liệu vào "
"component `Moves`. "

#: src/cairo/systems.md:96
msgid "Read more in the [sozo](../toolchain/sozo/overview.md) docs."
msgstr "Đọc thêm trong tài lieu của [sozo](../toolchain/sozo/overview.md)."

#: src/cairo/entities.md:3
msgid ""
"Entities are the primary key value within the world, to which components can "
"be attached."
msgstr ""
"Các Entities là primary key value bên trong thế giới mà các components có "
"thể được gắn vào."

#: src/cairo/entities.md:5
msgid ""
"Different ECS systems handle entities in various ways. In Dojo, entities are "
"treated as a primary key value within the world, to which components can be "
"attached. To illustrate this concept, consider a simple example of a "
"character in a game that has a `Moves` and a `Position` component."
msgstr ""
"Các hệ thống ECS ​​khác nhau xử lý các entities theo nhiều cách khác nhau. "
"Trong Dojo, các entities được coi là primary key value trong thế giới mà các "
"components có thể được gắn vào. Để minh họa khái niệm này, hãy xem xét một "
"ví dụ đơn giản về một nhân vật trong trò chơi có component `Di chuyển` và "
"`Vị trí`."

#: src/cairo/entities.md:7
msgid ""
"When defining the components for this entity, it is important to note that "
"we do not reference the entity directly. Instead, we simply provide two "
"structs that the entity will contain. "
msgstr ""
"Trong quá trình define các components cho entity này, điều quan trọng cần "
"phải lưu ý đó là chúng ta không tham chiếu trực tiếp đến entity đó. Thay vào "
"đó, chúng ta chỉ cung cấp hai cấu trúc (struct) mà entity sẽ chứa. "

#: src/cairo/entities.md:26
msgid ""
"Now, let's create a `Spawn` for the character. It is important to note that "
"we have not explicitly defined an Entity anywhere. Instead, we use the `ctx."
"origin` to reference the current entity."
msgstr ""
"Bây giờ, hãy tạo một system `Spawn` cho nhân vật. Điều quan trọng cần lưu ý "
"là chúng ta chưa define rõ ràng một Entity ở bất kỳ đâu. Thay vào đó, chúng "
"ta sử dụng `ctx.origin` để tham chiếu state hiện tại."

#: src/cairo/entities.md:28
msgid ""
"In this example we are using the `ctx.origin` to reference the current "
"entity."
msgstr ""
"Trong ví dụ này, chúng ta đang sử dụng `ctx.origin` để tham chiếu entity "
"hiện tại."

#: src/cairo/entities.md:58
msgid ""
"ECS Theory: Plenty has been written on ECS systems, to go deeper read [ECS-"
"FAQ](https://github.com/SanderMertens/ecs-faq)"
msgstr ""
"Lý thuyết ECS: Có rất nhiều bài viết về kiến trúc ECS, để tìm hiểu sâu hơn "
"hãy đọc [ECS-FAQ](https://github.com/SanderMertens/ecs-faq)"

#: src/cairo/authorization.md:3
msgid ""
"Authorization is crucial to a world, just like how authorization is crucial "
"to any smart contract."
msgstr ""
"Việc xác minh quyền truy cập rất quan trọng đối với world, giống như việc "
"xác minh quyền truy cập quan trọng đối với bất kỳ smart contract nào."

#: src/cairo/authorization.md:5
msgid ""
"As discussed in the [World](./world.md) chapter, Autonomous Worlds (AWs) "
"function as sovereign chains nested within a public blockchain. These Worlds "
"are also open to the public. This structure allows anyone to enhance a World "
"by deploying components or systems. However, this openness also introduces "
"security considerations. Similar to Ethereum, interacting with a component's "
"state within a System requires the appropriate authorization from the "
"component owner."
msgstr ""
"Như đã thảo luận trong chương [World](./world.md), Autonomous Worlds (AWs) "
"vận hành như các chain có chủ quyền được lồng trong một blockchain công "
"khai. Những Worlds này có thể được truy cập bởi bất cứ ai. Cấu trúc này cho "
"phép mọi người nâng cấp Worlds bằng cách triển khai các components hoặc "
"systems. Tuy nhiên, sự cởi mở này cũng đưa đến những vấn đề cần phải cân "
"nhắc về an ninh. Tương tự như Ethereum, việc tương tác với state của một "
"component trong System cần có sự cho phép phù hợp từ chủ sở hữu component."

#: src/cairo/authorization.md:7
msgid "Auth Architecture"
msgstr ""

#: src/cairo/authorization.md:9
msgid ""
"Every time a `set!` is called in a `System`, the world checks if the "
"`System` has authorization to update the component state. Only when the "
"`System` possesses the necessary authorization, the `set!` is executed. The "
"following diagram illustrates the authorization architecture."
msgstr ""
"Mỗi khi `set!` được gọi trong `System`, world sẽ kiểm tra xem `System` có "
"quyền cập nhật state của component hay không. Chỉ khi `System` có được quyền "
"truy cập, `set!` mới được thực thi. Sơ đồ sau minh họa authorization "
"architecture."

#: src/cairo/authorization.md:11
msgid "![Authorization Architecture](../images/dojo-auth.png)"
msgstr ""

#: src/cairo/authorization.md:13
msgid "Providing Authorization"
msgstr "Sự Phân Quyền"

#: src/cairo/authorization.md:15
msgid ""
"The deployer of the Component is its initial owner. A Component owner is "
"able to grant the `owner` and `writer` roles. Only owners can grant a System "
"the `writer` role which allows it to update the Component."
msgstr ""
"Người deploy Component là chủ sở hữu ban đầu của nó. Chủ sở hữu Component có "
"thể cấp role `owner` và `writer` cho bất cứ ai họ muốn. Chỉ chủ sở hữu mới "
"có thể cấp quyền cho System role `writer` để cho phép System cập nhật "
"Component."

#: src/cairo/authorization.md:17
msgid "`sozo` offers a convenient tool to authorize systems."
msgstr ""
"`sozo` cung cấp một công cụ giúp thuận tiện việc ủy quyền cho các systems."

#: src/cairo/authorization.md:23
msgid ""
"This command will generate a `writer` authorization for the `spawn` system "
"to update the `Moves` component."
msgstr ""
"Lệnh này sẽ tạo ra quyền `writer` cho system `spawn` để cập nhật component "
"`Moves`."

#: src/cairo/commands.md:3
msgid ""
"Understanding commands is key to understanding Dojo. You will leverage them "
"heavily within the systems you design."
msgstr ""
"Việc hiểu rõ các commands là chìa khóa mấu chốt để hiểu được Dojo Engine. "
"Bạn có thể tận dụng chúng rất nhiều trong các system mà bạn thiết kế."

#: src/cairo/commands.md:5
msgid ""
"Commands in Dojo are generalized functions that are expanded at compile time "
"to facilitate system execution. They provide a convenient way for systems to "
"interact with the world state by abstracting common operations, such as "
"retrieving or updating components, and generating unique IDs. By leveraging "
"these commands, developers can streamline their system implementations and "
"improve code readability."
msgstr ""
"Các commands trong Dojo là các hàm tổng quát được mở rộng tại thời điểm "
"compile để hỗ trợ việc thực thi system. Chúng giúp đơn giản hoá cách mà các "
"system tương tác với state của world bằng cách trừu tượng hóa các hoạt động "
"chung, chẳng hạn như truy xuất hoặc cập nhật (update) các component hay tạo "
"ID độc nhất. Bằng cách tận dụng các commands này, nhà phát triển có thể hợp "
"lý hóa việc triển khai hệ thống của họ và cải thiện khả năng đọc mã."

#: src/cairo/commands.md:8
msgid "Using commands"
msgstr "Các sử dụng các commands"

#: src/cairo/commands.md:10
msgid ""
"Commands are used within systems to interact with the world state. They are "
"called using the following syntax:"
msgstr ""
"Các commands được sử dụng trong các system để tương tác với state của world. "
"Chúng có thể được gọi bằng cú pháp như sau:"

#: src/cairo/commands.md:16
msgid "The `get!` command"
msgstr "Command `get!`"

#: src/cairo/commands.md:18
msgid "The `get!` command is used to retrieve components from the world state."
msgstr ""
"Command `get!` được sử dụng để truy xuất các component từ state của world."

#: src/cairo/commands.md:26
msgid ""
"Here we are retrieving the `Position` and `Moves` components from the world "
"state. We are also using the `ctx.origin` to retrieve the components for the "
"current entity."
msgstr ""
"Ở đây chúng ta đang truy xuất các component `Position` và `Moves` từ state "
"của world. Chúng ta cũng đang sử dụng `ctx.origin` để truy xuất các "
"component cho entity."

#: src/cairo/commands.md:28
msgid ""
"You can then use `position` and `moves` as you would as any other Cairo "
"struct."
msgstr ""
"Sau đó, bạn có thể sử dụng `position` và `moves` như bất kỳ Cairo struct nào "
"khác."

#: src/cairo/commands.md:30
msgid "The `set!` command"
msgstr "Command `set!`"

#: src/cairo/commands.md:32
msgid "The `set!` command is used to update components state."
msgstr "Command `set!` được sử dụng để cập nhật state của component."

#: src/cairo/commands.md:36
msgid ""
"```rust,ignore\n"
"set !(ctx.world, (\n"
"    Moves {\n"
"        player: ctx.origin, remaining: 10\n"
"    }, \n"
"    Position {\n"
"        player: ctx.origin, x: position.x + 10, y: position.y + 10\n"
"    },\n"
"));\n"
"\n"
"// If the structs are already defined it can also be written as:\n"
"set!(ctx.world, (moves, position));\n"
"```"
msgstr ""

#: src/cairo/commands.md:50
msgid ""
"Here we are updating the `Moves` and `Position` components in the world "
"state using the `ctx.origin` as the entity id."
msgstr ""
"Ở đây chúng ta đang update các component `Moves` và `Position` ở state của "
"world bằng cách sử dụng `ctx.origin` làm entity id."

#: src/cairo/commands.md:52
msgid "The `emit!` command"
msgstr "Command `emit!`"

#: src/cairo/commands.md:54
msgid "The `emit!` command is used to emit custom events."
msgstr "Lệnh `emit!` được sử dụng để emit các custom events."

#: src/cairo/events.md:3
msgid ""
"Events play a pivotal role in decoding the dynamics of a Dojo world. Every "
"time there's an update to a `Component`, the `World` contract emits these "
"events. What's even more exciting is that you can craft your own custom "
"events to fit specific needs! Moreover, thanks to [Torii](../toolchain/torii/"
"overview.md), all these events are seamlessly indexed, ensuring easy and "
"efficient querying."
msgstr ""
"Các event đóng một vai trò quan trọng trong việc decode sự linh động của "
"world. Mỗi khi có bản cập nhật mới cho một `Component`, contract `World` sẽ "
"emits những event này. Điều thú vị hơn nữa là bạn có thể tạo các event tùy "
"chỉnh của riêng mình để phù hợp với nhu cầu cụ thể! Hơn nữa, nhờ [Torii](../"
"toolchain/torii/overview.md), tất cả các sự kiện này đều được index một cách "
"liền mạch, đảm bảo truy vấn dễ dàng và hiệu quả."

#: src/cairo/events.md:6
msgid "Component Events"
msgstr ""

#: src/cairo/events.md:8
msgid "Consider this example of a `Moves` component:"
msgstr "Hãy xem xét ví dụ này về component `Moves`:"

#: src/cairo/events.md:19
msgid ""
"When this component is updated, the `World` contract will emit an event with "
"the following structure:"
msgstr ""
"Khi component này được cập nhật, contract `World` sẽ emit một event có cấu "
"trúc như sau:"

#: src/cairo/events.md:21
msgid ""
"```rust,ignore\n"
"#[derive(Drop, starknet::Event)]\n"
"struct StoreSetRecord {\n"
"    table: felt252, // Moves\n"
"    keys: Span<felt252>, // [player]\n"
"    offset: u8, // 0\n"
"    value: Span<felt252>, // [remaining]\n"
"}\n"
"```"
msgstr ""

#: src/cairo/events.md:31
msgid ""
"This will then be captured by [Torii](../toolchain/torii/overview.md) and "
"indexed for querying. This will allow you to then reconstruct the state of "
"your world."
msgstr ""
"Sau đó, thông tin này sẽ được [Torii](../toolchain/torii/overview.md) ghi "
"lại và lập index để truy vấn. Điều này sẽ cho phép bạn xây dựng lại state "
"của World của bạn."

#: src/cairo/events.md:33
msgid ""
"Similarly, when a component is deleted, the `World` contract will emit an "
"event with the following structure:"
msgstr ""
"Tương tự, khi một component bị xóa, contract `World` sẽ emit một event có "
"cấu trúc sau:"

#: src/cairo/events.md:43
msgid "World Events"
msgstr ""

#: src/cairo/events.md:45
msgid ""
"The `World` contract also emits events when it's initialized and when new "
"components and systems are registered. These events are emitted with the "
"following structures:"
msgstr ""
"Contract `World` cũng emit các event khi nó được khởi tạo và khi các "
"components và systems mới được đăng ký. Những event này được emit với các "
"cấu trúc sau:"

#: src/cairo/events.md:71
msgid ""
"These events are also captured by [Torii](../toolchain/torii/overview.md) "
"and indexed for querying."
msgstr ""
"Những event này cũng được [Torii](../toolchain/torii/overview.md) ghi lại và "
"lập index để truy vấn."

#: src/cairo/events.md:74
msgid "Custom Events"
msgstr "Các sự kiện được tuỳ chỉnh"

#: src/cairo/events.md:76
msgid ""
"Within your systems, emitting custom events can be highly beneficial. "
"Fortunately, there's a handy `emit!` macro that lets you release events "
"directly from your world. Use it like so:"
msgstr ""

#: src/cairo/events.md:82
msgid ""
"Include this in your system and it will emit an event with the following "
"structure:"
msgstr ""
"Đưa cái này vào hệ thống của bạn và nó sẽ thực hiện một sự kiện có cấu trúc "
"sau:"

#: src/cairo/events.md:92
msgid "Now a full example using a custom event: "
msgstr "Bây giờ, một ví dụ hoàn chỉnh về việc sử dụng một sự kiện tuỳ chỉnh: "

#: src/cairo/events.md:107
msgid ""
"Note: Read about the `get!` and `set!` macros in [Commands](./commands.md)."
msgstr "Lưu ý: Đọc về macro `get!` và `set!` trong [Commands](./commands.md)."

#: src/cairo/testing.md:3
msgid ""
"Testing is a crucial part of any software development process. Dojo provides "
"a testing framework that allows you to write tests for your smart contracts. "
"Since Dojo uses a custom compiler, you need to use `sozo` to test your "
"contracts."
msgstr ""
"Testing là một phần quan trong trong bất kỳ quá trình phát triển phần mềm "
"nào. Dojo cung cấp testing framework cho phép bạn viết testes cho smart "
"contract của mình. Vì Dojo sử dụng compiler tùy chỉnh nên bạn cần sử dụng "
"`sozo` để test contract của mình."

#: src/cairo/testing.md:5
msgid "From your project directory, simply:"
msgstr "Từ thư mục dự án của bạn, chỉ cần nhập command như sau:"

#: src/cairo/testing.md:11
msgid "This will search for all tests within your project and run them."
msgstr ""
"Dòng lệnh này sẽ tìm kiếm tất cả các test đang có trong dự án của bạn và "
"chạy chúng."

#: src/cairo/testing.md:14
msgid "Writing Unit Tests"
msgstr "Viết Unit Tests"

#: src/cairo/testing.md:16
msgid ""
"It is best practise to include unit tests in the same file as the Component/"
"System you are writing."
msgstr ""
"Cách tốt nhất là đưa các unit tests vào cùng một tệp với Component/System mà "
"bạn đang viết."

#: src/cairo/testing.md:18
msgid ""
"Lets show a `Component` test example from the [dojo-starter](https://github."
"com/dojoengine/dojo-starter):"
msgstr ""
"Bên dưới là một ví dụ về cách viết test `Component` từ [dojo-starter]"
"(https://github.com/dojoengine/dojo-starter):"

#: src/cairo/testing.md:20
msgid "`components.cairo`"
msgstr ""

#: src/cairo/testing.md:49
msgid ""
"In this test we are testing the `is_zero` and `is_equal` functions of the "
"`Position` component. It is good practise to test all functions of your "
"components."
msgstr ""
"Ở ví dụ bên trên, chúng ta đang test các hàm `is_zero` và `is_equal` của "
"component `Position`. Đây là một ví dụ rất đúng về cách test tất cả các hàm "
"của các components của bạn."

#: src/cairo/testing.md:52
msgid "Writing Integration Tests"
msgstr "Viết Test Kiểm Tra Quá Trình Integration (Tích Hợp)"

#: src/cairo/testing.md:54
msgid ""
"Integration tests are e2e tests that test the entire system. You can write "
"integration tests for your world by creating a `tests` directory in your "
"project root. Then create a file for each integration test you want to write."
msgstr ""
"Integration tests là các test e2e kiểm tra toàn bộ system. Bạn có thể viết "
"các bài integration test cho world của mình bằng cách tạo thư mục `tests` "
"trong thư mục gốc của dự án. Sau đó tạo một tệp cho mỗi bài integration test "
"mà bạn muốn viết."

#: src/cairo/testing.md:56
msgid ""
"This is the example from the [dojo-starter](https://github.com/dojoengine/"
"dojo-starter):"
msgstr ""
"Đây là ví dụ từ [dojo-starter](https://github.com/dojoengine/dojo-starter):"

#: src/cairo/testing.md:58
msgid "`systems.cairo`"
msgstr ""

#: src/cairo/testing.md:59
msgid ""
"```rust,ignore\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use core::traits::Into;\n"
"    use array::ArrayTrait;\n"
"\n"
"    use dojo::world::IWorldDispatcherTrait;\n"
"\n"
"    use dojo::test_utils::spawn_test_world;\n"
"\n"
"    use dojo_examples::components::position;\n"
"    use dojo_examples::components::Position;\n"
"    use dojo_examples::components::moves;\n"
"    use dojo_examples::components::Moves;\n"
"    use dojo_examples::systems::spawn;\n"
"    use dojo_examples::systems::move;\n"
"\n"
"    #[test]\n"
"    #[available_gas(30000000)]\n"
"    fn test_move() {\n"
"        let caller = starknet::contract_address_const::<0x0>();\n"
"\n"
"        // components\n"
"        let mut components = array::ArrayTrait::new();\n"
"        components.append(position::TEST_CLASS_HASH);\n"
"        components.append(moves::TEST_CLASS_HASH);\n"
"\n"
"        // systems\n"
"        let mut systems = array::ArrayTrait::new();\n"
"        systems.append(spawn::TEST_CLASS_HASH);\n"
"        systems.append(move::TEST_CLASS_HASH);\n"
"\n"
"        // deploy executor, world and register components/systems\n"
"        let world = spawn_test_world(components, systems);\n"
"\n"
"        let spawn_call_data = array::ArrayTrait::new();\n"
"        world.execute('spawn', spawn_call_data);\n"
"\n"
"        let mut move_calldata = array::ArrayTrait::new();\n"
"        move_calldata.append(move::Direction::Right(()).into());\n"
"        world.execute('move', move_calldata);\n"
"        let mut keys = array::ArrayTrait::new();\n"
"        keys.append(caller.into());\n"
"\n"
"        let moves = world.entity('Moves', keys.span(), 0, dojo::SerdeLen::"
"<Moves>::len());\n"
"        assert(*moves[0] == 9, 'moves is wrong');\n"
"        let new_position = world\n"
"            .entity('Position', keys.span(), 0, dojo::SerdeLen::<Position>::"
"len());\n"
"        assert(*new_position[0] == 11, 'position x is wrong');\n"
"        assert(*new_position[1] == 10, 'position y is wrong');\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/cairo/testing.md:113
msgid "Useful Dojo Test Functions"
msgstr "Các Hàm Dojo Test Hữu Ích"

#: src/cairo/testing.md:115
msgid ""
"`spawn_test_world(components, systems)` - This function will create a test "
"world with the components and systems you pass in. It will also deploy the "
"world and register the components and systems."
msgstr ""
"`spawn_test_world(components, systems)` - Hàm này sẽ tạo ra một test world "
"với các components và systems mà bạn truyền vào. Nó cũng sẽ deploy Worlds và "
"đăng ký các components cũng như hệ thống."

#: src/cairo/modules.md:3
msgid ""
"With standardization of Systems and Components we can create a module "
"architecture for Dojo. This allows us to create reusable modules that can be "
"used in any Dojo world."
msgstr ""
"Với việc tiêu chuẩn hóa Systems và Components, chúng ta có thể tạo kiến ​​trúc "
"mô-đun cho Dojo. Điều này cho phép chúng ta tạo các mô-đun có thể tái sử "
"dụng và có thể sử dụng trong bất kỳ World nào."

#: src/cairo/modules.md:5
msgid "Module Architecture"
msgstr "Kiến trúc mô-đun (Module Architecture)"

#: src/cairo/modules.md:7
msgid ""
"Think of modules as ERCs for Dojo. They are a standard way to create and "
"share functionality. Modules are a collection of Systems and Components that "
"can be imported into a Dojo world. Dojo is following the ERC patterns and "
"has modules already defined for ERC20, ERC721, and ERC1155."
msgstr ""
"Hãy coi các mô-đun như chuẩn ERC dành cho Dojo. Chúng là một phương thức "
"tiêu chuẩn để tạo và chia sẻ các chức năng. Mô-đun là tập hợp các Systems và "
"Components có thể được import vào Worlds. Dojo đang tuân theo các mẫu ERC và "
"có các mô-đun đã được xác định cho ERC20, ERC721 và ERC1155."

#: src/cairo/modules/erc20.md:3
msgid ""
"Dojo's ERC20 module is a standard implementation of the ERC20 token "
"standard, but it utilizes Dojo Systems and Components. This allows us to "
"leverage the excellent properties of the ERC20 standard and use it natively "
"within the Dojo environment."
msgstr ""
"Mô-đun ERC20 của Dojo là một implementation tiêu chuẩn của chuẩn token "
"ERC20, nhưng nó sử dụng các Systems và Components của Dojo. Điều này cho "
"phép chúng ta tận dụng các đặc tính tuyệt vời của chuẩn ERC20 và sử dụng nó "
"một cách nguyên bản trong môi trường của Dojo."

#: src/cairo/modules/erc20.md:5
msgid "Integration into Your World"
msgstr "Tích hợp vào World của bạn"

#: src/cairo/modules/erc20.md:7
msgid ""
"To integrate the ERC20 module into your world, you must first deploy the "
"ERC20 Dojo contract. Subsequently, install the systems and components into "
"your world."
msgstr ""
"Để tích hợp mô-đun ERC20 vào World của bạn, trước tiên bạn phải deploy "
"contract ERC20 Dojo. Sau đó, cài đặt các systems và components vào World của "
"bạn."

#: src/client/overview.md:3
msgid ""
"Dojo is BYO client, meaning that you can use any client you want to connect "
"to the Dojo network."
msgstr ""
"Dojo là BYO client, nghĩa là bạn có thể sử dụng bất kỳ client nào bạn muốn "
"để kết nối với mạng Dojo."

#: src/client/overview.md:5
msgid "Reference clients are available for the following platforms:"
msgstr "Thông tin tham khảo về các clients có trên các nền tảng sau:"

#: src/client/overview.md:7
msgid "[npm](./npm.md)"
msgstr ""

#: src/client/npm.md:1
msgid "Javascript Libraries"
msgstr "Các thư viện JavaScript"

#: src/client/npm.md:3
msgid ""
"Javascript is a great way to get started with Dojo. It's easy to use, and "
"you can get started in minutes."
msgstr ""
"JavaScript là một cách tuyệt vời để bắt đầu với Dojo. Nó đơn giản, dễ sử "
"dụng và bạn có thể bắt đầu chỉ trong vài phút."

#: src/client/npm.md:5
msgid "Examples using these:"
msgstr "Các ví dụ về việc sử dụng chúng:"

#: src/client/npm.md:7
msgid ""
"[Dojo-create-react-app](https://github.com/dojoengine/dojo-starter-react-app)"
msgstr ""

#: src/client/npm.md:8
msgid ""
"[Dojo-starter-phaser](https://github.com/dojoengine/dojo-starter-phaser)"
msgstr ""

#: src/client/npm.md:10 src/client/npm/core.md:1
msgid "@dojoengine/core"
msgstr ""

#: src/client/npm.md:12
msgid ""
"This is the lowest level library, and is used by all other downstream "
"libraries. It contains the core functionality of Dojo and exposes the "
"contract interfaces. Use it if you want to build your own library on top of "
"Dojo."
msgstr ""
"Đây là thư viện cấp thấp nhất và được sử dụng bởi tất cả các thư viện cấp "
"dưới khác. Nó chứa chức năng cốt lõi của Dojo và hiển thị các giao diện của "
"hợp đồng. Hãy sử dụng nó nếu bạn muốn xây dựng thư viện của riêng mình trên "
"Dojo."

#: src/client/npm.md:14
msgid "[Documentation](./npm/core.md)"
msgstr ""

#: src/client/npm.md:20
msgid "@dojoengine/react"
msgstr ""

#: src/client/npm.md:22
msgid ""
"This is a direct fork of [Mud React](https://github.com/latticexyz/mud/tree/"
"main/packages)"
msgstr ""
"Đây là bản fork trực tiếp của [Mud React](https://github.com/latticexyz/mud/"
"tree/main/packages)"

#: src/client/npm.md:24
msgid ""
"This library contains a set of React components that can be used when "
"building React apps using Dojo."
msgstr ""
"Thư viện này chứa một tập hợp các React components có thể được sử dụng khi "
"xây dựng ứng dụng React bằng Dojo."

#: src/client/npm.md:26
msgid "[Documentation](./npm/react.md)"
msgstr ""

#: src/client/npm.md:33
msgid "@dojoengine/create-burner"
msgstr ""

#: src/client/npm.md:35
msgid ""
"Create burner is a simply way to incorporate burner wallets into your Dojo "
"app."
msgstr ""
"Create burner là một thư viện giúp đơn giản hoá việc tích hợp ví burner (ví "
"xài một lần) vào ứng dụng Dojo của bạn."

#: src/client/npm.md:37
msgid "[Reopsitory](https://github.com/dojoengine/create-burner)"
msgstr ""

#: src/client/npm/core.md:3
msgid ""
"This library abstracts away the world interface and provides a set of helper "
"functions to interact with the world. It is preferred to use this library "
"over interacting with the world directly."
msgstr ""
"Thư viện này trừu tượng hóa interface của world và cung cấp một tập hợp các "
"hàm trợ giúp (helper functions) để tương tác với world. Nên sử dụng thư viện "
"này để tương tác trực tiếp với thế giới."

#: src/client/npm/core.md:5
msgid "World explorers"
msgstr ""

#: src/client/npm/core.md:6
msgid "World deployers"
msgstr ""

#: src/client/npm/core.md:7
msgid "Games"
msgstr ""

#: src/client/npm/core.md:8
msgid "Anaylitics"
msgstr ""

#: src/client/npm/core.md:16
msgid "Example Usage"
msgstr "Ví Dụ Về Cách Sử Dụng"

#: src/client/npm/core.md:18
msgid ""
"This is an example from [Dojo React App](https://github.com/dojoengine/dojo-"
"starter-react-app)"
msgstr ""
"Đây là ví dụ từ [Dojo React App](https://github.com/dojoengine/dojo-starter-"
"react-app)"

#: src/client/npm/core.md:20
msgid ""
"```javascript\n"
"import { defineContractComponents } from \"./contractComponents\";\n"
"import { world } from \"./world\";\n"
"import { RPCProvider, Query, } from \"@dojoengine/core\";\n"
"import { Account, num } from \"starknet\";\n"
"import { GraphQLClient } from 'graphql-request';\n"
"import { getSdk } from '../generated/graphql';\n"
"\n"
"export type SetupNetworkResult = Awaited<ReturnType<typeof setupNetwork>>;\n"
"\n"
"export async function setupNetwork() {\n"
"\n"
"    const provider = new RPCProvider(import.meta.env."
"VITE_PUBLIC_WORLD_ADDRESS, import.meta.env.VITE_PUBLIC_NODE_URL);\n"
"\n"
"    return {\n"
"        contractComponents: defineContractComponents(world),\n"
"        provider,\n"
"        execute: async (signer: Account, system: string, call_data: num."
"BigNumberish[]) => provider.execute(signer, system, call_data),\n"
"        entity: async (component: string, query: Query) => provider."
"entity(component, query),\n"
"        entities: async (component: string, partition: number) => provider."
"entities(component, partition),\n"
"        world,\n"
"        graphSdk: getSdk(new GraphQLClient(import.meta.env."
"VITE_PUBLIC_TORII)),\n"
"        call: async (selector: string, call_data: num.BigNumberish[]) => "
"provider.call(selector, call_data),\n"
"    };\n"
"}\n"
"```"
msgstr ""

#: src/toolchain/dojoup.md:1
msgid "`dojoup`"
msgstr ""

#: src/toolchain/dojoup.md:3
msgid "Update or revert to a specific Dojo branch with ease."
msgstr "Update hoặc revert về một branch Dojo một cách dễ dàng."

#: src/toolchain/dojoup.md:5
msgid "Installing"
msgstr "Cài Đặt"

#: src/toolchain/dojoup.md:11 src/toolchain/katana/overview.md:22
msgid "Usage"
msgstr "Sử Dụng"

#: src/toolchain/dojoup.md:13
msgid "To install latest **stable** version:"
msgstr "Để cài đặt phiên bản **ổn định** mới nhất:"

#: src/toolchain/dojoup.md:18
msgid ""
"Note: You may have to install `jq` to use `dojoup`. You can do so with the "
"following commands:"
msgstr ""
"Lưu ý: Bạn có thể phải cài đặt `jq` để sử dụng `dojoup`. Bạn có thể làm như "
"vậy với các command sau:"

#: src/toolchain/dojoup.md:28
msgid "To install a specific **version** (in this case the `nightly` version):"
msgstr ""
"Để cài đặt một **phiên bản** cụ thể (trong trường hợp này là phiên bản "
"`nightly`):"

#: src/toolchain/dojoup.md:34
msgid ""
"To install a specific **branch** (in this case the `release/0.1.0` branch's "
"latest commit):"
msgstr ""
"Để cài đặt từ một **branch** cụ thể (trong trường hợp này là commit mới nhất "
"của branch `release/0.1.0`):"

#: src/toolchain/dojoup.md:40
msgid ""
"To install a **fork's main branch** (in this case `tarrencev/dojo`'s main "
"branch):"
msgstr ""
"Để cài đặt **fork's main branch** (trong trường hợp này là main branch của "
"`tarrencev/dojo`):"

#: src/toolchain/dojoup.md:46
msgid ""
"To install a **specific branch in a fork** (in this case the `patch-10` "
"branch's latest commit in `tarrencev/dojo`):"
msgstr ""
"Để cài đặt một **branch cụ thể trong một bản fork** (trong trường hợp này là "
"commit mới nhất của branch `patch-10` trong `tarrencev/dojo`):"

#: src/toolchain/dojoup.md:52
msgid "To install from a **specific Pull Request**:"
msgstr "Để cài đặt từ một **Pull Request cụ thể**:"

#: src/toolchain/dojoup.md:58
msgid "To install from a **specific commit**:"
msgstr "Để cài đặt từ một **commit cụ thể**:"

#: src/toolchain/dojoup.md:64
msgid ""
"To install a local directory or repository (e.g. one located at `~/git/"
"dojo`, assuming you're in the home directory)"
msgstr ""
"Để cài đặt một thư mục hoặc kho lưu trữ local (ví dụ: một thư mục nằm ở `~/"
"git/dojo` trong trường hợp bạn đang ở trong thư mục chỉnh của dự án của bạn)"

#: src/toolchain/dojoup.md:66
msgid ""
"Note: --branch, --repo, and --version flags are ignored during local "
"installations."
msgstr ""
"Lưu ý: Các cờ --branch, --repo và --version bị bỏ qua trong quá trình cài "
"đặt cục bộ."

#: src/toolchain/dojoup.md:74
msgid ""
"**Tip**: All flags have a single character shorthand equivalent! You can use "
"`-v` instead of `--version`, etc."
msgstr ""
"**Mẹo**: Tất cả các flags đều có một ký tự viết tắt tương đương! Bạn có thể "
"sử dụng `-v` thay vì `--version`, v.v."

#: src/toolchain/dojoup.md:78
msgid "Precompiled binaries"
msgstr ""

#: src/toolchain/dojoup.md:80
msgid ""
"Precompiled binaries are available from the [GitHub releases page](https://"
"github.com/dojoengine/dojo/releases). These are better managed by using "
"[Dojoup](#using-dojoup)."
msgstr ""
"Các Precompiled binaries được compile sẵn có sẵn trên [trang GitHub](https://"
"github.com/dojoengine/dojo/releases). Chúng có thể được quản lý tốt hơn bằng "
"cách sử dụng [Dojoup](#using-dojoup)."

#: src/toolchain/dojoup.md:84
msgid "ℹ️ **Note**"
msgstr "ℹ️ **Lưu ý**"

#: src/toolchain/dojoup.md:86
msgid ""
"If you're on Windows, you will need to install and use [Git BASH](https://"
"gitforwindows.org/) or [WSL](https://learn.microsoft.com/en-us/windows/wsl/"
"install), as your terminal, since Dojoup currently does not support "
"Powershell or Cmd."
msgstr ""
"Nếu đang dùng Windows, bạn sẽ cần cài đặt và sử dụng [Git BASH](https://"
"gitforwindows.org/) hoặc [WSL](https://learn.microsoft.com/en-us/windows/"
"wsl /install), làm terminal, vì Dojoup hiện không hỗ trợ Powershell hoặc Cmd."

#: src/toolchain/sozo/overview.md:3
msgid ""
"`sozo` is a powerful all-in-one tool for managing your Dojo projects. It "
"helps with everything from scaffolding a new project, all the way to "
"deploying and interacting with your Dojo Worlds. It includes a migration "
"planning tool, designed to streamline the updating and deployment of AWs. It "
"provides a robust command-line interface (CLI) that simplifies World "
"management tasks, enabling you to focus on the creative aspects of World-"
"building. In the future, it may include a GUI."
msgstr ""
"`sozo` là một all-in-one tool để quản lý các dự án Dojo của bạn. Nó hỗ trợ "
"mọi việc từ xây dựng một dự án mới cho đến deploy và tương tác với Dojo "
"Worlds của bạn. Nó bao gồm một công cụ lập kế hoạch migration, được thiết kế "
"để hợp lý hóa việc cập nhật và triển khai AW. Nó cung cấp command-line "
"interface (CLI) mạnh mẽ giúp đơn giản hóa các tác vụ quản lý World, cho phép "
"bạn tập trung vào các khía cạnh sáng tạo trong việc xây dựng World. Trong "
"tương lai, nó có thể bao gồm GUI."

#: src/toolchain/sozo/overview.md:5 src/toolchain/katana/overview.md:5
msgid "Features"
msgstr "Các tính năng"

#: src/toolchain/sozo/overview.md:7
msgid ""
"**Binary CLI**: Sozo provides an intuitive binary CLI, ensuring easy "
"management of your Worlds, whether you're updating existing ones or "
"deploying new ones."
msgstr ""
"** CLI nhị phân **: Sozo cung cấp CLI nhị phân trực quan, đảm bảo quản lý dễ "
"dàng các Worlds của bạn, cho dù bạn đang cập nhật các Worlds hiện có hay "
"triển khai các Worlds mới."

#: src/toolchain/sozo/overview.md:9 src/toolchain/katana/overview.md:10
#: src/toolchain/torii/overview.md:14
msgid "Installation"
msgstr "Cài đặt"

#: src/toolchain/sozo/overview.md:11
msgid ""
"`sozo` binary can be installed via [`dojoup`](../../getting-started/quick-"
"start.md), our dedicated installation package manager."
msgstr ""
"Binary của `sozo` có thể được cài đặt thông qua [`dojoup`](../../getting-"
"started/quick-start.md), package manager chuyên dụng của chúng tôi."

#: src/toolchain/sozo/overview.md:13 src/toolchain/torii/overview.md:18
msgid "Installing from Source"
msgstr "Cài đặt từ Source"

#: src/toolchain/sozo/overview.md:15
msgid ""
"```sh\n"
"git clone https://github.com/dojoengine/dojo\n"
"cd dojo\n"
"cargo install --path ./crates/sozo --locked --force\n"
"```"
msgstr ""

#: src/toolchain/sozo/overview.md:21
msgid ""
"This will install Sozo and the required dependencies on your local system."
msgstr ""
"Thao tác này sẽ cài đặt Sozo và các dependencies cần thiết trên hệ thống cục "
"bộ của bạn."

#: src/toolchain/sozo/overview.md:23 src/toolchain/katana/overview.md:60
#: src/toolchain/torii/overview.md:28
msgid "📚 **Reference**"
msgstr "📚 **Tài Liệu Tham Khảo**"

#: src/toolchain/sozo/overview.md:25
msgid ""
"See the [`sozo` Reference](./reference.md) for a complete overview of all "
"the available subcommands."
msgstr ""
"Xem [`sozo` Reference](./reference.md) để biết tổng quan đầy đủ về tất cả "
"các subcommands có sẵn."

#: src/toolchain/sozo/reference.md:1
msgid "sozo reference"
msgstr "tài liệu tham khảo về sozo"

#: src/toolchain/sozo/reference.md:3
msgid "Project Commands"
msgstr "Các Dòng Lệnh Quản Lý Project"

#: src/toolchain/sozo/reference.md:5
msgid "[init](./project-commands/init.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:6
msgid "[build](./project-commands/build.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:7
msgid "[test](./project-commands/test.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:8
msgid "[migrate](./project-commands/migrate.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:10
msgid "World Commands"
msgstr "Các Dòng Lệnh Quản Lý World"

#: src/toolchain/sozo/reference.md:12
msgid "[execute](./world-commands/execute.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:13
msgid "[register](./world-commands/register.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:14
msgid "[system](./world-commands/system.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:15
msgid "[component](./world-commands/component.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:16
msgid "[events](./world-commands/events.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:17
msgid "[auth](./world-commands/auth.md)"
msgstr ""

#: src/toolchain/sozo/project-commands/init.md:1
msgid "sozo init"
msgstr ""

#: src/toolchain/sozo/project-commands/init.md:3
msgid ""
"`init` is used to initialize a new project. It will initialize a new project "
"in the current directory by cloning the [dojo-starter](https://github.com/"
"dojoengine/dojo-starter)."
msgstr ""
"`init` được sử dụng để khởi tạo một dự án mới. Nó sẽ khởi tạo một dự án mới "
"trong thư mục hiện tại bằng cách clone repo [dojo-starter](https://github."
"com/dojoengine/dojo-starter)."

#: src/toolchain/sozo/project-commands/build.md:1
msgid "sozo build"
msgstr ""

#: src/toolchain/sozo/project-commands/build.md:3
msgid ""
"`build` is used to compile the cairo contracts, generating the necessary "
"artifacts for deployment."
msgstr ""
"`build` được sử dụng để compile các contract cairo, tạo ra các artifacts cần "
"thiết cho việc deploy."

#: src/toolchain/sozo/project-commands/test.md:1
msgid "sozo test"
msgstr ""

#: src/toolchain/sozo/project-commands/test.md:3
msgid ""
"`test` is used to test the project's cairo contracts. It will run all tests "
"found within the project."
msgstr ""
"`test` được sử dụng để thực thi các test của các contract cairo trong dự án. "
"Nó sẽ chạy tất cả các test được tìm thấy trong dự án."

#: src/toolchain/sozo/project-commands/migrate.md:1
msgid "sozo migrate"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:3
msgid ""
"`migrate` is used to perform the migration (deployment) process, declaring "
"and deploying contracts as necessary to deploy or update the World."
msgstr ""
"`migrate` được sử dụng để thực hiện quá trình migrate (deploy), khai báo và "
"triển khai các contract khi cần thiết để deploy hoặc update World."

#: src/toolchain/sozo/project-commands/migrate.md:5
msgid ""
"Changes made to the local World after the initial deployment, can easily be "
"pushed to the remote counterpart by running `sozo migrate --world "
"<WORLD_ADDRESS>` with `WORLD_ADDRESS` being the address of the remote World. "
"In the background, `migrate` will compute the diffs of the local and remote "
"World, then, start constructing a migration strategy to determine, if any, "
"which part of the local World needs to be pushed upstream."
msgstr ""
"Những thay đổi được thực hiện đối với local World sau lần deploy đầu tiên có "
"thể dễ dàng được push sang remote bằng cách chạy `sozo migrate --world "
"<WORLD_ADDRESS>` với `WORLD_ADDRESS` là địa chỉ của remote World. Ở chế độ "
"nền, `migrate` sẽ tính toán sự khác biệt của local World và remote World, "
"sau đó, bắt đầu xây dựng chiến lược migrate nhằm xác định rằng có phần nào "
"của local World cần được push lên remote World hay không."

#: src/toolchain/sozo/project-commands/migrate.md:7
#: src/toolchain/sozo/world-commands/execute.md:7
#: src/toolchain/sozo/world-commands/system.md:5
#: src/toolchain/sozo/world-commands/component.md:5
#: src/toolchain/katana/reference.md:7 src/toolchain/torii/reference.md:7
msgid "USAGE"
msgstr "CÁCH SỬ DỤNG"

#: src/toolchain/sozo/project-commands/migrate.md:13
#: src/toolchain/sozo/world-commands/execute.md:13
#: src/toolchain/sozo/world-commands/system.md:43
#: src/toolchain/sozo/world-commands/component.md:61
#: src/toolchain/katana/reference.md:105 src/toolchain/torii/reference.md:33
msgid "OPTIONS"
msgstr "TÙY CHỌN"

#: src/toolchain/sozo/project-commands/migrate.md:15
#: src/toolchain/sozo/world-commands/execute.md:15
#: src/toolchain/katana/reference.md:107 src/toolchain/torii/reference.md:35
msgid "General Options"
msgstr "Các Options Chung"

#: src/toolchain/sozo/project-commands/migrate.md:17
msgid ""
"`--name` _NAME_  \n"
"    Name of the World. At the moment, the only usage for this option is to "
"be used as a salt when deploying the World contract to avoid address "
"conflicts. This option is **required** when performing the initial migration "
"of the World."
msgstr ""
"`--name` _NAME_  \n"
"    Tên của World. Hiện tại, cách sử dụng duy nhất cho option này là dùng "
"làm salt khi deploy contract World để tránh xung đột địa chỉ (address "
"conflicts). Tùy chọn này là **bắt buộc** khi thực hiện quá trình migrate "
"World đầu tiên."

#: src/toolchain/sozo/project-commands/migrate.md:20
#: src/toolchain/sozo/world-commands/execute.md:21
#: src/toolchain/sozo/world-commands/system.md:45
#: src/toolchain/sozo/world-commands/component.md:63
msgid "World Options"
msgstr "Các Options của World"

#: src/toolchain/sozo/project-commands/migrate.md:22
#: src/toolchain/sozo/world-commands/execute.md:23
#: src/toolchain/sozo/world-commands/system.md:47
#: src/toolchain/sozo/world-commands/component.md:65
msgid ""
"`--world` _WORLD_ADDRESS_  \n"
"    The address of the World contract.  \n"
"    ENV: `DOJO_WORLD_ADDRESS`"
msgstr ""
"`--world` _WORLD_ADDRESS_  \n"
"    Địa chỉ của contract World.  \n"
"    ENV: `DOJO_WORLD_ADDRESS`"

#: src/toolchain/sozo/project-commands/migrate.md:26
#: src/toolchain/sozo/world-commands/execute.md:27
#: src/toolchain/sozo/world-commands/system.md:51
#: src/toolchain/sozo/world-commands/component.md:69
#: src/toolchain/katana/reference.md:139
msgid "Starknet Options"
msgstr "Các Options Starknet"

#: src/toolchain/sozo/project-commands/migrate.md:28
#: src/toolchain/sozo/world-commands/execute.md:29
#: src/toolchain/sozo/world-commands/system.md:53
#: src/toolchain/sozo/world-commands/component.md:71
msgid ""
"`--rpc-url` _URL_  \n"
"    The Starknet RPC endpoint. \\[default: http://localhost:5050\\]  \n"
"    ENV: `STARKNET_RPC_URL`"
msgstr ""
"`--rpc-url` _URL_  \n"
"    Endpoint của Starknet RPC. \\[default: http://localhost:5050\\]  \n"
"    ENV: `STARKNET_RPC_URL`"

#: src/toolchain/sozo/project-commands/migrate.md:32
#: src/toolchain/sozo/world-commands/execute.md:33
msgid "Account Options"
msgstr "Các Option của Account"

#: src/toolchain/sozo/project-commands/migrate.md:34
#: src/toolchain/sozo/world-commands/execute.md:35
msgid ""
"`--account-address` _ACCOUNT_ADDRESS_  \n"
"    The Starknet account address.  \n"
"    ENV: `DOJO_ACCOUNT_ADDRESS`"
msgstr ""
"`--account-address` _ACCOUNT_ADDRESS_  \n"
"    Địa chỉ ví starknet.  \n"
"    ENV: `DOJO_ACCOUNT_ADDRESS`"

#: src/toolchain/sozo/project-commands/migrate.md:38
#: src/toolchain/sozo/world-commands/execute.md:39
msgid "Signer Options - Raw"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:40
#: src/toolchain/sozo/world-commands/execute.md:41
msgid ""
"`--private-key` _PRIVATE_KEY_  \n"
"    The raw private key associated with the account contract.  \n"
"    ENV: `DOJO_PRIVATE_KEY`"
msgstr ""
"`--private-key` _PRIVATE_KEY_  \n"
"    Bản raw của private key có liên kết với contract của ví.  \n"
"    ENV: `DOJO_PRIVATE_KEY`"

#: src/toolchain/sozo/project-commands/migrate.md:44
#: src/toolchain/sozo/world-commands/execute.md:45
msgid "Signer Options - Keystore"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:46
#: src/toolchain/sozo/world-commands/execute.md:47
msgid ""
"`--keystore` _PATH_  \n"
"    Use the keystore in the given folder or file."
msgstr ""
"`--keystore` _PATH_  \n"
"    Sử dụng keystore trong folder được chỉ định."

#: src/toolchain/sozo/project-commands/migrate.md:49
#: src/toolchain/sozo/world-commands/execute.md:50
msgid ""
"`--password` _PASSWORD_  \n"
"    The keystore password. Used with --keystore.  \n"
"    ENV: `DOJO_KEYSTORE_PASSWORD`"
msgstr ""
"`--password` _PASSWORD_  \n"
"    Password của keystore, sử dụng với --keystore.  \n"
"    ENV: `DOJO_KEYSTORE_PASSWORD`"

#: src/toolchain/sozo/project-commands/migrate.md:53
#: src/toolchain/sozo/world-commands/execute.md:54
#: src/toolchain/sozo/world-commands/system.md:57
#: src/toolchain/katana/reference.md:178 src/toolchain/katana/reference.md:186
msgid "EXAMPLES"
msgstr "VÍ DỤ"

#: src/toolchain/sozo/project-commands/migrate.md:55
msgid "Deploying your World for the first time to a local Katana node"
msgstr "Triển khai World của bạn lần đầu tiên tới local Katana node"

#: src/toolchain/sozo/project-commands/migrate.md:57
msgid ""
"```sh\n"
"sozo migrate --name ohayo --rpc-url http://localhost:5050\n"
"```"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:61
msgid "Updating a remote World after making some changes"
msgstr "Cập nhật remote World sau khi thực hiện một số thay đổi"

#: src/toolchain/sozo/world-commands/execute.md:1
msgid "sozo execute"
msgstr ""

#: src/toolchain/sozo/world-commands/execute.md:3
msgid "`execute` is used to execute a World's system."
msgstr "`execute` được sử dụng để thực thi system của World."

#: src/toolchain/sozo/world-commands/execute.md:5
msgid ""
"Performing a system execution requires sending a transaction, therefore, "
"`execute` expects an account address as well as its respective private key "
"in order to sign the transaction before sending it."
msgstr ""
"Việc thực thi system cần phải gửi một transaction, do đó, `execute` cần có "
"địa chỉ ví cũng như private key tương ứng để sign transaction trước khi gửi "
"đi."

#: src/toolchain/sozo/world-commands/execute.md:17
msgid ""
"`--calldata` _CALLDATA_  \n"
"    The calldata to be passed to the system that you want to execute.  \n"
"    Comma seperated values e.g., 0x12345,0x69420."
msgstr ""
"`--calldata` _CALLDATA_  \n"
"    Calldata cần pass vào system mà bạn muốn thực thi\n"
"    Các giá trị được phân tách bằng dấu phẩy, ví dụ: 0x12345,0x69420."

#: src/toolchain/sozo/world-commands/execute.md:56
msgid ""
"Executing the _position_ system which takes two values (_x_: 0x77 and _y_: "
"0x44)"
msgstr "Thực thi hệ thống _position_ với 2 params (_x_: 0x77 và _y_: 0x44)"

#: src/toolchain/sozo/world-commands/register.md:1
msgid "sozo register"
msgstr ""

#: src/toolchain/sozo/world-commands/register.md:3
msgid "`register` is used to register new systems and components."
msgstr "`register` được sử dụng để đăng ký các systems và components mới."

#: src/toolchain/sozo/world-commands/system.md:1
msgid "sozo system"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:3
msgid ""
"`system` is used to interact with a World's systems. It is useful for "
"querying about a system's information."
msgstr ""
"`system` được sử dụng để tương tác với các systems của World. Nó rất hữu ích "
"cho việc truy vấn về thông tin của system."

#: src/toolchain/sozo/world-commands/system.md:15
#: src/toolchain/sozo/world-commands/component.md:16
msgid "SUBCOMMANDS"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:17
#: src/toolchain/sozo/world-commands/component.md:18
msgid "`get`"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:19
msgid "Get the class hash of a system"
msgstr "Get class hash của một system"

#: src/toolchain/sozo/world-commands/system.md:25
#: src/toolchain/sozo/world-commands/system.md:38
#: src/toolchain/sozo/world-commands/component.md:26
#: src/toolchain/sozo/world-commands/component.md:39
#: src/toolchain/sozo/world-commands/component.md:52
msgid "Arguments"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:27
#: src/toolchain/sozo/world-commands/system.md:40
msgid ""
"_`NAME`_  \n"
"    The name of the system"
msgstr ""
"_`NAME`_  \n"
"    Tên của system"

#: src/toolchain/sozo/world-commands/system.md:30
msgid "`dependency`"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:32
msgid "Retrieve the component dependencies of a system"
msgstr "Truy xuất các dependencies của component trong hệ thống"

#: src/toolchain/sozo/world-commands/system.md:59
msgid "Get the class hash of the _spawn_ system"
msgstr "Get class hash của system _spawn_"

#: src/toolchain/sozo/world-commands/system.md:65
msgid "Get the component dependencies of the _spawn_ system"
msgstr "Lấy các dependencies của component trong hệ thống _spawn_"

#: src/toolchain/sozo/world-commands/component.md:1
msgid "sozo component"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:3
msgid ""
"`component` is used to interact with a World's components. It is useful for "
"querying about a component's information, or a component value of an entity."
msgstr ""
"`component` được sử dụng để tương tác với các component của World. Nó rất "
"hữu ích khi truy vấn về thông tin của một component hoặc component value của "
"một entity."

#: src/toolchain/sozo/world-commands/component.md:20
msgid "Get the class hash of a component"
msgstr "Get class hash của một component"

#: src/toolchain/sozo/world-commands/component.md:28
#: src/toolchain/sozo/world-commands/component.md:41
#: src/toolchain/sozo/world-commands/component.md:54
msgid ""
"_`NAME`_  \n"
"    The name of the component"
msgstr ""
"_`TÊN`_\n"
"Tên của component"

#: src/toolchain/sozo/world-commands/component.md:31
msgid "`schema`"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:33
msgid "Retrieve the schema for a component"
msgstr "Truy xuất lược đồ cho một component"

#: src/toolchain/sozo/world-commands/component.md:44
msgid "`entity`"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:46
msgid "Get the component value for an entity"
msgstr "Get component value cho một entity"

#: src/toolchain/sozo/world-commands/component.md:57
msgid ""
"_`KEYS`_  \n"
"    The keys of the entity that you want to query.  \n"
"    Comma seperated values e.g., 0x12345,0x69420,..."
msgstr ""
"_`KEYS`_  \n"
"    Các keys của entity mà bạn muốn truy vấn..  \n"
"    Các giá trị được phân tách bằng dấu phẩy, ví dụ: 0x12345,0x69420,..."

#: src/toolchain/sozo/world-commands/events.md:1
msgid "sozo events"
msgstr ""

#: src/toolchain/sozo/world-commands/events.md:3
msgid "`events` is used to queries world events."
msgstr "`events` được sử dụng để truy vấn các events trong World."

#: src/toolchain/sozo/world-commands/auth.md:1
msgid "sozo auth"
msgstr ""

#: src/toolchain/sozo/world-commands/auth.md:3
msgid "`auth` is used to manage world authorization."
msgstr "`auth` được sử dụng để quản lý quyền của world."

#: src/toolchain/katana/overview.md:3
msgid ""
"`katana` is a _blazingly fast_ local Starknet node, designed to support "
"local development with Dojo."
msgstr ""
"`katana` là local Starknet node _có tốc độ cực nhanh_, được thiết kế để hỗ "
"trợ local development với Dojo."

#: src/toolchain/katana/overview.md:7
msgid ""
"[Starknet JSON-RPC v0.3.0](https://github.com/starkware-libs/starknet-specs/"
"tree/v0.3.0) support"
msgstr ""
"Hỗ trợ [Starknet JSON-RPC v0.3.0](https://github.com/starkware-libs/starknet-"
"specs/tree/v0.3.0)"

#: src/toolchain/katana/overview.md:8
msgid "Custom methods for manipulating the blockchain states"
msgstr "Các phương pháp tùy chỉnh để điều khiển các blockchain states"

#: src/toolchain/katana/overview.md:12
msgid ""
"`katana` binary is available via [`dojoup`](../../getting-started/quick-"
"start.md)."
msgstr ""
"Nhị phân của `katana` có sẵn thông qua [`dojoup`](../../getting-started/"
"quick-start.md)."

#: src/toolchain/katana/overview.md:14
msgid "Installing from source"
msgstr "Cài đặt từ Source"

#: src/toolchain/katana/overview.md:16
msgid ""
"```sh\n"
"git clone https://github.com/dojoengine/dojo\n"
"cd dojo\n"
"cargo install --path ./crates/katana --locked --force\n"
"```"
msgstr ""

#: src/toolchain/katana/overview.md:24
msgid ""
"```console\n"
"$ katana\n"
"\n"
"\n"
"\n"
"██╗  ██╗ █████╗ ████████╗ █████╗ ███╗   ██╗ █████╗\n"
"██║ ██╔╝██╔══██╗╚══██╔══╝██╔══██╗████╗  ██║██╔══██╗\n"
"█████╔╝ ███████║   ██║   ███████║██╔██╗ ██║███████║\n"
"██╔═██╗ ██╔══██║   ██║   ██╔══██║██║╚██╗██║██╔══██║\n"
"██║  ██╗██║  ██║   ██║   ██║  ██║██║ ╚████║██║  ██║\n"
"╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝\n"
"\n"
"\n"
"\n"
"PREFUNDED ACCOUNTS\n"
"==================\n"
"\n"
"| Account address |  "
"0x3ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0\n"
"| Private key     |  "
"0x300001800000000300000180000000000030000000000003006001800006600\n"
"| Public key      |  "
"0x1b7b37a580d91bc3ad4f9933ed61f3a395e0e51c9dd5553323b8ca3942bb44e\n"
"\n"
"| Account address |  "
"0x33c627a3e5213790e246a917770ce23d7e562baa5b4d2917c23b1be6d91961c\n"
"| Private key     |  "
"0x333803103001800039980190300d206608b0070db0012135bd1fb5f6282170b\n"
"| Public key      |  "
"0x4486e2308ef3513531042acb8ead377b887af16bd4cdd8149812dfef1ba924d\n"
"\n"
"\n"
"ACCOUNTS SEED\n"
"=============\n"
"0\n"
"\n"
"\n"
"🚀 JSON-RPC server started: http://127.0.0.1:5050\n"
"\n"
"\n"
"```"
msgstr ""

#: src/toolchain/katana/overview.md:62
msgid ""
"See the [`katana` Reference](./reference.md) for an in depth reference and "
"documentation on Katana."
msgstr ""
"Xem [Tài Liệu Tham Khảo `katana`](./reference.md) để biết thêm các thông tin "
"tham khảo và tài liệu chuyên sâu về Katana."

#: src/toolchain/katana/reference.md:1
msgid "katana reference"
msgstr "tài lieu tham khảo về katana"

#: src/toolchain/katana/reference.md:3
msgid "NAME"
msgstr ""

#: src/toolchain/katana/reference.md:5
msgid ""
"katana - Create a local testnet node for deploying and testing Starknet "
"smart contracts."
msgstr ""
"katana - Tạo local testnet node để deploy và testing các smart contract của "
"Starknet."

#: src/toolchain/katana/reference.md:13 src/toolchain/torii/reference.md:13
msgid "DESCRIPTION"
msgstr ""

#: src/toolchain/katana/reference.md:15
msgid ""
"Create a local testnet node for deploying and testing Starknet smart "
"contracts. Katana supports deployment and execution of the **new** as well "
"as the **legacy** (Cairo 0) Cairo contracts."
msgstr ""
"Tạo local testnet node để deploy và testing các smart contract của Starknet. "
"Katana hỗ trợ deploy và thực thi các contract Cairo **mới** cũng như **cũ** "
"(Cairo 0)."

#: src/toolchain/katana/reference.md:17
msgid ""
"This section covers an extensive list of information about Mining Modes, "
"Supported RPC Methods, Katana flags and their usages. You can run multiple "
"flags at the same time."
msgstr ""
"Phần này bao gồm danh sách thông tin mở rộng về Mining Modes, Các RPC "
"methods được hỗ trợ, các flags của Katana và cách sử dụng chúng. Bạn có thể "
"chạy nhiều flags cùng một lúc."

#: src/toolchain/katana/reference.md:19
msgid "Mining Modes"
msgstr ""

#: src/toolchain/katana/reference.md:21
msgid ""
"In Katana, mining modes determine how frequent blocks are mined. By default, "
"a new block is automatically mined as soon as a transaction is submitted."
msgstr ""
"Trong Katana, mining modes dùng để đo lường tần suất khai thác các block. "
"Theo mặc định, một block mới sẽ tự động được mine ngay khi transaction được "
"gửi đến."

#: src/toolchain/katana/reference.md:23
msgid ""
"You can switch from the default mining behaviour to interval mining, where a "
"new block is created at a fixed time interval selected by the user. To "
"enable this mode of mining, use the `--block-time <SECONDS>` flag, as "
"demonstrated in the following example."
msgstr ""
"Bạn có thể chuyển từ hành vi mining mặc định (có transaction mới tạo block "
"mới) sang mining theo khoảng thời gian, trong đó một khối mới được tạo tại "
"một khoảng thời gian cố định do người dùng chọn. Để kích hoạt chế độ mining "
"này, hãy sử dụng flag `--block-time <SECONDS>`, được minh họa trong ví dụ "
"sau."

#: src/toolchain/katana/reference.md:30
msgid "Supported Transport Layers"
msgstr "Các Transport Layers Được Hỗ Trợ"

#: src/toolchain/katana/reference.md:32
msgid ""
"Only HTTP connection is supported at the moment. The server listens on port "
"5050 by default, but it can be changed by running the following command:"
msgstr ""
"Hiện tại chỉ hỗ trợ kết nối HTTP. Server sẽ listen port 5050 theo mặc định, "
"nhưng có thể thay đổi nó bằng cách chạy command sau:"

#: src/toolchain/katana/reference.md:38
msgid "Starknet Feature Compatibility"
msgstr "Khả Năng Tương Thích Các Tính Năng Của Starknet"

#: src/toolchain/katana/reference.md:40
msgid "Supported Transaction Type"
msgstr "Loại Giao Dịch Được Hỗ Trợ"

#: src/toolchain/katana/reference.md:42
msgid "Type"
msgstr ""

#: src/toolchain/katana/reference.md:42
msgid "Version"
msgstr ""

#: src/toolchain/katana/reference.md:44
msgid "INVOKE"
msgstr ""

#: src/toolchain/katana/reference.md:44
msgid "1"
msgstr ""

#: src/toolchain/katana/reference.md:45
msgid "DECLARE"
msgstr ""

#: src/toolchain/katana/reference.md:45
msgid "1, 2"
msgstr ""

#: src/toolchain/katana/reference.md:46
msgid "DEPLOY_ACCOUNT"
msgstr ""

#: src/toolchain/katana/reference.md:48
msgid "Supported RPC Methods"
msgstr ""

#: src/toolchain/katana/reference.md:50
msgid "Starknet Methods"
msgstr ""

#: src/toolchain/katana/reference.md:52
msgid ""
"Katana supports version **v0.3.0** of the Starknet JSON-RPC specifications. "
"The standard methods are based on [this](https://github.com/starkware-libs/"
"starknet-specs/tree/v0.3.0) reference."
msgstr ""

#: src/toolchain/katana/reference.md:54
msgid "`starknet_blockNumber`"
msgstr ""

#: src/toolchain/katana/reference.md:55
msgid "`starknet_blockHashAndNumber`"
msgstr ""

#: src/toolchain/katana/reference.md:56
msgid "`starknet_getBlockWithTxs`"
msgstr ""

#: src/toolchain/katana/reference.md:57
msgid "`starknet_getBlockWithTxHashes`"
msgstr ""

#: src/toolchain/katana/reference.md:58
msgid "`starknet_getBlockTransactionCount`"
msgstr ""

#: src/toolchain/katana/reference.md:59
msgid "`starknet_getTransactionByHash`"
msgstr ""

#: src/toolchain/katana/reference.md:60
msgid "`starknet_getTransactionByBlockIdAndIndex`"
msgstr ""

#: src/toolchain/katana/reference.md:61
msgid "`starknet_getTransactionReceipt`"
msgstr ""

#: src/toolchain/katana/reference.md:62
msgid "`starknet_pendingTransactions`"
msgstr ""

#: src/toolchain/katana/reference.md:63
msgid "`starknet_getStateUpdate`"
msgstr ""

#: src/toolchain/katana/reference.md:65
msgid "`starknet_call`"
msgstr ""

#: src/toolchain/katana/reference.md:66
msgid "`starknet_estimateFee`"
msgstr ""

#: src/toolchain/katana/reference.md:68
msgid "`starknet_chainId`"
msgstr ""

#: src/toolchain/katana/reference.md:70
msgid "`starknet_getNonce`"
msgstr ""

#: src/toolchain/katana/reference.md:71
msgid "`starknet_getEvents`"
msgstr ""

#: src/toolchain/katana/reference.md:72
msgid "`starknet_getStorageAt`"
msgstr ""

#: src/toolchain/katana/reference.md:73
msgid "`starknet_getClassHashAt`"
msgstr ""

#: src/toolchain/katana/reference.md:74
msgid "`starknet_getClass`"
msgstr ""

#: src/toolchain/katana/reference.md:75
msgid "`starknet_getClassAt`"
msgstr ""

#: src/toolchain/katana/reference.md:77
msgid "`starknet_syncing`"
msgstr ""

#: src/toolchain/katana/reference.md:79
msgid "`starknet_addInvokeTransaction`"
msgstr ""

#: src/toolchain/katana/reference.md:80
msgid "`starknet_addDeclareTransaction`"
msgstr ""

#: src/toolchain/katana/reference.md:81
msgid "`starknet_addDeployAccountTransaction`"
msgstr ""

#: src/toolchain/katana/reference.md:83
msgid "Custom Methods"
msgstr "Methods tuỳ chỉnh"

#: src/toolchain/katana/reference.md:85
msgid ""
"Katana provides a convenient set of custom RPC methods to quickly and easily "
"configure the node to suit your testing environment."
msgstr ""
"Katana cung cấp một bộ phương pháp RPC tùy chỉnh thuận tiện để config node "
"phù hợp với môi trường thử nghiệm của bạn một cách nhanh chóng và dễ dàng."

#: src/toolchain/katana/reference.md:87
msgid ""
"`katana_generateBlock`  \n"
"Mine a new block which includes all currently pending transactions."
msgstr ""
"`katana_generateBlock`  \n"
"Mine một block mới bao gồm tất cả các transaction hiện đang chờ xử lý."

#: src/toolchain/katana/reference.md:90
msgid ""
"`katana_nextBlockTimestamp`  \n"
"Get the time for the next block."
msgstr ""
"`katana_nextBlockTimestamp`\n"
"Get thời gian block tiếp theo được mine."

#: src/toolchain/katana/reference.md:93
msgid ""
"`katana_increaseNextBlockTimestamp`  \n"
"Increase the time for the block by a given amount of time, in seconds."
msgstr ""
"`katana_increaseNextBlockTimestamp`\n"
"Tăng Timestamp cho Block theo một khoảng thời gian nhất định, tính bằng giây."

#: src/toolchain/katana/reference.md:96
msgid ""
"`katana_setNextBlockTimestamp`  \n"
"Similar to `katana_increaseNextBlockTimestamp` but takes the exact timestamp "
"that you want in the next block."
msgstr ""
"`katana_setNextBlockTimestamp`  \n"
"Tương tự như `katana_increaseNextBlockTimestamp` nhưng lệnh này yêu cầu "
"timestamp chuẩn mà bạn muốn block tiếp theo được mine."

#: src/toolchain/katana/reference.md:99
msgid ""
"`katana_predeployedAccounts`  \n"
"Get the info for all of the predeployed accounts."
msgstr ""
"`katana_predeployedAccounts`\n"
"Get info về tất cả các account đã được deploy sẵn."

#: src/toolchain/katana/reference.md:102
msgid ""
"`katana_setStorageAt`  \n"
"Set an exact value of a contract's storage slot."
msgstr ""
"`katana_setStorageAt`\n"
"Set value của storage slot của contract."

#: src/toolchain/katana/reference.md:109
msgid ""
"`--silent`  \n"
"     Don't print anything on startup."
msgstr ""
"`--silent`\n"
"Không in bất cứ thứ gì khi khởi động."

#: src/toolchain/katana/reference.md:112
msgid ""
"`--no-mining`  \n"
"     Disable auto and interval mining, and mine on demand instead."
msgstr ""
"`--no-mining`  \n"
"     Tắt tính năng mine tự động và mine theo khoảng thời gian, thay vào đó "
"sẽ mine khi được yêu cầu hoặc có transaction mới."

#: src/toolchain/katana/reference.md:115
msgid ""
"`-b, --block-time <SECONDS>`  \n"
"     Block time in seconds for interval mining."
msgstr ""
"`-b, --block-time <SECONDS>`  \n"
"     Set thời gian block mới được mine khi để chế độ mine theo thời gian."

#: src/toolchain/katana/reference.md:118
msgid ""
"`--dump-state <PATH>`  \n"
"     Dump the state of chain on exit to the given file.  \n"
"     If the value is a directory, the state will be written to `<PATH>/state."
"bin`."
msgstr ""
"`--dump-state <PATH>`  \n"
"     Kết xuất state của chain khi thoát vào tệp đã cho.\n"
"     Nếu PATH là một thư mục, state sẽ được ghi vào  `<PATH>/state.bin`."

#: src/toolchain/katana/reference.md:122
msgid ""
"`--load-state <PATH>`  \n"
"     Initialize the chain from a previously saved state snapshot."
msgstr ""
"`--load-state <PATH>`  \n"
"     Khởi tạo chain từ state snapshot đã lưu trước đó."

#: src/toolchain/katana/reference.md:125
msgid ""
"`-h, --help`  \n"
"     Print help (see a summary with '-h')."
msgstr ""
"`-h, --help`  \n"
"     In ra màn hình những ghi chú về các lệnh (xem bản rút gọn bằng '-h')."

#: src/toolchain/katana/reference.md:128
msgid ""
"`-V, --version`  \n"
"     Print version information."
msgstr ""
"`-V, --version`  \n"
"     In thông tin phiên bản."

#: src/toolchain/katana/reference.md:131
msgid "Server Options"
msgstr "Các Tuỳ Chọn Của Server"

#: src/toolchain/katana/reference.md:133
msgid ""
"`-p, --port <PORT>`  \n"
"     Port number to listen on. \\[default: 5050\\]"
msgstr ""
"`-p, --port <PORT>`  \n"
"     Server nên listen port nào \\[mặc định: 5050\\]"

#: src/toolchain/katana/reference.md:136
msgid ""
"`--host <HOST>`  \n"
"     The IP address the server will listen on."
msgstr ""
"`--host <HOST>`  \n"
"     Địa chỉ IP mà máy chủ sẽ listen."

#: src/toolchain/katana/reference.md:141
msgid ""
"`--seed <SEED>`  \n"
"     Specify the seed for randomness of accounts to be predeployed."
msgstr ""
"`--seed <SEED>`  \n"
"     Chỉ định seed, việc này sẽ ảnh hưởng đến tính ngẫu nhiên (randomness) "
"của các tài khoản sẽ được triển khai trước khi khởi tạo."

#: src/toolchain/katana/reference.md:144
msgid ""
"`--accounts <NUM>`  \n"
"     Number of pre-funded accounts to generate. \\[default: 10\\]"
msgstr ""
"`--accounts <NUM>`  \n"
"     Số lượng tài khoản được cấp vốn trước để tạo. \\[mặc định: 10\\]"

#: src/toolchain/katana/reference.md:147
msgid ""
"`--disable-fee`  \n"
"     Disable charging fee for transactions."
msgstr ""
"`--disable-fee`  \n"
"     Các transaction sẽ được miễn phí."

#: src/toolchain/katana/reference.md:150
msgid "Environment Options"
msgstr "Các Tuỳ Chọn Của Môi Trường"

#: src/toolchain/katana/reference.md:152
msgid ""
"`--chain-id <CHAIN_ID>`  \n"
"     The chain ID. \\[default: KATANA\\]"
msgstr ""
"`--chain-id <CHAIN_ID>`  \n"
"     ID của chain. \\[mặc định: KATANA\\]"

#: src/toolchain/katana/reference.md:155
msgid ""
"`--gas-price <GAS_PRICE>`  \n"
"     The gas price."
msgstr ""
"`--gas-price <GAS_PRICE>`  \n"
"     Giá gas."

#: src/toolchain/katana/reference.md:158
msgid ""
"`--validate-max-steps <VALIDATE_MAX_STEPS>`  \n"
"     The maximum number of steps available for the account validation logic."
msgstr ""
"`--validate-max-steps <VALIDATE_MAX_STEPS>`  \n"
"     Số bước tối đa cho logic xác thực tài khoản.."

#: src/toolchain/katana/reference.md:161
msgid ""
"`--invoke-max-steps <INVOKE_MAX_STEPS>`  \n"
"     The maximum number of steps available for the account execution logic."
msgstr ""
"`--invoke-max-steps <INVOKE_MAX_STEPS>`  \n"
"     Số bước tối đa có sẵn cho logic thực thi tài khoản."

#: src/toolchain/katana/reference.md:164
msgid "Shell Completions"
msgstr "Tự Động Điền Trong Shell"

#: src/toolchain/katana/reference.md:166
msgid "`katana` completions shell"
msgstr "tự động điền dành cho `katana`"

#: src/toolchain/katana/reference.md:168
msgid "Generates a shell completions script for the given shell."
msgstr "Shell bạn chọn sẽ có thể tự động điền command."

#: src/toolchain/katana/reference.md:170
msgid "Supported shells are:"
msgstr "Các Shell được hỗ trợ:"

#: src/toolchain/katana/reference.md:172
msgid "bash"
msgstr ""

#: src/toolchain/katana/reference.md:173
msgid "elvish"
msgstr ""

#: src/toolchain/katana/reference.md:174
msgid "fish"
msgstr ""

#: src/toolchain/katana/reference.md:175
msgid "powershell"
msgstr ""

#: src/toolchain/katana/reference.md:176
msgid "zsh"
msgstr ""

#: src/toolchain/katana/reference.md:180
msgid ""
"Generate shell completions script for `bash` and appends it to a `.bashrc` "
"file:"
msgstr "Tạo tự động điền trong shell cho `bash` và thêm nó vào tệp `.bashrc`:"

#: src/toolchain/katana/reference.md:188
msgid "Create 15 dev accounts and disable transaction fee mechanism"
msgstr "Tạo 15 tài khoản dev và vô hiệu hóa cơ chế phí giao dịch"

#: src/toolchain/katana/reference.md:194
msgid "Set the chain id to `SN_GOERLI` and run the server on port 8545"
msgstr "Đặt id chuỗi thành `SN_GOERLI` và chạy máy chủ trên port 8545"

#: src/toolchain/katana/reference.md:200
msgid ""
"Load previously stored state and dump the state of this session to a file on "
"shutdown"
msgstr ""
"Tải state được lưu trữ trước đó và chuyển state của session này vào một tệp "
"khi tắt"

#: src/toolchain/torii/overview.md:1
msgid "Torii - Networking & Indexing"
msgstr ""

#: src/toolchain/torii/overview.md:3
msgid ""
"Torii is an automatic indexer for dojo worlds. Built in rust to be blazingly "
"fast and exceptionally scalable."
msgstr ""
"Torii là một công cụ index tự động cho Dojo World. Được phát triển bằng Rust "
"để có tốc độ cực nhanh và khả năng mở rộng đặc biệt."

#: src/toolchain/torii/overview.md:5
msgid "Dojo indexer"
msgstr ""

#: src/toolchain/torii/overview.md:7
msgid ""
"Torii indexes your dojo worlds and exposes a GraphQL API to query them. "
"Simply run:"
msgstr ""
"Torii index Dojo world của bạn và hiển thị API GraphQL để truy vấn chúng. "
"Chỉ cần chạy command:"

#: src/toolchain/torii/overview.md:12
msgid "and you'll have a GraphQL API running on `http://localhost:8080`!"
msgstr "và bạn sẽ có API GraphQL chạy trên `http://localhost:8080`!"

#: src/toolchain/torii/overview.md:16
msgid ""
"The `torii` binary can be installed via [`dojoup`](../../getting-started/"
"quick-start.md), our dedicated installation package manager."
msgstr ""
"Bạn có thể cài đặt binanry của `torii` thông qua [`dojouup`](../../getting-"
"started/quick-start.md), trình quản lý gói cài đặt chuyên dụng của Dojo."

#: src/toolchain/torii/overview.md:20
msgid "If you prefer to install from the source code:"
msgstr "Nếu bạn thích cài đặt từ source code:"

#: src/toolchain/torii/overview.md:26
msgid ""
"This will install Torii and the required dependencies on your local system."
msgstr ""
"Thao tác này sẽ cài đặt Torii và các dependencies cần thiết vào local system "
"của bạn."

#: src/toolchain/torii/overview.md:30
msgid "See the [`torii` Reference](./reference.md) for a complete reference."
msgstr ""
"Xem [Tài Liệu Tham Khảo `torii`](./reference.md) để có thông tin tham khảo "
"đầy đủ."

#: src/toolchain/torii/reference.md:1
msgid "torii reference"
msgstr "tài liệu tham khảo torii"

#: src/toolchain/torii/reference.md:3
msgid "Name"
msgstr ""

#: src/toolchain/torii/reference.md:5
msgid "torii - An automatic indexer and networking layer for a world contract."
msgstr ""
"torii - indexer tự động và đồng thời là networking layer cho contract world."

#: src/toolchain/torii/reference.md:15
msgid ""
"`torii` starts the indexer and exposes GraphQL/gRPC API endpoints. The "
"indexer queries the specified Starknet RPC endpoint for transaction blocks "
"and listens for transactions related to the world contract. These "
"transactions can include component/system registrations, entity state "
"updates, system calls, and events. The parsed data is then stored in a local "
"SQLite database."
msgstr ""
"`torii` khởi động indexer và hiển thị các endpoints API GraphQL/gRPC. Người "
"index truy vấn Starknet RPC endpoint được chỉ định cho các transaction "
"blocks và lắng nghe các transactions liên quan đến contract world. Các "
"transactions này có thể bao gồm transaction đăng ký component/system, "
"transaction cập nhật state của entity, lệnh gọi system và even. Dữ liệu đã "
"qua phân tích sau đó được lưu trữ trong cơ sở dữ liệu SQLite local."

#: src/toolchain/torii/reference.md:17
msgid ""
"The GraphQL and gRPC API endpoints run in tandem with the indexer, providing "
"custom queries specific to the world contract for client applications."
msgstr ""
"The GraphQL và gRPC API endpoints chạy song song với indexer, cung cấp các "
"truy vấn tùy chỉnh cho contract world cho các client applications."

#: src/toolchain/torii/reference.md:19
msgid "Database URL"
msgstr ""

#: src/toolchain/torii/reference.md:21
msgid ""
"`torii` uses a sqlite database to store indexed data. The database can be "
"stored either in-memory or persistently on the filesystem."
msgstr ""
"`torii` sử dụng cơ sở dữ liệu sqlite để lưu trữ dữ liệu đã được index. Cơ sở "
"dữ liệu có thể được lưu trữ trong bộ nhớ hoặc lưu trữ liên tục trên "
"filesystem."

#: src/toolchain/torii/reference.md:23
msgid ""
"The in-memory database is ephermal and only lasts as long as the indexer is "
"running. This is a fast and simple option to start the indexer for "
"development/testing."
msgstr ""
"In-memory database chỉ là tạm thời và chỉ tồn tại khi indexer đang chạy. Đây "
"là một option nhanh chóng và đơn giản để khởi động indexer cho quá trình "
"phát triển/thử nghiệm."

#: src/toolchain/torii/reference.md:24
msgid ""
"Presistent storage should be used in production. It relies on the local "
"filesystem for storage."
msgstr ""
"Presistent storage nên được sử dụng trong production. Nó dựa vào filesystem "
"local để lưu trữ."

#: src/toolchain/torii/reference.md:26
msgid ""
"Note: If using in-memory db, the memory will be garbage collected after a "
"period of inactivity, causing queries to result in errors. A workaround is "
"to start `katana` with the `--block-time` option or use a persistent "
"database."
msgstr ""
"Lưu ý: Nếu sử dụng in-memory database, bộ nhớ sẽ bị dọn dẹp sau một thời "
"gian không hoạt động, khiến các index dẫn đến lỗi. Một cách giải quyết khác "
"là khởi động `katana` bằng option  `--block-time` hoặc sử dụng persistent "
"database."

#: src/toolchain/torii/reference.md:37
msgid "`-w, --world`      Address of the world contract to index"
msgstr "`-w, --world`      Địa chỉ của contract world để index"

#: src/toolchain/torii/reference.md:40
msgid ""
"`--rpc`      Starknet RPC endpoing to use \\[default: http//localhost:5050\\]"
msgstr "`--rpc`      Starknet RPC \\[mặc định: http//localhost:5050\\]"

#: src/toolchain/torii/reference.md:43
msgid ""
"`-m, --manifest <MANIFEST>`      Specify a local manifest to initialize from"
msgstr ""
"`-m, --manifest <MANIFEST>`      Chỉ định một local manifest để khởi tạo từ "
"đó"

#: src/toolchain/torii/reference.md:46
msgid ""
"`-d, --database-url <DATABASE_URL>`      Database URL (read more above) "
"\\[default: sqlite::memory:\\]"
msgstr ""
"`-d, --database-url <DATABASE_URL>`      Database URL (đọc thêm ở trên) "
"\\[mặc định: sqlite::memory:\\]"

#: src/toolchain/torii/reference.md:49
msgid ""
"`-s, --start-block <START_BLOCK>`      Specify a block to start indexing "
"from, ignored if stored head exists \\[default: 0\\]"
msgstr ""
"`-s, --start-block <START_BLOCK>`      Chỉ định một block để bắt đầu lập "
"index từ đó, bỏ qua nếu head đã được lưu trữ và đang tồn tại \\[mặc định: "
"0\\]"

#: src/toolchain/torii/reference.md:52
msgid "`-h, --help`      Print help"
msgstr ""

#: src/toolchain/torii/reference.md:55
msgid "`-V, --version`      Print version"
msgstr ""

#: src/deployment/locally.md:1
msgid "Deploying Locally"
msgstr "Deploy Local"

#: src/deployment/locally.md:3
msgid ""
"Dojo is engineered for rapid development, boasting a lightning-fast local "
"development environment named [Katana](./toolchain/katana/overview.md). "
"Katana serves as an on-device Starknet blockchain, allowing you to "
"rigorously test your smart contracts before transitioning them to the a "
"remote testnet."
msgstr ""
"Dojo được thiết kế để phát triển nhanh chóng, tự hào có local development "
"environment nhanh như chớp có tên [Katana](./toolchain/katana/overview.md). "
"Katana hoạt động như một blockchain Starknet on-device, cho phép bạn kiểm "
"tra nghiêm ngặt các hợp đồng thông minh của mình trước khi chuyển chúng sang "
"remote testnet."

#: src/deployment/locally.md:5
msgid "Katana Deployments"
msgstr "Triển Khai Katana"

#: src/deployment/locally.md:7
msgid "Deploying to Katana could not be easier."
msgstr "Deploy tới Katana không thể dễ dàng hơn."

#: src/deployment/locally.md:9
msgid ""
"This assumes you have followed the [Quick Start](./getting-started/quick-"
"start.md) guide and have a project initialized."
msgstr ""
"Trong mục này, chúng ta giả định rằng bạn đã làm theo hướng dẫn [Quick Start]"
"(./getting-started/quick-start.md) và đã khởi tạo một dự án."

#: src/deployment/locally.md:11
msgid "From your project directory, run:"
msgstr "Từ thư mục dự án của bạn, hãy chạy:"

#: src/deployment/locally.md:17
msgid "This has started a local Katana which you can now deploy on!"
msgstr ""
"Điều này đã bắt đầu một Katana local mà bây giờ bạn có thể deploy trên đó!"

#: src/deployment/locally.md:19
msgid "Deploying to Katana"
msgstr "Deploying tới Katana"

#: src/deployment/locally.md:21
msgid "To deploy your project to Katana, run:"
msgstr "Để deploy dự án của bạn tới Katana, hãy chạy:"

#: src/deployment/locally.md:27
msgid ""
"Note - this will only work if you have compiled your contracts. If you have "
"not, run:"
msgstr ""
"Lưu ý - command này sẽ chỉ hoạt động nếu bạn đã compile contract của mình. "
"Nếu bạn chưa compile, hãy chạy:"

#: src/deployment/remote.md:1
msgid "Deployment to Remote Network"
msgstr "Deploy đến Remote Network"

#: src/deployment/remote.md:3
msgid "_IMPORTANT: Dojo is unaudited. Use at your own risk._"
msgstr "_QUAN TRỌNG: Dojo chưa được audit. Cân nhắc rủi ro trước khi sử dụng._"

#: src/deployment/remote.md:5
msgid ""
"Dojo makes it easy to deploy to remote networks, you just need to have a "
"valid account and network endpoint."
msgstr ""
"Dojo giúp bạn dễ dàng deploy tới các remote networks, bạn chỉ cần có tài "
"khoản và network endpoint hợp lệ."

#: src/deployment/remote.md:7
msgid "Scarb.toml"
msgstr ""

#: src/deployment/remote.md:9
msgid ""
"```toml\n"
"[package]\n"
"name = \"ohayoo\"\n"
"version = \"0.1.0\"\n"
"cairo-version = \"2.1.1\"\n"
"\n"
"[cairo]\n"
"sierra-replace-ids = true\n"
"\n"
"[dependencies]\n"
"dojo = { git = \"https://github.com/dojoengine/dojo.git\" }\n"
"\n"
"# # Katana\n"
"# rpc_url = \"http://localhost:5050\"\n"
"# account_address = "
"\"0x03ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0\"\n"
"# private_key = "
"\"0x0300001800000000300000180000000000030000000000003006001800006600\"\n"
"\n"
"#Madara\n"
"rpc_url = \"https://api.cartridge.gg/x/shinai/madara\"\n"
"account_address = \"0x2\"\n"
"private_key = "
"\"0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d\"\n"
"#world_address = "
"\"0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201\"\n"
"```"
msgstr ""

#: src/deployment/remote.md:33
msgid "Remote Katana"
msgstr ""

#: src/deployment/remote.md:35
msgid ""
"Katanas are able to be hosted and run as remote testnets, however this is "
"not recommended for production use."
msgstr ""
"Katana có thể được lưu trữ và chạy dưới dạng remote testnets, tuy nhiên, "
"điều này không được khuyến khích sử dụng trong production."

#: src/deployment/remote.md:37
msgid "**todo**: add instructions for deploying to remote katana"
msgstr "**việc cần làm**: thêm hướng dẫn triển khai vào katana từ xa"

#: src/deployment/remote.md:40
msgid "Madara"
msgstr ""

#: src/deployment/remote.md:42
msgid ""
"[Madara](https://github.com/keep-starknet-strange/madara) is a blazinly fast "
"Starknet sequencer. Built on the robust Substrate framework and fast, thanks "
"to Rust 🦀, Madara delivers unmatched performance and scalability to power "
"your Starknet-based Validity Rollup chain."
msgstr ""
"[Madara](https://github.com/keep-starknet-strange/madara) là một sequencer "
"Starknet cực nhanh. Được xây dựng trên Substrate framework mạnh mẽ và nhanh "
"chóng, nhờ có Rust 🦀, Madara mang lại hiệu suất và khả năng mở rộng chưa "
"từng có để cung cấp năng lượng cho Validity Rollup chain của bạn dựa trên "
"Starknet."

#: src/deployment/remote.md:44
msgid "A public Madara testnet is available for deployment:"
msgstr "Mạng testnet Madara công khai có sẵn để thử nghiệm deploy:"

#: src/deployment/remote.md:46
msgid "**Testnet RPC:** https://api.cartridge.gg/x/shinai/madara"
msgstr ""

#: src/deployment/remote.md:48
msgid "You can use the following account to deploy:"
msgstr "Bạn có thể sử dụng tài khoản sau để deploy:"

#: src/deployment/remote.md:50
msgid ""
"```toml\n"
"# ...rest of Scarb.toml\n"
"\n"
"rpc_url = \"https://api.cartridge.gg/x/shinai/madara\"\n"
"account_address = \"0x2\"\n"
"private_key = "
"\"0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d\"\n"
"```"
msgstr ""

#: src/deployment/remote.md:59
msgid "Starknet"
msgstr ""

#: src/deployment/remote.md:61
msgid "**todo**: add instructions for deploying to remote Starknet"
msgstr "**việc cần làm**: thêm hướng dẫn deploy tới Starknet remote"

#: src/tutorial/onchain-chess/index.md:1
msgid "Building a Chess Game"
msgstr "Lập Trình Game Cờ Vua"

#: src/tutorial/onchain-chess/index.md:3
msgid "_\"I just finished reading The Dojo Book. What should I do next?\"_"
msgstr "_\"Tôi vừa đọc xong The Dojo Book. Tiếp theo tôi nên làm gì?\"_"

#: src/tutorial/onchain-chess/index.md:5
msgid ""
"The answers to this question are always \"Make something!\", sometimes "
"followed by a list of cool projects. This is a great answer for some people, "
"but others might be looking for a little more direction."
msgstr ""
"Đối với một vài người thì câu trả lời tốt nhất sẽ là \"Xây dựng World mới "
"theo cách bạn muốn\", đối với vài người khác thì họ sẽ cần một chút chỉ dẫn."

#: src/tutorial/onchain-chess/index.md:7
msgid ""
"This guide is intended to fill the gap between heavily directed beginner "
"tutorials and working on your projects. The primary goal here is to get you "
"to write code. The secondary goal is to get you reading documentation."
msgstr ""
"Hướng dẫn này nhằm lấp đầy khoảng trống giữa các hướng dẫn dành cho người "
"mới và việc xây dựng các dự án. Mục tiêu chính ở đây là giúp bạn code. Mục "
"tiêu thứ yếu là giúp bạn đọc hiểu được tài liệu."

#: src/tutorial/onchain-chess/index.md:9
msgid ""
"If you haven't read the Dojo Book yet, it is highly encouraged for you to do "
"so before starting this project."
msgstr "Nếu bạn chưa đọc Dojo Book, bạn nên đọc trước khi bắt đầu dự án này."

#: src/tutorial/onchain-chess/index.md:11
msgid "What are we building?"
msgstr "Chúng ta đang xây dựng cái gì?"

#: src/tutorial/onchain-chess/index.md:13
msgid ""
"We're building an on-chain chess game contract that lets you start a new "
"game and play chess. This guide does not cover every rules of the chess "
"game. You will build step by step as follows:"
msgstr ""
"Chúng ta đang xây dựng một trò chơi cờ vua on-chain. Nên lưu ý rằng hướng "
"dẫn này không bao gồm mọi quy tắc của trò chơi cờ vua. Bạn sẽ xây dựng từng "
"bước như sau:"

#: src/tutorial/onchain-chess/index.md:15
msgid "A system to spawn all the chess pieces"
msgstr "Một system sinh (spawn) ra tất cả các quân cờ trên bàn cờ"

#: src/tutorial/onchain-chess/index.md:16
msgid "A system to make pieces move"
msgstr "Một system để di chuyển các quân cờ"

#: src/tutorial/onchain-chess/index.md:17
msgid "Add some functions to check a legal move"
msgstr "Thêm một vài hàm để kiểm tra nước đi có hợp lệ hay không"

#: src/tutorial/onchain-chess/index.md:18
msgid "Play chess ♟♙ - integration test!"
msgstr "Chơi thử nào ♟♙ - integration test!"

#: src/tutorial/onchain-chess/index.md:20
msgid ""
"The full code of tutorial is based on [this repo](https://github.com/"
"rkdud007/chess-dojo/tree/tutorialv2)."
msgstr ""
"Full code của bài hướng dẫn [ở repo này](https://github.com/rkdud007/chess-"
"dojo/tree/tutorialv2)."

#: src/tutorial/onchain-chess/index.md:22
msgid ""
"If this seems too hard, don't worry! This guide is for beginners. If you "
"know some basics about Cairo and Dojo, you're good. We won't make a full "
"chess game with all the rules. We're keeping it simple."
msgstr ""
"Nếu như bạn cảm thấy nó khó, đừng lo lắng! Bài hướng dẫn này dành cho những "
"người mới bắt đầu. Miễn là bạn biết & hiểu một chút về căn bản của Cairo & "
"Dojo thì mọi thứ vẫn sẽ ổn. Chúng ta sẽ không tạo ra một trò cờ vua với toàn "
"bộ các quy tắc & luật hiện hành, chúng ta sẽ làm nó càng đơn giản càng tốt "
"để bạn có thể nắm bắt được."

#: src/tutorial/onchain-chess/index.md:24
msgid "What after this guide?"
msgstr "Làm gì sau khi hoàn thành hướng dẫn này ?"

#: src/tutorial/onchain-chess/index.md:26
msgid ""
"We're making another guide to help design the frontend. This will make our "
"chess game complete."
msgstr ""
"Chúng tôi đang làm thêm một bài hướng dẫn khác giúp bạn có thể design "
"frontend. Bài hướng dẫn đó sẽ giúp bạn có thể hoàn thiện game cờ vua on-"
"chain."

#: src/tutorial/onchain-chess/index.md:28
msgid ""
"After you finish all the five chapters, we can move on to the frontend guide."
msgstr ""
"Sau khi bạn hoàn thành toàn bộ 5 phần, bạn có thể hướng đến bài hướng dẫn "
"frontend."

#: src/tutorial/onchain-chess/0-setup.md:3
msgid ""
"_Before starting recommend following the [`hello-dojo`](../../cairo/hello-"
"dojo.md) chapter to gain a basic understanding of the Dojo game._"
msgstr ""
"_Trước khi bắt đầu, bạn nên theo dõi chương [`hello-dojo`](../../cairo/hello-"
"dojo.md) để hiểu cơ bản về các trò chơi Dojo._"

#: src/tutorial/onchain-chess/0-setup.md:5
msgid "Initializing the Project"
msgstr "Khởi tạo dự án"

#: src/tutorial/onchain-chess/0-setup.md:7
msgid ""
"Create a new Dojo project folder. You can name your project what you want."
msgstr "Tạo một thư mục dự án Dojo mới. Bạn có thể đặt tên dự án theo ý mình."

#: src/tutorial/onchain-chess/0-setup.md:13
msgid "Open the project folder."
msgstr "Mở thư mục dự án."

#: src/tutorial/onchain-chess/0-setup.md:19
msgid "And initialize the project using sozo init."
msgstr "Và khởi tạo dự án bằng sozo init."

#: src/tutorial/onchain-chess/0-setup.md:25
msgid "Cleaning Up the Boilerplate"
msgstr "Dọn dẹp những đoạn code được viết sẵn"

#: src/tutorial/onchain-chess/0-setup.md:27
msgid ""
"The project comes with a lot of boilerplate codes. Clear it all. Make sure "
"both `components.cairo` and `systems.cairo` files are empty."
msgstr ""
"Dự án đi kèm với rất nhiều code đã soạn sẵn. Xóa tất cả. Đảm bảo cả hai tệp "
"`components.cairo` và `systems.cairo` đều trống."

#: src/tutorial/onchain-chess/0-setup.md:29
msgid "In `lib.cairo`, retain only:"
msgstr "Trong `lib.cairo`, chỉ giữ lại:"

#: src/tutorial/onchain-chess/0-setup.md:36
msgid "Compile your project with:"
msgstr "Compile dự án của bạn với:"

#: src/tutorial/onchain-chess/0-setup.md:42
msgid "Basic components"
msgstr "Các components cơ bản"

#: src/tutorial/onchain-chess/0-setup.md:44
msgid ""
"While there are many ways to design a chess game using the ECS model, we'll "
"follow this approach:"
msgstr ""
"Mặc dù có nhiều cách để thiết kế một ván cờ bằng kiến trúc ECS, chúng tôi sẽ "
"làm theo phương pháp sau:"

#: src/tutorial/onchain-chess/0-setup.md:46
msgid ""
"Every square of the chess board (e.g., A1) will be treated as an entity. If "
"a piece exists on a square, the square entity will hold that piece."
msgstr ""
"Mỗi ô vuông của bàn cờ (ví dụ: A1) sẽ được coi là một entity. Nếu một quân "
"tồn tại trên một hình vuông thì entity hình vuông đó sẽ giữ quân đó."

#: src/tutorial/onchain-chess/0-setup.md:48
msgid ""
"First, add this basic component to `components.cairo` file. If you are not "
"familar with component syntax in Dojo engine, go back to this [chapter]"
"(../../cairo/components.md)."
msgstr ""
"Đầu tiên, thêm component cơ bản này vào tệp `components.cairo`. Nếu bạn "
"không quen với syntax của component trong Dojo engine, hãy quay lại [chương "
"này](../../cairo/comComponents.md)."

#: src/tutorial/onchain-chess/0-setup.md:78
msgid "Basic systems"
msgstr "Các systems căn bản"

#: src/tutorial/onchain-chess/0-setup.md:80
msgid ""
"Starting from the next chapter, you will implement `initiate` and `move` "
"systems one in each chapter. Let's create each system in its own file for "
"better modularity."
msgstr ""
"Bắt đầu từ chương tiếp theo, bạn sẽ triển khai system `initiate` và `move` "
"trong mỗi chương. Hãy tạo mỗi system trong tệp riêng của nó để có tính mô-"
"đun tốt hơn."

#: src/tutorial/onchain-chess/0-setup.md:82
msgid ""
"Create a `systems` folder at `src`. Create `initiate.cairo`and `move.cairo` "
"two files inside the folder. Each file should contain a basic system "
"structure."
msgstr ""
"Tạo thư mục `systems` tại `src`. Tạo hai tệp `initiate.cairo` và `move."
"cairo` bên trong thư mục. Mỗi tập tin phải chứa một cấu trúc hệ thống "
"(system structure) cơ bản."

#: src/tutorial/onchain-chess/0-setup.md:84
msgid "For example, `initiate.cairo` look like this:"
msgstr "Ví dụ: `initiate.cairo` trông như thế này:"

#: src/tutorial/onchain-chess/0-setup.md:93
msgid "and in `systems.cairo` we will use `initiate_system` like this:"
msgstr ""
"và trong `systems.cairo` chúng ta sẽ sử dụng `initiate_system` như thế này:"

#: src/tutorial/onchain-chess/0-setup.md:101
msgid "Do the same with the other systems. Update `systems.cairo` to:"
msgstr "Làm tương tự với các systems khác. Cập nhật `systems.cairo` thành:"

#: src/tutorial/onchain-chess/0-setup.md:111
msgid "Compile your project"
msgstr "Compile dự án của bạn"

#: src/tutorial/onchain-chess/0-setup.md:113
msgid "Now try `sozo build` to build. Faced some errors?"
msgstr "Bây giờ hãy thử `sozo build` để build dự án. Bạn sẽ gặp lỗi như sau:"

#: src/tutorial/onchain-chess/0-setup.md:119
msgid ""
"You would probably faced some trait implementation errors, which you can "
"implement as a derive like:"
msgstr ""
"Bạn có thể sẽ gặp phải một số lỗi trait implementation mà bạn có thể "
"implement như sau:"

#: src/tutorial/onchain-chess/0-setup.md:151
msgid "Great! then let's solve this error."
msgstr "Tuyệt! Bây giờ hãy giải quyết lỗi này."

#: src/tutorial/onchain-chess/0-setup.md:160
msgid ""
"One thing you have to make sure is, that `<Option<PieceType>>` is the type "
"that we created. So this type does not implement basic traits like SerdeLen. "
"You need to define the implementation by your own."
msgstr ""
"Một điều bạn phải chắc chắn là `<Option<PieceType>>` là type mà chúng ta đã "
"tạo. Vì loại này không implement các trait cơ bản như SerdeLen. Bạn cần phải "
"tự define việc implementation."

#: src/tutorial/onchain-chess/0-setup.md:171
msgid ""
"Fix other issues as above, so that you can run the `sozo build` command runs "
"successfully."
msgstr ""
"Khắc phục các sự cố khác như trên để bạn có thể chạy command `sozo build` "
"thành công."

#: src/tutorial/onchain-chess/0-setup.md:173
msgid "Run test"
msgstr "Chạy thử test"

#: src/tutorial/onchain-chess/0-setup.md:175
msgid ""
"Before proceeding to the next chapter, remember that `sozo build` and `sozo "
"test` are important steps to ensure your code is correct."
msgstr ""
"Trước khi chuyển sang chương tiếp theo, hãy nhớ rằng `sozo build` và `sozo "
"test` là các bước quan trọng để đảm bảo code của bạn chính xác."

#: src/tutorial/onchain-chess/0-setup.md:177
msgid "Run sozo test. Did you face any errors?"
msgstr "Chạy thử Sozo. Bạn có gặp lỗi nào không?"

#: src/tutorial/onchain-chess/0-setup.md:187
msgid ""
"For the no implementation error, implement the PrintTrait to run sozo test "
"successfully. For the not dropped error, add the Drop trait. Address other "
"errors by adding derives or implementing them on a case-by-case basis."
msgstr ""
"Đối với lỗi no implementation, hãy triển khai PrintTrait để chạy sozo test "
"thành công. Đối với lỗi chưa bị loại bỏ, hãy thêm Drop trait. Giải quyết các "
"lỗi khác bằng cách thêm các derives hoặc implement chúng theo từng trường "
"hợp cụ thể."

#: src/tutorial/onchain-chess/0-setup.md:189
msgid "Add more components"
msgstr "Thêm nhiều components hơn"

#: src/tutorial/onchain-chess/0-setup.md:191
msgid ""
"Before you move on, add more components so we can use them in the next "
"chapter when creating systems."
msgstr ""
"Trước khi tiếp tục, hãy thêm nhiều components hơn để chúng ta có thể sử dụng "
"chúng trong chương tiếp theo khi tạo system."

#: src/tutorial/onchain-chess/0-setup.md:193
#: src/tutorial/onchain-chess/1-initiate.md:12
#: src/tutorial/onchain-chess/2-move.md:9
msgid "Requirements"
msgstr "Các yêu cầu"

#: src/tutorial/onchain-chess/0-setup.md:195
msgid "`Color` enum enum with values White and Black"
msgstr "enum `Color` enum với các giá trị White và Black"

#: src/tutorial/onchain-chess/0-setup.md:196
msgid "`Game` component:"
msgstr "Component `Game`:"

#: src/tutorial/onchain-chess/0-setup.md:205
msgid "`GameTurn` component:"
msgstr "Component `GameTurn`:"

#: src/tutorial/onchain-chess/0-setup.md:212
msgid ""
"We will later set game entity composed of the `Game` and `GameTurn` "
"components."
msgstr ""
"Sau này chúng ta sẽ set entity bao gồm các components `Game` và `GameTurn`."

#: src/tutorial/onchain-chess/0-setup.md:213
msgid "Run `sozo build` and `sozo test` and ensure all tests pass."
msgstr "Chạy `sozo build` và `sozo test` và đảm bảo chạy thử thành công."

#: src/tutorial/onchain-chess/0-setup.md:215
msgid ""
"Try to solve on your own, and before you move on check the answer below."
msgstr ""
"Bạn hãy cố gắng tự giải quyết vấn đề và trước khi tiếp tục, hãy kiểm tra câu "
"trả lời bên dưới."

#: src/tutorial/onchain-chess/0-setup.md:220
msgid ""
"```rust,ignore\n"
"use debug::PrintTrait;\n"
"use starknet::ContractAddress;\n"
"\n"
"#[derive(Component, Drop, SerdeLen, Serde)]\n"
"struct Square {\n"
"    #[key]\n"
"    game_id: felt252,\n"
"    #[key]\n"
"    x: u32,\n"
"    #[key]\n"
"    y: u32,\n"
"    piece: Option<PieceType>,\n"
"}\n"
"\n"
"#[derive(Serde, Drop, Copy, PartialEq)]\n"
"enum PieceType {\n"
"    WhitePawn,\n"
"    WhiteKnight,\n"
"    WhiteBishop,\n"
"    WhiteRook,\n"
"    WhiteQueen,\n"
"    WhiteKing,\n"
"    BlackPawn,\n"
"    BlackKnight,\n"
"    BlackBishop,\n"
"    BlackRook,\n"
"    BlackQueen,\n"
"    BlackKing,\n"
"}\n"
"\n"
"#[derive(Serde, Drop, Copy, PartialEq)]\n"
"enum Color {\n"
"    White,\n"
"    Black,\n"
"}\n"
"\n"
"\n"
"impl PieceOptionSerdeLen of dojo::SerdeLen<Option<PieceType>> {\n"
"    #[inline(always)]\n"
"    fn len() -> usize {\n"
"        2\n"
"    }\n"
"}\n"
"\n"
"impl ColorPrintTrait of PrintTrait<Color> {\n"
"    #[inline(always)]\n"
"    fn print(self: Color) {\n"
"        match self {\n"
"            Color::White(_) => {\n"
"                'White'.print();\n"
"            },\n"
"            Color::Black(_) => {\n"
"                'Black'.print();\n"
"            },\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"impl ColorOptionPrintTrait of PrintTrait<Option<Color>> {\n"
"    #[inline(always)]\n"
"    fn print(self: Option<Color>) {\n"
"        match self {\n"
"            Option::Some(color) => {\n"
"                color.print();\n"
"            },\n"
"            Option::None(_) => {\n"
"                'None'.print();\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"\n"
"impl BoardPrintTrait of PrintTrait<(u32, u32)> {\n"
"    #[inline(always)]\n"
"    fn print(self: (u32, u32)) {\n"
"        let (x, y): (u32, u32) = self;\n"
"        x.print();\n"
"        y.print();\n"
"    }\n"
"}\n"
"\n"
"\n"
"impl PieceTypeOptionPrintTrait of PrintTrait<Option<PieceType>> {\n"
"    #[inline(always)]\n"
"    fn print(self: Option<PieceType>) {\n"
"        match self {\n"
"            Option::Some(piece_type) => {\n"
"                piece_type.print();\n"
"            },\n"
"            Option::None(_) => {\n"
"                'None'.print();\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"\n"
"impl PieceTypePrintTrait of PrintTrait<PieceType> {\n"
"    #[inline(always)]\n"
"    fn print(self: PieceType) {\n"
"        match self {\n"
"            PieceType::WhitePawn(_) => {\n"
"                'WhitePawn'.print();\n"
"            },\n"
"            PieceType::WhiteKnight(_) => {\n"
"                'WhiteKnight'.print();\n"
"            },\n"
"            PieceType::WhiteBishop(_) => {\n"
"                'WhiteBishop'.print();\n"
"            },\n"
"            PieceType::WhiteRook(_) => {\n"
"                'WhiteRook'.print();\n"
"            },\n"
"            PieceType::WhiteQueen(_) => {\n"
"                'WhiteQueen'.print();\n"
"            },\n"
"            PieceType::WhiteKing(_) => {\n"
"                'WhiteKing'.print();\n"
"            },\n"
"            PieceType::BlackPawn(_) => {\n"
"                'BlackPawn'.print();\n"
"            },\n"
"            PieceType::BlackKnight(_) => {\n"
"                'BlackKnight'.print();\n"
"            },\n"
"            PieceType::BlackBishop(_) => {\n"
"                'BlackBishop'.print();\n"
"            },\n"
"            PieceType::BlackRook(_) => {\n"
"                'BlackRook'.print();\n"
"            },\n"
"            PieceType::BlackQueen(_) => {\n"
"                'BlackQueen'.print();\n"
"            },\n"
"            PieceType::BlackKing(_) => {\n"
"                'BlackKing'.print();\n"
"            },\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"impl ColorSerdeLen of dojo::SerdeLen<Color> {\n"
"    #[inline(always)]\n"
"    fn len() -> usize {\n"
"        1\n"
"    }\n"
"}\n"
"\n"
"#[derive(Component, Drop, SerdeLen, Serde)]\n"
"struct Game {\n"
"    /// game id, computed as follows pedersen_hash(player1_address, "
"player2_address)\n"
"    #[key]\n"
"    game_id: felt252,\n"
"    winner: Option<Color>,\n"
"    white: ContractAddress,\n"
"    black: ContractAddress\n"
"}\n"
"\n"
"\n"
"#[derive(Component, Drop, SerdeLen, Serde)]\n"
"struct GameTurn {\n"
"    #[key]\n"
"    game_id: felt252,\n"
"    turn: Color,\n"
"}\n"
"\n"
"impl OptionPieceColorSerdeLen of dojo::SerdeLen<Option<Color>> {\n"
"    #[inline(always)]\n"
"    fn len() -> usize {\n"
"        1\n"
"    }\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:399
msgid ""
"Congratulations! You've completed the basic setup for building an on-chain "
"chess game 🎉"
msgstr ""
"Chúc mừng! Bạn đã hoàn thành thiết lập cơ bản để xây dựng một game cờ vua on-"
"chain. 🎉"

#: src/tutorial/onchain-chess/1-initiate.md:1
msgid "1. Initiate System"
msgstr "1. Khởi Tạo System"

#: src/tutorial/onchain-chess/1-initiate.md:3
msgid ""
"This chapter will address implementing `initiate_system`, which spawns the "
"game and squares containing pieces."
msgstr ""
"Chương này sẽ đề cập đến việc implement `initiate_system`, system này sẽ "
"khởi tạo trò chơi và spawn các ô chứa các quân cờ."

#: src/tutorial/onchain-chess/1-initiate.md:5
msgid "What is `initiate_system`?"
msgstr "`initiate_system` là gì?"

#: src/tutorial/onchain-chess/1-initiate.md:7
msgid ""
"To play chess, you need to start the game and spawn the pieces. "
"`initiate_system` will spawn the game entity and then place each piece in "
"its proper position. Ensure the game status matches the correct piece type, "
"and the right piece color is in its designated position on the board."
msgstr ""
"Để chơi cờ vua, bạn cần bắt đầu trò chơi và spawn ra các quân cờ. "
"`initiate_system` sẽ sinh ra entity và sau đó đặt từng quân cờ vào vị trí "
"thích hợp của nó. Đảm bảo trò chơi bắt đầu với đúng loại quân cờ và màu quân "
"cờ phù hợp ở vị trí được chỉ định trên bàn cờ."

#: src/tutorial/onchain-chess/1-initiate.md:14
msgid ""
"_Copy the unit tests below and paste them at the bottom of your `systems/"
"initiate.cairo` file._"
msgstr ""
"_Sao chép các bài unit tests bên dưới và dán chúng vào cuối tệp `systems/"
"initiate.cairo` của bạn._"

#: src/tutorial/onchain-chess/1-initiate.md:16
msgid ""
"Write an `execute` function in the system that accepts the world context, "
"white address, and black address as input."
msgstr ""
"Viết hàm `execute` trong system, hàm này sẽ nhận vào context của world, địa "
"chỉ ví của người chơi bên màu trắng và địa chỉ ví của người chơi bên màu đen "
"làm đầu vào."

#: src/tutorial/onchain-chess/1-initiate.md:17
msgid ""
"Implement the game entity, comprised of the `Game` component and `GameTurn` "
"component we created in the previous step."
msgstr ""
"Implement entity của trò chơi, bao gồm component `Game` và component "
"`GameTurn` mà chúng ta đã tạo ở bước trước."

#: src/tutorial/onchain-chess/1-initiate.md:18
msgid ""
"Implement square entities by `Square` component, from a1 to h8 containing "
"the correct `PieceType`."
msgstr ""
"Implement các entities ô cờ bằng component `Square`, từ a1 đến h8 chứa đúng "
"`PieceType`."

#: src/tutorial/onchain-chess/1-initiate.md:19
msgid "Run `sozo test` and pass all the tests."
msgstr ""
"Chạy `sozo test` và kiểm tra xem có lỗi nào khi chạy các bài test không."

#: src/tutorial/onchain-chess/1-initiate.md:21
#: src/tutorial/onchain-chess/2-move.md:29
msgid "Test Flow"
msgstr ""

#: src/tutorial/onchain-chess/1-initiate.md:23
msgid ""
"Spawn the test world that imports the components and systems used in testing."
msgstr ""
"Tạo ra test world để import các components và systems sẽ được sử dụng trong "
"quá trình test."

#: src/tutorial/onchain-chess/1-initiate.md:24
msgid ""
"Execute `initiate_system` by providing white and black player's wallet "
"addresses as inputs."
msgstr ""
"Thực thi `initiate_system` bằng cách cung cấp địa chỉ ví của người chơi quân "
"trắng và quân đen làm đầu vào (input)."

#: src/tutorial/onchain-chess/1-initiate.md:25
msgid ""
"Retrieve the game entity and piece entity created during `initiate_system`."
msgstr ""
"Truy xuất game entity và entity quân cờ được tạo ra trong lúc "
"`initiate_system`."

#: src/tutorial/onchain-chess/1-initiate.md:26
msgid "Ensure the game has been correctly created."
msgstr "Đảm bảo trò chơi đã được tạo đúng cách."

#: src/tutorial/onchain-chess/1-initiate.md:27
msgid "Verify that each `Piece` is located in the correct `Square`."
msgstr "Xác minh rằng mỗi `Piece` được đặt đúng `Square`."

#: src/tutorial/onchain-chess/1-initiate.md:29
#: src/tutorial/onchain-chess/2-move.md:35
msgid "Unit Tests"
msgstr ""

#: src/tutorial/onchain-chess/1-initiate.md:31
msgid ""
"```rust,ignore\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use starknet::ContractAddress;\n"
"    use dojo::test_utils::spawn_test_world;\n"
"    use dojo_chess::components::{Game, game, GameTurn, game_turn, Square, "
"square, PieceType};\n"
"\n"
"    use dojo_chess::systems::initiate_system;\n"
"    use array::ArrayTrait;\n"
"    use core::traits::Into;\n"
"    use dojo::world::IWorldDispatcherTrait;\n"
"    use core::array::SpanTrait;\n"
"\n"
"    #[test]\n"
"    #[available_gas(3000000000000000)]\n"
"    fn test_initiate() {\n"
"        let white = starknet::contract_address_const::<0x01>();\n"
"        let black = starknet::contract_address_const::<0x02>();\n"
"\n"
"        // components\n"
"        let mut components = array::ArrayTrait::new();\n"
"        components.append(game::TEST_CLASS_HASH);\n"
"        components.append(game_turn::TEST_CLASS_HASH);\n"
"        components.append(square::TEST_CLASS_HASH);\n"
"\n"
"        //systems\n"
"        let mut systems = array::ArrayTrait::new();\n"
"        systems.append(initiate_system::TEST_CLASS_HASH);\n"
"        let world = spawn_test_world(components, systems);\n"
"\n"
"        let mut calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        calldata.append(white.into());\n"
"        calldata.append(black.into());\n"
"        world.execute('initiate_system'.into(), calldata);\n"
"\n"
"        let game_id = pedersen(white.into(), black.into());\n"
"\n"
"        //get game\n"
"        let game = get!(world, (game_id), (Game));\n"
"        assert(game.white == white, 'white address is incorrect');\n"
"        assert(game.black == black, 'black address is incorrect');\n"
"\n"
"        //get a1 square\n"
"        let a1 = get!(world, (game_id, 0, 0), (Square));\n"
"        match a1.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhiteRook, 'should be White "
"Rook');\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece'),\n"
"        };\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/1-initiate.md:85
#: src/tutorial/onchain-chess/2-move.md:108
#: src/tutorial/onchain-chess/3-legal.md:165
msgid "Need help?"
msgstr "Cần giúp đỡ?"

#: src/tutorial/onchain-chess/1-initiate.md:87
#: src/tutorial/onchain-chess/2-move.md:110
#: src/tutorial/onchain-chess/3-legal.md:167
msgid ""
"If you're stuck, don't hesitate to ask questions at the [Dojo community]"
"(https://discord.gg/akd2yfuRS3)!"
msgstr ""
"Nếu bạn gặp khó khăn, đừng ngần ngại đặt câu hỏi tại [Cộng đồng Dojo]"
"(https://discord.gg/akd2yfuRS3)!"

#: src/tutorial/onchain-chess/1-initiate.md:89
msgid ""
"You can find the [answer](https://github.com/rkdud007/chess-dojo/blob/"
"tutorialv2/src/systems/initiate.cairo) for chapter 1 here."
msgstr ""
"Bạn có thể tìm thấy [câu trả lời](https://github.com/rkdud007/chess-dojo/"
"blob/tutorialv2/src/systems/initiate.cairo) cho chương 1 tại đây."

#: src/tutorial/onchain-chess/2-move.md:1
msgid "2. Move System"
msgstr "2. System Move"

#: src/tutorial/onchain-chess/2-move.md:3
msgid ""
"This chapter will address the implementation of `move_system`, which "
"relocates a piece on the board."
msgstr ""
"Chương này sẽ đề cập đến việc implement `move_system`, dùng để di chuyển một "
"quân cờ trên bàn cờ."

#: src/tutorial/onchain-chess/2-move.md:5
msgid "What is `move_system`?"
msgstr "`move_system` là gì?"

#: src/tutorial/onchain-chess/2-move.md:7
msgid ""
"To play chess, one must move the pieces on the board. Since we represent "
"piece locations with a Square entity, the `move_system` retrieves the "
"current position as (x,y). It also fetches the next position as (x,y), "
"treating the piece in the current position square as the target to be moved "
"to the next position."
msgstr ""
"Để chơi cờ vua, người ta phải di chuyển các quân cờ trên bàn cờ. Vì chúng ta "
"biểu thị các vị trí của các ô trên bàn cờ bằng entity Square nên "
"`move_system` truy xuất vị trí hiện tại dưới dạng (x,y). Nó cũng tìm nạp vị "
"trí tiếp theo là (x,y), coi quân cờ trong vị trí ô hiện tại là mục tiêu cần "
"được di chuyển đến vị trí tiếp theo."

#: src/tutorial/onchain-chess/2-move.md:11
msgid ""
"_Copy the unit tests below and paste them at the bottom of your `systems/"
"move.cairo` file._"
msgstr ""
"_Sao chép các unit tests bên dưới và dán chúng vào cuối tệp `systems/move."
"cairo` của bạn._"

#: src/tutorial/onchain-chess/2-move.md:13
msgid "Write an `execute` function in the system with the following inputs:"
msgstr "Viết hàm `execute` trong hệ thống với các đầu vào sau:"

#: src/tutorial/onchain-chess/2-move.md:25
msgid ""
"Update the Square with the `next_position` to contain the new piece and "
"ensure the Square with the `curr_position` no longer holds a piece."
msgstr ""
"Cập nhật Square với `next_position` để chứa quân cờ mới và đảm bảo "
"`curr_position` của Square không còn giữ quân cờ nữa."

#: src/tutorial/onchain-chess/2-move.md:27
msgid "Run `sozo test` and ensure all tests pass."
msgstr "Chạy `sozo test` và đảm bảo tất cả các bài test đều vượt qua."

#: src/tutorial/onchain-chess/2-move.md:31
msgid "Follow the same logic as `test_initiate` from the previous chapter."
msgstr "Hãy làm theo logic tương tự như `test_initiate` ở chương trước."

#: src/tutorial/onchain-chess/2-move.md:32
msgid "Move the White Knight from (1,0) to (2,2) using the `move_system`."
msgstr ""
"Di chuyển quân Knight Trắng từ (1,0) đến (2,2) bằng cách sử dụng "
"`move_system`."

#: src/tutorial/onchain-chess/2-move.md:33
msgid ""
"Retrieve the updated position and verify that the piece has successfully "
"moved to its new location."
msgstr ""
"Truy xuất vị trí đã cập nhật và xác minh rằng quân cờ đó đã được di chuyển "
"thành công đến vị trí mới."

#: src/tutorial/onchain-chess/2-move.md:37
msgid ""
"```rust,ignore\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use starknet::ContractAddress;\n"
"    use dojo::test_utils::spawn_test_world;\n"
"    use dojo_chess::components::{Game, game, GameTurn, game_turn, Square, "
"square, PieceType};\n"
"\n"
"    use dojo_chess::systems::initiate_system;\n"
"    use dojo_chess::systems::move_system;\n"
"    use array::ArrayTrait;\n"
"    use core::traits::Into;\n"
"    use dojo::world::IWorldDispatcherTrait;\n"
"    use core::array::SpanTrait;\n"
"\n"
"    #[test]\n"
"    #[available_gas(3000000000000000)]\n"
"    fn test_move() {\n"
"        let white = starknet::contract_address_const::<0x01>();\n"
"        let black = starknet::contract_address_const::<0x02>();\n"
"\n"
"        // components\n"
"        let mut components = array::ArrayTrait::new();\n"
"        components.append(game::TEST_CLASS_HASH);\n"
"        components.append(game_turn::TEST_CLASS_HASH);\n"
"        components.append(square::TEST_CLASS_HASH);\n"
"\n"
"        //systems\n"
"        let mut systems = array::ArrayTrait::new();\n"
"        systems.append(initiate_system::TEST_CLASS_HASH);\n"
"        systems.append(move_system::TEST_CLASS_HASH);\n"
"        let world = spawn_test_world(components, systems);\n"
"\n"
"        // initiate\n"
"        let mut calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        calldata.append(white.into());\n"
"        calldata.append(black.into());\n"
"        world.execute('initiate_system'.into(), calldata);\n"
"\n"
"        let game_id = pedersen(white.into(), black.into());\n"
"\n"
"         //White Knight is in (1,0)\n"
"        let b1 = get!(world, (game_id, 1, 0), (Square));\n"
"        match b1.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhiteKnight, 'should be White "
"Knight in (1,0)');\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece in (1,0)'),\n"
"        };\n"
"\n"
"        // Move White Knight (1,0) -> (2,2)\n"
"        let mut move_calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        move_calldata.append(1);\n"
"        move_calldata.append(0);\n"
"        move_calldata.append(2);\n"
"        move_calldata.append(2);\n"
"        move_calldata.append(white.into());\n"
"        move_calldata.append(game_id);\n"
"        world.execute('move_system'.into(), move_calldata);\n"
"\n"
"        //White Knight is in (2,2)\n"
"        let c3 = get!(world, (game_id, 2, 2), (Square));\n"
"        match c3.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhiteKnight, 'should be White "
"Knight in (2,2)');\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece in (2,2)'),\n"
"        };\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/3-legal.md:3
msgid "In this chapter, we'll make functions to check:"
msgstr "Trong chương này, chúng ta sẽ tạo các hàm để kiểm tra:"

#: src/tutorial/onchain-chess/3-legal.md:5
msgid "If the next move goes outside the board."
msgstr "Nếu nước đi tiếp theo đi ra ngoài bàn cờ."

#: src/tutorial/onchain-chess/3-legal.md:6
msgid "If there's a piece that can be captured."
msgstr "Nếu có một quân cờ có thể bị ăn."

#: src/tutorial/onchain-chess/3-legal.md:7
msgid "If the next move is allowed for the type of piece."
msgstr "Nếu bước đi tiếp theo hợp lệ đối với quân cờ đó."

#: src/tutorial/onchain-chess/3-legal.md:8
msgid "If the user can allow to make a action (based on the piece's color)."
msgstr ""
"Nếu người dùng có thể cho phép thực hiện một hành động (dựa trên màu sắc của "
"quân cờ)."

#: src/tutorial/onchain-chess/3-legal.md:9
msgid "... You can also add other custom check functions."
msgstr "... Bạn cũng có thể thêm các chức năng kiểm tra tùy chỉnh khác."

#: src/tutorial/onchain-chess/3-legal.md:11
msgid "Make Check Functions"
msgstr "Viết Các Hàm Kiểm Tra"

#: src/tutorial/onchain-chess/3-legal.md:13
msgid ""
"We need to add some check functions in `move_system`. These will help make "
"sure the next move is allowed."
msgstr ""
"Chúng ta cần thêm một số hàm kiểm tra trong `move_system`. Những hàm này sẽ "
"giúp đảm bảo rằng bước đi tiếp theo được cho phép."

#: src/tutorial/onchain-chess/3-legal.md:15
msgid "See if the next spot is allowed for the type of piece moving."
msgstr ""
"Xem liệu vị trí tiếp theo là hợp lệ để quân cờ di chuyển đến hay không."

#: src/tutorial/onchain-chess/3-legal.md:23
msgid "See if the next spot is still on the board."
msgstr "Xem liệu vị trí tiếp theo có còn trên bàn cờ hay không."

#: src/tutorial/onchain-chess/3-legal.md:29
msgid ""
"See if the person trying the move is doing it at the right time and with "
"their piece color."
msgstr ""
"Xem liệu người chơi đang thử di chuyển quân cờ có di chuyển quân cờ trong "
"khi đang là lượt của họ và liệu có đúng màu quân cờ của họ hay không."

#: src/tutorial/onchain-chess/3-legal.md:35
msgid ""
"You can also add other check functions to be extra sure the move is allowed."
msgstr ""
"Bạn cũng có thể thêm các hàm kiểm tra khác để chắc chắn rằng việc di chuyển "
"quân cờ được cho phép."

#: src/tutorial/onchain-chess/3-legal.md:37
msgid ""
"Once you've made these check functions, you can use them in the main "
"`move_system` function. You can decide how to set them up and which ones to "
"use. We'll give an example to help:"
msgstr ""
"Khi đã code xong các hàm kiểm tra này, bạn có thể sử dụng chúng trong hàm "
"`move_system` chính. Bạn có thể quyết định cách thiết lập chúng và cũng có "
"thể quyết định xem bạn sẽ sử dụng cái nào. Chúng tôi sẽ đưa ra một ví dụ để "
"bạn dễ hình dung hơn:"

#: src/tutorial/onchain-chess/3-legal.md:39
msgid ""
"```rust,ignore\n"
"    fn execute(\n"
"        ctx: Context,\n"
"        curr_position: (u32, u32),\n"
"        next_position: (u32, u32),\n"
"        caller: ContractAddress,\n"
"        game_id: felt252\n"
"    ) {\n"
"        //... upper code is the same\n"
"        //Check if next_position is out of board or not\n"
"        assert(is_out_of_board(next_position), 'Should be inside board');\n"
"\n"
"        //Check if this is the right piece type move\n"
"\n"
"        assert(\n"
"            is_right_piece_move(current_square.piece, curr_position, "
"next_position),\n"
"            'Should be right piece move'\n"
"        );\n"
"\n"
"        let target_piece = current_square.piece;\n"
"\n"
"        // make current_square piece none and move piece to next_square\n"
"        current_square.piece = Option::None(());\n"
"        let mut next_square = get!(ctx.world, (game_id, next_x, next_y), "
"(Square));\n"
"\n"
"        //Check the piece already in next_suqare\n"
"        let maybe_next_square_piece = next_square.piece;\n"
"        match maybe_next_square_piece {\n"
"            Option::Some(maybe_piece) => {\n"
"                if is_piece_is_mine(maybe_piece) {\n"
"                    panic(array!['Already same color piece exist'])\n"
"                } else {\n"
"                    //Occupy the piece\n"
"                    next_square.piece = target_piece;\n"
"                }\n"
"            },\n"
"            //if not exist, then just move the original piece\n"
"            Option::None(_) => {\n"
"                next_square.piece = target_piece;\n"
"            },\n"
"        };\n"
"        // ... below code is the same\n"
"\n"
"    }\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/3-legal.md:85
msgid "Testing Each Function"
msgstr "Kiểm Tra Từng Hàm"

#: src/tutorial/onchain-chess/3-legal.md:87
msgid ""
"Since we have different check functions, we need to test each one. To make "
"this easier, let's use parts that are the same for many tests."
msgstr ""
"Vì chúng ta có các hàm kiểm tra khác nhau nên chúng ta cần kiểm tra từng "
"hàm. Để thực hiện việc này dễ dàng hơn, hãy sử dụng các phần giống nhau cho "
"nhiều bài test."

#: src/tutorial/onchain-chess/3-legal.md:89
msgid ""
"First, make a helper function called `init_world_test`. This will give back "
"an `IWorldDispatcher` that we can use many times in the move system tests."
msgstr ""
"Đầu tiên, tạo một hàm trợ giúp (helper function) có tên `init_world_test`. "
"Điều này sẽ trả về một `IWorldDispatcher` mà chúng ta có thể sử dụng nhiều "
"lần trong các bài thử nghiệm system move."

#: src/tutorial/onchain-chess/3-legal.md:91
msgid ""
"```rust,ignore\n"
"    #[test]\n"
"    #[available_gas(3000000000000000)]\n"
"    fn init_world_test() -> IWorldDispatcher {\n"
"        let white = starknet::contract_address_const::<0x01>();\n"
"        let black = starknet::contract_address_const::<0x02>();\n"
"\n"
"        // components\n"
"        let mut components = array::ArrayTrait::new();\n"
"        components.append(game::TEST_CLASS_HASH);\n"
"        components.append(game_turn::TEST_CLASS_HASH);\n"
"        components.append(square::TEST_CLASS_HASH);\n"
"\n"
"        //systems\n"
"        let mut systems = array::ArrayTrait::new();\n"
"        systems.append(initiate_system::TEST_CLASS_HASH);\n"
"        systems.append(move_system::TEST_CLASS_HASH);\n"
"        let world = spawn_test_world(components, systems);\n"
"\n"
"        let mut calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        calldata.append(white.into());\n"
"        calldata.append(black.into());\n"
"        world.execute('initiate_system'.into(), calldata);\n"
"        world\n"
"    }\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/3-legal.md:118
msgid "Then, our main `test_move` function will be simpler."
msgstr "Sau đó, hàm `test_move` chính của chúng ta sẽ đơn giản hơn."

#: src/tutorial/onchain-chess/3-legal.md:120
msgid ""
"```rust,ignore\n"
"    #[test]\n"
"    #[available_gas(3000000000000000)]\n"
"    fn test_move() {\n"
"        let white = starknet::contract_address_const::<0x01>();\n"
"        let black = starknet::contract_address_const::<0x02>();\n"
"        let world = init_world_test();\n"
"        let game_id = pedersen(white.into(), black.into());\n"
"        // other codes are same\n"
"    }\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/3-legal.md:132
msgid ""
"Now we can make tests that show errors if we try moves that aren't allowed. "
"Let's make a `test_piecetype_illegal` function. This will check if the "
"`is_right_piece_move` function, that you implemented in the move system, "
"works right."
msgstr ""
"Bây giờ chúng ta có thể chạy các test để phát hiện lỗi nếu chúng ta thử "
"những hành động không được phép. Hãy tạo một hàm `test_ Piecetype_illegal`. "
"Điều này sẽ kiểm tra xem hàm `is_right_ Piece_move` mà bạn đã triển khai "
"trong hệ thống di chuyển có hoạt động đúng hay không."

#: src/tutorial/onchain-chess/3-legal.md:134
msgid ""
"```rust,ignore\n"
"    #[test]\n"
"    #[should_panic]\n"
"    fn test_piecetype_ilegal() {\n"
"        let white = starknet::contract_address_const::<0x01>();\n"
"        let black = starknet::contract_address_const::<0x02>();\n"
"        let world = init_world_test();\n"
"        let game_id = pedersen(white.into(), black.into());\n"
"\n"
"        let b1 = get!(world, (game_id, 1, 0), (Square));\n"
"        match b1.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhiteKnight, 'should be White "
"Knight');\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece'),\n"
"        };\n"
"\n"
"        // Knight cannot move to that square\n"
"        let mut move_calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        move_calldata.append(1);\n"
"        move_calldata.append(0);\n"
"        move_calldata.append(2);\n"
"        move_calldata.append(3);\n"
"        move_calldata.append(white.into());\n"
"        move_calldata.append(game_id);\n"
"        world.execute('move_system'.into(), move_calldata);\n"
"    }\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/3-legal.md:163
msgid ""
"Finish by making your tests. These should find wrong moves and give back "
"errors."
msgstr ""
"Kết thúc bằng cách chạy các bài test của bạn. Những bài test này sẽ tìm ra "
"những bước di chuyển sai và trả về lỗi."

#: src/tutorial/onchain-chess/4-test.md:1
msgid "4. Test Contract"
msgstr ""

#: src/tutorial/onchain-chess/4-test.md:3
msgid ""
"In this chapter, we'll use everything we've learned to run a full chess game "
"scenario."
msgstr ""
"Trong chương này, chúng ta sẽ sử dụng mọi thứ đã học để vận hành một kịch "
"bản ván cờ đầy đủ."

#: src/tutorial/onchain-chess/4-test.md:5
msgid "Here's what we'll do in our test:"
msgstr "Đây là những gì chúng ta sẽ làm trong bài test:"

#: src/tutorial/onchain-chess/4-test.md:7
msgid "Spawn `white_pawn_1` to (0,1)"
msgstr "Spawn `white_pawn_1` tại (0,1)"

#: src/tutorial/onchain-chess/4-test.md:8
msgid "Move `white_pawn_1` to (0,3)"
msgstr "Di chuyển `white_pawn_1` đến (0,3)"

#: src/tutorial/onchain-chess/4-test.md:9
msgid "Move `black_pawn_2` to (1,6)"
msgstr "Di chuyển `black_pawn_2` đến (1,6)"

#: src/tutorial/onchain-chess/4-test.md:10
msgid "Move `white_pawn_1` to (0,4)"
msgstr "Di chuyển `white_pawn_1` đến (0,4)"

#: src/tutorial/onchain-chess/4-test.md:11
msgid "Move `black_pawn_2` to (1,5)"
msgstr "Di chuyển `black_pawn_2` đến (1,5)"

#: src/tutorial/onchain-chess/4-test.md:12
msgid "Move `white_pawn_1` to (1,5)"
msgstr "Move `white_pawn_1` to (1,5)"

#: src/tutorial/onchain-chess/4-test.md:13
msgid "Capture `black_pawn_2`"
msgstr "Ăn quân `black_pawn_2`"

#: src/tutorial/onchain-chess/4-test.md:15
msgid ""
"To place the pieces, use our `initiate_system`. For moving them, use the "
"`move_system`. Remember to check if a piece can be captured when using "
"`move_system`."
msgstr ""
"Để đặt các quân cờ, hãy sử dụng `initiate_system`. Để di chuyển chúng, hãy "
"sử dụng `move_system`. Hãy nhớ kiểm tra xem có thể ăn được một quân cờ hay "
"không khi sử dụng `move_system`."

#: src/tutorial/onchain-chess/4-test.md:17
msgid "Before we get to the code, set up your integration test like this:"
msgstr ""
"Trước khi đến giai đoạn code, hãy thiết lập integration test của bạn như thế "
"này:"

#: src/tutorial/onchain-chess/4-test.md:19
msgid "Copy the test below and add it to your `src/tests.cairo` file."
msgstr ""
"Sao chép bài test bên dưới và thêm nó vào tệp `src/tests.cairo` của bạn."

#: src/tutorial/onchain-chess/4-test.md:20
msgid ""
"Make a `test.cairo` in your src and update `lib.cairo` by adding the `mod "
"tests;` line."
msgstr ""
"Tạo một tệp `test.cairo` trong src của bạn và cập nhật `lib.cairo` bằng cách "
"thêm dòng `mod test;`."

#: src/tutorial/onchain-chess/4-test.md:22
msgid "Full Code"
msgstr ""

#: src/tutorial/onchain-chess/4-test.md:24
msgid ""
"```rust,ignore\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use starknet::ContractAddress;\n"
"    use dojo::test_utils::spawn_test_world;\n"
"    use dojo_chess::components::{Game, game, GameTurn, game_turn, Square, "
"square, PieceType};\n"
"\n"
"    use dojo_chess::systems::initiate_system;\n"
"    use dojo_chess::systems::move_system;\n"
"    use array::ArrayTrait;\n"
"    use core::traits::Into;\n"
"    use dojo::world::IWorldDispatcherTrait;\n"
"    use core::array::SpanTrait;\n"
"\n"
"\n"
"    #[test]\n"
"    #[available_gas(3000000000000000)]\n"
"    fn integration() {\n"
"        let white = starknet::contract_address_const::<0x01>();\n"
"        let black = starknet::contract_address_const::<0x02>();\n"
"\n"
"        // components\n"
"        let mut components = array::ArrayTrait::new();\n"
"        components.append(game::TEST_CLASS_HASH);\n"
"        components.append(game_turn::TEST_CLASS_HASH);\n"
"        components.append(square::TEST_CLASS_HASH);\n"
"\n"
"        //systems\n"
"        let mut systems = array::ArrayTrait::new();\n"
"        systems.append(initiate_system::TEST_CLASS_HASH);\n"
"        systems.append(move_system::TEST_CLASS_HASH);\n"
"        let world = spawn_test_world(components, systems);\n"
"\n"
"        // initiate\n"
"        let mut calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        calldata.append(white.into());\n"
"        calldata.append(black.into());\n"
"        world.execute('initiate_system'.into(), calldata);\n"
"\n"
"        let game_id = pedersen(white.into(), black.into());\n"
"\n"
"        //White pawn is now in (0,1)\n"
"        let a2 = get!(world, (game_id, 0, 1), (Square));\n"
"        match a2.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhitePawn, \"should be White Pawn "
"in (0,1)\");\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece in (0,1)),\n"
"        };\n"
"\n"
"        //Black pawn is now in (1,6)\n"
"        let b7 = get!(world, (game_id, 1, 6), (Square));\n"
"        match b7.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::BlackPawn, \"should be Black Pawn "
"in (1,6)\");\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece in (1,6)),\n"
"        };\n"
"\n"
"        //Move White Pawn to (0,3)\n"
"        let mut move_calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        move_calldata.append(0);\n"
"        move_calldata.append(1);\n"
"        move_calldata.append(0);\n"
"        move_calldata.append(3);\n"
"        move_calldata.append(white.into());\n"
"        move_calldata.append(game_id);\n"
"        world.execute('move_system'.into(), move_calldata);\n"
"\n"
"        //White pawn is now in (0,3)\n"
"        let a4 = get!(world, (game_id, 0, 3), (Square));\n"
"        match a4.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhitePawn, \"should be White Pawn "
"in (0,3)\");\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece in (0,3)),\n"
"        };\n"
"\n"
"        //Move black Pawn to (1,4)\n"
"        let mut move_calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        move_calldata.append(1);\n"
"        move_calldata.append(6);\n"
"        move_calldata.append(1);\n"
"        move_calldata.append(4);\n"
"        move_calldata.append(black.into());\n"
"        move_calldata.append(game_id);\n"
"        world.execute('move_system'.into(), move_calldata);\n"
"\n"
"        //Black pawn is now in (1,4)\n"
"        let b5 = get!(world, (game_id, 1, 4), (Square));\n"
"        match b5.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::BlackPawn, \"should be Black "
"Pawn  in (1,4)\");\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece  in (1,4)),\n"
"        };\n"
"\n"
"        // Move White Pawn to (1,4)\n"
"        // Capture black pawn\n"
"        let mut move_calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        move_calldata.append(0);\n"
"        move_calldata.append(3);\n"
"        move_calldata.append(1);\n"
"        move_calldata.append(4);\n"
"        move_calldata.append(white.into());\n"
"        move_calldata.append(game_id);\n"
"        world.execute('move_system'.into(), move_calldata);\n"
"\n"
"        let b5 = get!(world, (game_id, 1, 4), (Square));\n"
"        match b5.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhitePawn, \"should be WhitePawn  "
"in (1,4)\");\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece in (1,4)),\n"
"        };\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/4-test.md:143
msgid "Diving into the Code"
msgstr "Đi sâu vào Code"

#: src/tutorial/onchain-chess/4-test.md:145
msgid "First, we'll set up the players and their colors."
msgstr "Đầu tiên, chúng ta sẽ thiết lập người chơi và màu của họ."

#: src/tutorial/onchain-chess/4-test.md:152
msgid ""
"We should list both Components and Systems in arrays, with each having "
"CLASS_HASH as elements."
msgstr ""
"Chúng ta nên liệt kê cả Components và Systems trong array, mỗi array sẽ có "
"phần tử CLASS_HASH."

#: src/tutorial/onchain-chess/4-test.md:154
msgid ""
"```rust,ignore\n"
"// components\n"
"let mut components = array::ArrayTrait::new();\n"
"components.append(game::TEST_CLASS_HASH);\n"
"components.append(game_turn::TEST_CLASS_HASH);\n"
"components.append(square::TEST_CLASS_HASH);\n"
"\n"
"//systems\n"
"let mut systems = array::ArrayTrait::new();\n"
"systems.append(initiate_system::TEST_CLASS_HASH);\n"
"systems.append(move_system::TEST_CLASS_HASH);\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/4-test.md:167
msgid "Next, we'll create our game world."
msgstr "Tiếp theo, chúng ta sẽ tạo World của trò chơi của chính mình."

#: src/tutorial/onchain-chess/4-test.md:173
msgid ""
"We use `initiate_system` to put our Square pieces on the board. Each Square "
"holds a piece. The system's execute function needs some input, which we give "
"it as calldata."
msgstr ""
"Chúng ta sử dụng `initiate_system` để đặt các Square lên bàn cờ. Mỗi Square "
"sẽ chứa một quân cờ. Hàm execute của system cần một số input mà chúng ta sẽ "
"truyền vào dưới dạng calldata."

#: src/tutorial/onchain-chess/4-test.md:175
msgid ""
"```rust,ignore\n"
"        // initiate\n"
"        let mut calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        calldata.append(white.into());\n"
"        calldata.append(black.into());\n"
"        world.execute('initiate_system'.into(), calldata);\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/4-test.md:183
msgid ""
"Let's check if a White pawn is at (0,1). Remember, to get a piece that "
"exists on the square, you need to use the keys of the `Square` component, "
"which are `game_id`, `x`, and `y`. Do the same check for the Black Pawn."
msgstr ""
"Hãy kiểm tra xem quân Tốt Trắng có ở (0,1) hay không. Hãy nhớ rằng, để khiến "
"một quân cờ tồn tại, bạn cần sử dụng các keys của component `Square`, đó là "
"`game_id`, `x` và `y`. Hãy thử làm điều tương tự nhưng lần này là cho Tốt "
"Đen."

#: src/tutorial/onchain-chess/4-test.md:185
msgid ""
"```rust,ignore\n"
"        //White pawn is now in (0,1)\n"
"        let a2 = get!(world, (game_id, 0, 1), (Square));\n"
"        match a2.piece {\n"
"            Option::Some(piece) => {\n"
"                assert(piece == PieceType::WhitePawn, \"should be White Pawn "
"in (0,1)\");\n"
"            },\n"
"            Option::None(_) => assert(false, 'should have piece in (0,1)),\n"
"        };\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/4-test.md:196
msgid ""
"After setting up the board, use `move_system` to make moves. Provide the "
"current position, the next position, the player's address, and the game id."
msgstr ""
"Sau khi thiết lập bàn cờ, hãy sử dụng `move_system` để thực hiện các bước di "
"chuyển. Hãy truyền vào `move_system` vị trí hiện tại của quân cờ, vị trí "
"tiếp theo mà bạn muốn di chuyển quân cờ đến, địa chỉ ví của người chơi và id "
"trò chơi."

#: src/tutorial/onchain-chess/4-test.md:198
msgid ""
"```rust,ignore\n"
" //Move White Pawn to (0,3)\n"
"        let mut move_calldata = array::ArrayTrait::<core::felt252>::new();\n"
"        move_calldata.append(0);\n"
"        move_calldata.append(1);\n"
"        move_calldata.append(0);\n"
"        move_calldata.append(3);\n"
"        move_calldata.append(white.into());\n"
"        move_calldata.append(game_id);\n"
"        world.execute('move_system'.into(), move_calldata);\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/4-test.md:210
msgid "Keep moving pieces and checking if they're in the right places."
msgstr ""
"Tiếp tục di chuyển các quân cờ và kiểm tra xem chúng có ở đúng vị trí không."

#: src/tutorial/onchain-chess/4-test.md:212
msgid "Congratulations!"
msgstr "Chúc mừng!"

#: src/tutorial/onchain-chess/4-test.md:214
msgid ""
"You've made the basic contracts for a chess game using the Dojo engine! This "
"tutorial was just the beginning. There are many ways to make the game "
"better, like optimizing parts, adding checks, or considering special cases. "
"If you want to do more with this chess game, try these challenges:"
msgstr ""
"Bạn đã lập các contract cơ bản cho một trò chơi cờ vua on-chain bằng Dojo! "
"Hướng dẫn này chỉ là sự khởi đầu nho nhỏ, đừng quên rằng có rất nhiều cách "
"để làm cho trò chơi trở nên tốt hơn, như tối ưu hóa các phần nhỏ, thêm các "
"bài test hoặc xem xét các trường hợp đặc biệt. Nếu bạn muốn làm được nhiều "
"hơn với trò chơi cờ vua này, hãy thử những thử thách sau:"

#: src/tutorial/onchain-chess/4-test.md:216
msgid ""
"Make an `initiate_system` that uses lazy init. If you're unsure about lazy "
"init, [read up on it](https://en.wikipedia.org/wiki/Lazy_initialization). "
"This can help make your game actions more efficient."
msgstr ""
"Tạo một `initiate_system` sử dụng lazy init. Nếu bạn không chắc chắn về lazy "
"init, [hãy đọc ở đây](https://en.wikipedia.org/wiki/Lazy_initialization). "
"Điều này có thể giúp thực hiện các thao tác trong trò chơi của bạn hiệu quả "
"hơn."

#: src/tutorial/onchain-chess/4-test.md:217
msgid ""
"Add a checkmate feature. Our game doesn't end now, so decide when it should!"
msgstr ""
"Thêm tính năng chiếu tướng. Hiện tại trò chơi của chúng ta chưa có bất kì "
"điều kiện gì để kết thúc trò chơi, vì vậy hãy code thêm tính năng chiếu "
"tướng!"

#: src/tutorial/onchain-chess/4-test.md:218
msgid ""
"Include special moves like castling, En Passant Capture, or Pawn Promotion."
msgstr ""
"Hãy thêm cả các nước đi đặc biệt như là Nhập Thành, Phong Cấp cho quân Tốt."

#: src/tutorial/onchain-chess/4-test.md:219
msgid ""
"Make your own chess rules! You could even create your own version of the "
"[immortal game](https://immortal.game/)"
msgstr ""
"Hãy tạo ra luật chơi cờ vua của riêng bạn! Bạn thậm chí có thể tạo phiên bản "
"[cờ bất tử] của riêng mình (https://immortal.game/)"

#: src/tutorial/onchain-chess/4-test.md:221
msgid ""
"Lastly, share your project with others in the [Dojo community](https://"
"discord.gg/akd2yfuRS3)!"
msgstr ""
"Cuối cùng, hãy chia sẻ dự án của bạn với những người khác trong [cộng đồng "
"Dojo](https://discord.gg/akd2yfuRS3)!"

#: src/misc/contributors.md:1
#, fuzzy
msgid "Contributing to Dojo Book"
msgstr "Đóng Góp"

#: src/misc/contributors.md:3
msgid ""
"As the Dojo engine progresses and develops, it is essential for the Dojo "
"book to keep pace with these advancements. Updating and refining the book "
"ensures that it remains a relevant and valuable resource for those "
"interested in understanding and utilizing the latest Dojo engine features "
"and capabilities. All help is welcome!"
msgstr ""
"Khi công cụ Dojo phát triển thêm trong tương lai, điều cần thiết là cuốn "
"sách Dojo phải theo kịp những tiến bộ này. Việc cập nhật và tinh chỉnh cuốn "
"sách đảm bảo rằng nó vẫn là một nguồn tài nguyên có giá trị và phù hợp cho "
"những ai quan tâm đến việc tìm hiểu và sử dụng các tính năng và khả năng mới "
"nhất của công cụ Dojo. Mọi sự giúp đỡ đều được chào đón!"

#: src/misc/contributors.md:5
msgid "The purpose of the book"
msgstr "Mục đích của cuốn sách"

#: src/misc/contributors.md:7
msgid ""
"The Dojo book is designed to be a comprehensive resource that caters to "
"users at various levels of experience. It aims to serve as both an "
"introductory guide for those new to Dojo and its ancillary packages, as well "
"as a reference for more experienced users seeking to deepen their "
"understanding of the engine's features and capabilities."
msgstr ""
"Sách Dojo được thiết kế để trở thành một nguồn tài nguyên toàn diện phục vụ "
"người dùng ở nhiều cấp độ trải nghiệm khác nhau. Nó nhằm mục đích vừa là "
"hướng dẫn giới thiệu cho những người mới sử dụng Dojo và các gói phụ trợ của "
"nó, vừa là tài liệu tham khảo cho những người dùng có kinh nghiệm hơn đang "
"tìm cách hiểu sâu hơn về các tính năng và khả năng của công cụ Dojo."

#: src/misc/contributors.md:9
msgid "The book is split into some major chapters:"
msgstr "Cuốn sách được chia thành một số chương chính:"

#: src/misc/contributors.md:11
msgid "Framework Theory"
msgstr ""

#: src/misc/contributors.md:13
msgid "Building a World"
msgstr "Xây dựng một thế giới"

#: src/misc/contributors.md:15
msgid "Code of Conduct"
msgstr "Quy tắc ứng xử"

#: src/misc/contributors.md:17
msgid ""
"The book follows the [Rust Code of Conduct](https://www.rust-lang.org/"
"policies/code-of-conduct)."
msgstr ""
"Cuốn sách này tuân theo [Quy tắc ứng xử của Rust](https://www.rust-lang.org/"
"policies/code-of-conduct)."

#: src/misc/contributors.md:19
msgid "Ways to contribute"
msgstr "Các phương thức đóng góp"

#: src/misc/contributors.md:21
msgid "Issues"
msgstr "Các vấn đề"

#: src/misc/contributors.md:23
msgid ""
"If you think that some content is missing or out-of-date, feel free to open "
"an issue. If you find multiple pieces of content lacking, please open up a "
"separate issue for each."
msgstr ""
"Nếu bạn cho rằng một số nội dung bị thiếu hoặc lỗi thời, vui lòng mở issue "
"trên github. Nếu bạn thấy thiếu nhiều phần nội dung, vui lòng mở một issue "
"riêng cho từng phần khác nhau."

#: src/misc/contributors.md:25
msgid ""
"The issues will then be labeled so other contributors can find chunks of "
"work they are interested in more easily."
msgstr ""
"Sau đó, các vấn đề sẽ được dán nhãn để những người đóng góp khác có thể tìm "
"thấy những phần việc mà họ quan tâm một cách dễ dàng hơn."

#: src/misc/contributors.md:27
msgid ""
"The issue should contain what is missing, or what could be improved, in as "
"much detail as you deem necessary."
msgstr ""
"Issue phải bao gồm những gì còn thiếu hoặc những gì có thể được cải thiện "
"một cách chi tiết nhất mà bạn thấy cần thiết cho sự phát triển."

#: src/misc/contributors.md:29
msgid "Pull requests"
msgstr ""

#: src/misc/contributors.md:31
msgid ""
"Feel free to contribute changes to the book by opening a pull request - "
"anything is welcome, from reformulating a sentence, fixing a typo, to adding "
"new sections or chapters."
msgstr ""
"Chúng tôi khuyến khích đóng góp các thay đổi cho cuốn sách bằng cách mở pull "
"request - mọi đóng góp đều được hoan nghênh, từ việc sửa lại một câu, sửa "
"lỗi đánh máy cho đến thêm các phần hoặc chương mới."

#: src/misc/contributors.md:33
msgid ""
"When your pull request is open, other contributors will take a look and may "
"request changes. Do not be discouraged!"
msgstr ""
"Khi pull request của bạn được mở, những người đóng góp khác sẽ xem xét và có "
"thể yêu cầu thay đổi hoặc xem xét lại. Xin đừng nản chí!"

#: src/misc/contributors.md:35
msgid "Writing style"
msgstr "Phong cách viết"

#: src/misc/contributors.md:37
msgid ""
"This section documents a few standards for writing used throughout the book."
msgstr ""
"Phần này ghi lại một số tiêu chuẩn viết được sử dụng xuyên suốt cuốn sách."

#: src/misc/contributors.md:39
msgid "Chapters start with a second level heading"
msgstr "Các chương bắt đầu bằng tiêu đề cấp độ thứ hai"

#: src/misc/contributors.md:41
msgid "We use:"
msgstr "Chúng tôi sử dụng:"

#: src/misc/contributors.md:47
msgid "We do not use:"
msgstr "Chúng tôi không sử dụng:"
