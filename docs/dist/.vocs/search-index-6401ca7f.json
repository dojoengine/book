{"documentCount":329,"nextId":329,"documentIds":{"0":"docs/pages/example.mdx#example","1":"docs/pages/getting-started.md#what-is-dojo","2":"docs/pages/getting-started.md#how-to-use-these-docs","3":"docs/pages/getting-started.md#organizational-structure","4":"docs/pages/getting-started.md#how-do-i-get-involved","5":"docs/pages/cairo/authorization.md#authorization","6":"docs/pages/cairo/authorization.md#auth-architecture","7":"docs/pages/cairo/authorization.md#providing-authorization","8":"docs/pages/cairo/commands.md#commands","9":"docs/pages/cairo/commands.md#using-commands","10":"docs/pages/cairo/commands.md#the-get-command","11":"docs/pages/cairo/commands.md#the-set-command","12":"docs/pages/cairo/commands.md#the-emit-command","13":"docs/pages/cairo/commands.md#the-delete-command","14":"docs/pages/cairo/config.md#config","15":"docs/pages/cairo/entities.md#entities","16":"docs/pages/cairo/enum.md#enum","17":"docs/pages/cairo/events.md#events","18":"docs/pages/cairo/events.md#model-events","19":"docs/pages/cairo/events.md#world-events","20":"docs/pages/cairo/events.md#custom-events","21":"docs/pages/cairo/hello-dojo.md#hello-dojo","22":"docs/pages/cairo/hello-dojo.md#dojo-as-an-ecs-in-15-minutes","23":"docs/pages/cairo/hello-dojo.md#anatomy-of-a-dojo-project","24":"docs/pages/cairo/hello-dojo.md#breaking-it-down","25":"docs/pages/cairo/hello-dojo.md#system-is-a-function-in-a-contract","26":"docs/pages/cairo/hello-dojo.md#run-it-locally","27":"docs/pages/cairo/hello-dojo.md#indexing","28":"docs/pages/cairo/hello-dojo.md#next-steps","29":"docs/pages/cairo/metadata.md#metadata","30":"docs/pages/cairo/metadata.md#world-metadata","31":"docs/pages/cairo/metadata.md#contract-metadata","32":"docs/pages/cairo/models.md#models","33":"docs/pages/cairo/models.md#models-are-structs","34":"docs/pages/cairo/models.md#the-key-attribute","35":"docs/pages/cairo/models.md#implementing-traits","36":"docs/pages/cairo/models.md#custom-setting-models","37":"docs/pages/cairo/models.md#types","38":"docs/pages/cairo/models.md#custom-types--enums","39":"docs/pages/cairo/models.md#in-practice-with-modularity-in-mind","40":"docs/pages/cairo/models.md#upgrading-models-and-data-migration","41":"docs/pages/cairo/models.md#risk-free-upgrades","42":"docs/pages/cairo/models.md#risk-of-data-corruption","43":"docs/pages/cairo/models.md#conversion-process","44":"docs/pages/cairo/origami.md#what-is-origami","45":"docs/pages/cairo/overview.md#a-new-approach-to-onchain-game-development","46":"docs/pages/cairo/overview.md#delving-into-the-architecture","47":"docs/pages/cairo/overview.md#breakdown","48":"docs/pages/cairo/overview.md#position-struct---the-dojo-model","49":"docs/pages/cairo/overview.md#spawn-function---a-dojo-system","50":"docs/pages/cairo/systems.md#systems","51":"docs/pages/cairo/systems.md#what-are-systems","52":"docs/pages/cairo/systems.md#system-permissions","53":"docs/pages/cairo/systems.md#system-structure","54":"docs/pages/cairo/systems.md#breaking-it-down","55":"docs/pages/cairo/systems.md#system-is-a-function-in-a-contract","56":"docs/pages/cairo/systems.md#spawn-function","57":"docs/pages/cairo/systems.md#the-dojocontract-decorator","58":"docs/pages/cairo/testing.md#testing","59":"docs/pages/cairo/testing.md#writing-unit-tests","60":"docs/pages/cairo/testing.md#writing-integration-tests","61":"docs/pages/cairo/testing.md#useful-dojo-test-functions","62":"docs/pages/cairo/world.md#the-world-contract","63":"docs/pages/cairo/world.md#events","64":"docs/pages/cairo/world.md#full-world-api","65":"docs/pages/cairo/world.md#uuid","66":"docs/pages/client/torii.md#torii-client","67":"docs/pages/client/torii.md#usage-in-rust-projects","68":"docs/pages/community/get-started.md#get-started","69":"docs/pages/community/get-started.md#ecosystem--studios-powered-by-dojo","70":"docs/pages/community/get-started.md#realms-world","71":"docs/pages/community/get-started.md#briq-world","72":"docs/pages/community/get-started.md#cartridge","73":"docs/pages/community/get-started.md#zkorp","74":"docs/pages/community/get-started.md#templates--libraries","75":"docs/pages/community/get-started.md#awesome-projects","76":"docs/pages/deployment/locally.md#local-deployment-with-katana","77":"docs/pages/deployment/locally.md#easy-katana-deployments","78":"docs/pages/deployment/locally.md#step-by-step-guide-to-deploy-on-katana","79":"docs/pages/deployment/remote.md#deployment-to-remote-network","80":"docs/pages/deployment/remote.md#deploy-to-public-starknet","81":"docs/pages/deployment/remote.md#deploy-to-remote-katana","82":"docs/pages/deployment/remote.md#deploy-to-remote-madara","83":"docs/pages/getting-started/from-source.md#building-from-source","84":"docs/pages/getting-started/from-source.md#prerequisites","85":"docs/pages/getting-started/from-source.md#building","86":"docs/pages/getting-started/quick-start.md#quick-start","87":"docs/pages/getting-started/quick-start.md#install-dojoup","88":"docs/pages/getting-started/quick-start.md#run-dojoup","89":"docs/pages/getting-started/quick-start.md#install-scarb-optional","90":"docs/pages/getting-started/quick-start.md#next-steps","91":"docs/pages/getting-started/setup.md#development-setup","92":"docs/pages/getting-started/setup.md#prerequisites","93":"docs/pages/getting-started/setup.md#guide","94":"docs/pages/getting-started/setup.md#clone","95":"docs/pages/getting-started/setup.md#linux--mac","96":"docs/pages/getting-started/setup.md#1-install-rust-and-dependencies","97":"docs/pages/getting-started/setup.md#2-install-scarb-package-manager","98":"docs/pages/getting-started/setup.md#3-add-the-cairo-10-vscode-extension","99":"docs/pages/getting-started/setup.md#windows","100":"docs/pages/getting-started/setup.md#container","101":"docs/pages/misc/contributors.md#contributing-to-dojo-book","102":"docs/pages/theory/autonomous-worlds.md#onchain-games-to-provable-games","103":"docs/pages/theory/autonomous-worlds.md#autonomous-worlds","104":"docs/pages/theory/autonomous-worlds.md#homework","105":"docs/pages/theory/cairo.md#cairo","106":"docs/pages/theory/cairo.md#essential-reading","107":"docs/pages/theory/cairo.md#starknet-as-an-l2","108":"docs/pages/theory/cairo.md#starknet-as-an-appchain","109":"docs/pages/theory/faqs.md#faqs","110":"docs/pages/theory/faqs.md#who-owns-dojo","111":"docs/pages/theory/faqs.md#why-dojo","112":"docs/pages/theory/faqs.md#what-is-the-dojo-roadmap","113":"docs/pages/theory/faqs.md#what-is-an-onchain-game","114":"docs/pages/theory/faqs.md#what-is-an-autonomous-world","115":"docs/pages/theory/faqs.md#what-is-cairo","116":"docs/pages/theory/faqs.md#what-is-a-provable-game","117":"docs/pages/theory/faqs.md#can-dojo-implement-client-side-proofs","118":"docs/pages/theory/faqs.md#can-i-deploy-dojo-on-starknet","119":"docs/pages/toolchain/dojoup.md#dojoup","120":"docs/pages/toolchain/dojoup.md#installing","121":"docs/pages/toolchain/dojoup.md#usage","122":"docs/pages/toolchain/dojoup.md#note---branch---repo-and---version-flags-are-ignored-during-local-installations","123":"docs/pages/toolchain/dojoup.md#precompiled-binaries","124":"docs/pages/cairo/migration/0.3.0.md#migration-guide-to-030","125":"docs/pages/cairo/migration/0.3.0.md#components-to-models","126":"docs/pages/cairo/migration/0.3.0.md#changes-in-model-implementation","127":"docs/pages/cairo/migration/0.3.0.md#schema-introduction","128":"docs/pages/cairo/migration/0.3.0.md#systems-update","129":"docs/pages/cairo/migration/0.3.0.md#interface-creation","130":"docs/pages/cairo/migration/0.3.0.md#interface-implementation","131":"docs/pages/cairo/migration/0.3.0.md#dojocontract-decorator","132":"docs/pages/cairo/migration/0.3.0.md#events","133":"docs/pages/cairo/migration/0.3.0.md#testing-changes","134":"docs/pages/cairo/migration/0.3.0.md#setup","135":"docs/pages/cairo/migration/0.3.0.md#function-testing","136":"docs/pages/cairo/migration/0.4.0.md#migration-guide-to-040","137":"docs/pages/client/sdk/c.md#dojo-c","138":"docs/pages/toolchain/katana/cli-reference.md#cli-references","139":"docs/pages/toolchain/katana/cli-reference.md#name","140":"docs/pages/toolchain/katana/cli-reference.md#usage","141":"docs/pages/toolchain/katana/cli-reference.md#options","142":"docs/pages/toolchain/katana/cli-reference.md#general-options","143":"docs/pages/toolchain/katana/cli-reference.md#server-options","144":"docs/pages/toolchain/katana/cli-reference.md#starknet-options","145":"docs/pages/toolchain/katana/cli-reference.md#environment-options","146":"docs/pages/toolchain/katana/cli-reference.md#subcommands","147":"docs/pages/toolchain/katana/cli-reference.md#completions","148":"docs/pages/toolchain/katana/cli-reference.md#examples","149":"docs/pages/toolchain/katana/execution.md#execution-engines","150":"docs/pages/toolchain/katana/execution.md#using-starknet_in_rust-engine","151":"docs/pages/toolchain/katana/execution.md#cairo-native","152":"docs/pages/toolchain/katana/execution.md#benchmarks","153":"docs/pages/toolchain/katana/forking.md#forking","154":"docs/pages/toolchain/katana/forking.md#state-forking","155":"docs/pages/toolchain/katana/forking.md#examples","156":"docs/pages/toolchain/katana/interact.md#interact-with-katana-on-starknet-deploy-a-cairo-smart-contract-using-katana","157":"docs/pages/toolchain/katana/interact.md#install-starkli-scarb-and-katana","158":"docs/pages/toolchain/katana/interact.md#basics-of-katana-and-starkli","159":"docs/pages/toolchain/katana/interact.md#katana-sequencer","160":"docs/pages/toolchain/katana/interact.md#starkli-built-in-accounts-and-configuration","161":"docs/pages/toolchain/katana/interact.md#contract-deployment-and-interaction","162":"docs/pages/toolchain/katana/interact.md#create-a-simple-storage-project","163":"docs/pages/toolchain/katana/interact.md#compile-contract-and-add-environment-variables","164":"docs/pages/toolchain/katana/interact.md#declare-contract","165":"docs/pages/toolchain/katana/interact.md#deploy-contract","166":"docs/pages/toolchain/katana/interact.md#call-contract-only-read-state","167":"docs/pages/toolchain/katana/interact.md#invoke-contract-can-write-state","168":"docs/pages/toolchain/katana/mining.md#mining-modes","169":"docs/pages/toolchain/katana/mining.md#interval-mining","170":"docs/pages/toolchain/katana/mining.md#on-demand-mining","171":"docs/pages/toolchain/katana/settlement.md#settlement","172":"docs/pages/toolchain/katana/storage.md#storage-modes","173":"docs/pages/toolchain/katana/storage.md#persistent-storage","174":"docs/pages/toolchain/katana/storage.md#usage-examples","175":"docs/pages/toolchain/katana/transactions.md#supported-transaction-types","176":"docs/pages/toolchain/slot/overview.md#slot","177":"docs/pages/toolchain/slot/overview.md#installation","178":"docs/pages/toolchain/slot/overview.md#deploy-using-slot","179":"docs/pages/toolchain/slot/reference.md#slot-reference","180":"docs/pages/toolchain/slot/reference.md#name","181":"docs/pages/toolchain/slot/reference.md#usage","182":"docs/pages/toolchain/slot/reference.md#commands","183":"docs/pages/toolchain/sozo/development.md#development","184":"docs/pages/toolchain/sozo/overview.md#sozo","185":"docs/pages/toolchain/sozo/overview.md#features","186":"docs/pages/toolchain/sozo/overview.md#installation","187":"docs/pages/toolchain/sozo/overview.md#installing-from-source","188":"docs/pages/toolchain/sozo/reference.md#sozo-reference","189":"docs/pages/toolchain/sozo/reference.md#common-options","190":"docs/pages/toolchain/sozo/reference.md#project-commands","191":"docs/pages/toolchain/sozo/reference.md#world-commands","192":"docs/pages/toolchain/torii/graphql.md#torii---graphql","193":"docs/pages/toolchain/torii/graphql.md#name","194":"docs/pages/toolchain/torii/graphql.md#graphql-playground","195":"docs/pages/toolchain/torii/graphql.md#usage","196":"docs/pages/toolchain/torii/graphql.md#pre-requisites","197":"docs/pages/toolchain/torii/graphql.md#schema-and-query-defintions","198":"docs/pages/toolchain/torii/graphql.md#query-operation","199":"docs/pages/toolchain/torii/graphql.md#transactions","200":"docs/pages/toolchain/torii/graphql.md#pagination","201":"docs/pages/toolchain/torii/graphql.md#cursor","202":"docs/pages/toolchain/torii/graphql.md#offsetlimit","203":"docs/pages/toolchain/torii/graphql.md#subscription-operations","204":"docs/pages/toolchain/torii/graphql.md#susbcription-to-events","205":"docs/pages/toolchain/torii/grpc.md#grpc","206":"docs/pages/toolchain/torii/reference.md#torii-reference","207":"docs/pages/toolchain/torii/reference.md#name","208":"docs/pages/toolchain/torii/reference.md#usage","209":"docs/pages/toolchain/torii/reference.md#description","210":"docs/pages/toolchain/torii/reference.md#database-url","211":"docs/pages/toolchain/torii/reference.md#options","212":"docs/pages/toolchain/torii/reference.md#general-options","213":"docs/pages/tutorial/deploy-using-slot/main.md#deploy-your-game-using-slot","214":"docs/pages/tutorial/deploy-using-slot/main.md#torii","215":"docs/pages/tutorial/katana-starkli-scarb/main.md#deploy-your-cairo-smart-contract-using-katana-advanced-tutorial","216":"docs/pages/tutorial/katana-starkli-scarb/main.md#contract-deployment-and-interaction","217":"docs/pages/tutorial/katana-starkli-scarb/main.md#create-a-vote-project","218":"docs/pages/tutorial/katana-starkli-scarb/main.md#compile-contract-and-environment-variables-setup","219":"docs/pages/tutorial/katana-starkli-scarb/main.md#declare-contract","220":"docs/pages/tutorial/katana-starkli-scarb/main.md#deploy-contract","221":"docs/pages/tutorial/katana-starkli-scarb/main.md#call-contract-only-read-state","222":"docs/pages/tutorial/katana-starkli-scarb/main.md#invoke-contract-can-write-state","223":"docs/pages/tutorial/onchain-chess/0-setup.md#0-setup","224":"docs/pages/tutorial/onchain-chess/0-setup.md#initializing-the-project","225":"docs/pages/tutorial/onchain-chess/0-setup.md#cleaning-up-the-boilerplate","226":"docs/pages/tutorial/onchain-chess/0-setup.md#basic-models","227":"docs/pages/tutorial/onchain-chess/0-setup.md#basic-systems","228":"docs/pages/tutorial/onchain-chess/0-setup.md#compile-your-project","229":"docs/pages/tutorial/onchain-chess/0-setup.md#implement-traits-for-models","230":"docs/pages/tutorial/onchain-chess/0-setup.md#requirements","231":"docs/pages/tutorial/onchain-chess/2-move.md#2-move-function","232":"docs/pages/tutorial/onchain-chess/2-move.md#test-flow","233":"docs/pages/tutorial/onchain-chess/2-move.md#unit-tests","234":"docs/pages/tutorial/onchain-chess/2-move.md#diving-into-the-code","235":"docs/pages/tutorial/onchain-chess/2-move.md#setup_world","236":"docs/pages/tutorial/onchain-chess/2-move.md#test_spawn","237":"docs/pages/tutorial/onchain-chess/2-move.md#test_move","238":"docs/pages/tutorial/onchain-chess/2-move.md#need-help","239":"docs/pages/tutorial/onchain-chess/3-test.md#3-test-contract","240":"docs/pages/tutorial/onchain-chess/3-test.md#full-code","241":"docs/pages/tutorial/onchain-chess/3-test.md#congratulations","242":"docs/pages/tutorial/onchain-chess/README.md#building-a-chess-game","243":"docs/pages/tutorial/onchain-chess/README.md#what-are-we-building","244":"docs/pages/tutorial/onchain-chess/README.md#what-after-this-guide","245":"docs/pages/client/sdk/js/dojojs.md#dojojs","246":"docs/pages/client/sdk/js/dojojs.md#prerequisites","247":"docs/pages/client/sdk/js/dojojs.md#dojo","248":"docs/pages/client/sdk/js/dojojs.md#starter-projects","249":"docs/pages/client/sdk/js/dojojs.md#core-documentation","250":"docs/pages/client/sdk/js/dojojs.md#react-documentation","251":"docs/pages/client/sdk/js/dojojs.md#useentityquery-has-and-hasvalue","252":"docs/pages/client/sdk/js/dojojs.md#usecomponentvalue","253":"docs/pages/client/sdk/js/dojojs.md#torii-client","254":"docs/pages/client/sdk/js/dojojs.md#recs-state-library","255":"docs/pages/client/sdk/js/dojojs.md#overridablecomponent","256":"docs/pages/client/sdk/js/dojojs.md#addoverride-and-removeoverride","257":"docs/pages/client/sdk/js/dojojs.md#definecomponent","258":"docs/pages/client/sdk/js/dojojs.md#contribute","259":"docs/pages/client/sdk/unity/common-problems.md#common-problems-and-solutions","260":"docs/pages/client/sdk/unity/common-problems.md#model-bindings","261":"docs/pages/client/sdk/unity/common-problems.md#slot-on-desktop","262":"docs/pages/client/sdk/unity/common-problems.md#webgl-build-errors","263":"docs/pages/client/sdk/unity/common-problems.md#async-calls-not-working","264":"docs/pages/client/sdk/unity/common-problems.md#bingen-plugin-error","265":"docs/pages/client/sdk/unity/common-problems.md#torii-communication-error","266":"docs/pages/client/sdk/unity/common-problems.md#authentication-error-during-transaction-execution","267":"docs/pages/client/sdk/unity/example.md#example-with-dojo-starter-and-dojounity","268":"docs/pages/client/sdk/unity/example.md#prerequisites","269":"docs/pages/client/sdk/unity/example.md#setting-up-dojo-starter","270":"docs/pages/client/sdk/unity/example.md#setting-up-dojounity","271":"docs/pages/client/sdk/unity/example.md#running-the-example","272":"docs/pages/client/sdk/unity/get-started.md#getting-started","273":"docs/pages/client/sdk/unity/get-started.md#setting-up-unity-scene","274":"docs/pages/client/sdk/unity/get-started.md#add-essential-prefabs","275":"docs/pages/client/sdk/unity/get-started.md#configuring-the-world-manager","276":"docs/pages/client/sdk/unity/get-started.md#default-configuration","277":"docs/pages/client/sdk/unity/get-started.md#creating-custom-configurations","278":"docs/pages/client/sdk/unity/get-started.md#applying-a-configuration","279":"docs/pages/client/sdk/unity/get-started.md#adding-binding-models","280":"docs/pages/client/sdk/unity/get-started.md#calling-systems","281":"docs/pages/client/sdk/unity/get-started.md#account-creation","282":"docs/pages/client/sdk/unity/get-started.md#simple-account-creation","283":"docs/pages/client/sdk/unity/get-started.md#burner-account-creation","284":"docs/pages/client/sdk/unity/get-started.md#contract-assembly-and-execution","285":"docs/pages/client/sdk/unity/get-started.md#building-your-dojo-game","286":"docs/pages/client/sdk/unity/get-started.md#building-for-desktop-windows-macos-linux","287":"docs/pages/client/sdk/unity/get-started.md#building-for-webgl","288":"docs/pages/client/sdk/unity/important-concepts.md#dojo-unity-concepts","289":"docs/pages/client/sdk/unity/important-concepts.md#world-manager","290":"docs/pages/client/sdk/unity/important-concepts.md#synchronization-master","291":"docs/pages/client/sdk/unity/important-concepts.md#models","292":"docs/pages/client/sdk/unity/important-concepts.md#bingen","293":"docs/pages/client/sdk/unity/important-concepts.md#example","294":"docs/pages/client/sdk/unity/overview.md#dojounity","295":"docs/pages/client/sdk/unity/overview.md#overview","296":"docs/pages/client/sdk/unity/overview.md#prerequisites","297":"docs/pages/client/sdk/unity/overview.md#install-dependencies","298":"docs/pages/client/sdk/unity/overview.md#setting-up-dojounity-sdk","299":"docs/pages/toolchain/katana/rpc/dev.md#dev-namespace","300":"docs/pages/toolchain/katana/rpc/dev.md#generateblock","301":"docs/pages/toolchain/katana/rpc/dev.md#nextblocktimestamp","302":"docs/pages/toolchain/katana/rpc/dev.md#increasenextblocktimestamp","303":"docs/pages/toolchain/katana/rpc/dev.md#setnextblocktimestamp","304":"docs/pages/toolchain/katana/rpc/katana.md#katana-namespace","305":"docs/pages/toolchain/katana/rpc/katana.md#predeployedaccounts","306":"docs/pages/toolchain/katana/rpc/overview.md#json-rpc","307":"docs/pages/toolchain/katana/rpc/overview.md#supported-transport-layers","308":"docs/pages/toolchain/katana/rpc/overview.md#supported-rpc-methods","309":"docs/pages/toolchain/katana/rpc/overview.md#namespaces","310":"docs/pages/toolchain/katana/rpc/starknet.md#starknet-namespace","311":"docs/pages/toolchain/katana/rpc/starknet.md#read-api","312":"docs/pages/toolchain/katana/rpc/starknet.md#write-api","313":"docs/pages/toolchain/katana/rpc/starknet.md#trace-api","314":"docs/pages/toolchain/katana/rpc/torii.md#torii-namespace","315":"docs/pages/toolchain/katana/rpc/torii.md#gettransactions","316":"docs/pages/toolchain/slot/deployments-commands/deployments.md#slot-deployments","317":"docs/pages/toolchain/slot/deployments-commands/deployments.md#commands","318":"docs/pages/toolchain/sozo/common-options/offline.md#offline","319":"docs/pages/toolchain/sozo/common-options/offline.md#use-sozo-offline","320":"docs/pages/toolchain/sozo/common-options/offline.md#usage","321":"docs/pages/toolchain/sozo/common-options/profile.md#use-sozo-profiles","322":"docs/pages/toolchain/sozo/common-options/profile.md#usage","323":"docs/pages/toolchain/sozo/project-commands/build.md#sozo-build","324":"docs/pages/toolchain/sozo/project-commands/init.md#sozo-init","325":"docs/pages/toolchain/sozo/project-commands/test.md#sozo-test","326":"docs/pages/toolchain/sozo/world-commands/auth.md#sozo-auth","327":"docs/pages/toolchain/sozo/world-commands/events.md#sozo-events","328":"docs/pages/toolchain/sozo/world-commands/register.md#sozo-register"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,6],"1":[4,1,65],"2":[6,4,32],"3":[2,4,34],"4":[6,4,10],"5":[1,1,64],"6":[2,2,29],"7":[2,2,43],"8":[1,1,81],"9":[2,2,17],"10":[3,2,85],"11":[3,2,42],"12":[3,2,33],"13":[3,2,19],"14":[1,1,84],"15":[1,1,86],"16":[1,1,88],"17":[1,1,54],"18":[2,2,63],"19":[2,2,49],"20":[2,2,83],"21":[2,1,24],"22":[7,2,105],"23":[5,9,238],"24":[3,8,1],"25":[6,11,115],"26":[4,8,201],"27":[1,8,345],"28":[2,8,34],"29":[1,1,42],"30":[2,2,96],"31":[2,2,29],"32":[1,1,39],"33":[3,2,66],"34":[3,4,93],"35":[2,4,58],"36":[3,4,86],"37":[1,4,22],"38":[4,4,75],"39":[6,2,142],"40":[5,1,29],"41":[4,1,100],"42":[4,1,88],"43":[3,1,66],"44":[4,1,28],"45":[7,1,39],"46":[4,8,115],"47":[1,8,12],"48":[5,9,42],"49":[5,9,38],"50":[1,1,57],"51":[4,2,45],"52":[2,2,23],"53":[2,2,103],"54":[3,1,1],"55":[6,6,21],"56":[2,6,30],"57":[4,4,123],"58":[1,1,45],"59":[3,2,66],"60":[3,2,106],"61":[4,5,21],"62":[3,1,75],"63":[1,4,23],"64":[3,4,85],"65":[2,4,28],"66":[2,1,29],"67":[4,3,2],"68":[2,1,23],"69":[6,1,1],"70":[2,7,3],"71":[2,7,3],"72":[1,7,3],"73":[1,7,2],"74":[3,1,33],"75":[2,1,113],"76":[4,1,37],"77":[3,5,43],"78":[7,5,49],"79":[4,1,87],"80":[4,5,19],"81":[3,5,25],"82":[4,5,8],"83":[3,1,18],"84":[1,4,39],"85":[1,4,47],"86":[2,1,23],"87":[2,3,27],"88":[2,3,26],"89":[4,3,149],"90":[2,1,10],"91":[2,1,32],"92":[1,3,4],"93":[1,2,1],"94":[1,3,8],"95":[3,3,1],"96":[5,6,42],"97":[5,6,23],"98":[8,6,11],"99":[1,3,3],"100":[1,3,3],"101":[4,1,39],"102":[4,1,151],"103":[2,1,205],"104":[1,3,38],"105":[1,1,109],"106":[2,2,6],"107":[4,2,95],"108":[4,2,62],"109":[1,1,1],"110":[4,2,22],"111":[3,2,27],"112":[6,2,28],"113":[6,2,32],"114":[6,2,33],"115":[4,2,34],"116":[6,2,86],"117":[7,2,33],"118":[7,2,27],"119":[1,1,11],"120":[1,1,9],"121":[1,1,69],"122":[12,3,22],"123":[2,2,44],"124":[5,1,20],"125":[3,6,46],"126":[4,6,20],"127":[2,6,95],"128":[2,6,52],"129":[2,8,60],"130":[2,8,60],"131":[4,8,29],"132":[1,6,39],"133":[2,6,1],"134":[1,8,46],"135":[2,8,33],"136":[5,1,2],"137":[2,1,3],"138":[2,1,1],"139":[1,2,13],"140":[1,2,4],"141":[1,2,1],"142":[2,3,98],"143":[2,3,30],"144":[2,3,37],"145":[2,5,36],"146":[1,2,1],"147":[1,3,16],"148":[1,4,17],"149":[2,1,61],"150":[5,2,107],"151":[2,2,13],"152":[1,2,9],"153":[1,1,1],"154":[2,1,171],"155":[1,2,52],"156":[11,1,30],"157":[5,11,54],"158":[5,11,1],"159":[2,15,17],"160":[6,15,61],"161":[4,11,1],"162":[5,15,53],"163":[6,15,70],"164":[2,15,83],"165":[2,15,50],"166":[6,15,32],"167":[6,15,61],"168":[2,1,23],"169":[2,2,45],"170":[3,2,70],"171":[1,1,3],"172":[2,1,84],"173":[2,2,69],"174":[2,3,18],"175":[3,1,41],"176":[1,1,23],"177":[1,1,25],"178":[3,1,24],"179":[2,1,1],"180":[1,3,13],"181":[1,3,4],"182":[1,3,18],"183":[1,1,1],"184":[1,1,62],"185":[1,1,24],"186":[1,1,13],"187":[3,2,38],"188":[2,1,1],"189":[2,3,3],"190":[2,3,5],"191":[2,3,7],"192":[2,1,1],"193":[1,3,73],"194":[2,4,33],"195":[1,3,1],"196":[2,4,38],"197":[4,3,69],"198":[2,3,84],"199":[1,5,113],"200":[1,5,48],"201":[1,6,64],"202":[2,6,33],"203":[2,3,135],"204":[3,5,102],"205":[1,1,38],"206":[2,1,1],"207":[1,3,12],"208":[1,3,3],"209":[1,3,55],"210":[2,4,66],"211":[1,3,1],"212":[2,4,75],"213":[5,1,175],"214":[1,5,50],"215":[9,1,19],"216":[4,9,1],"217":[4,13,179],"218":[6,13,43],"219":[2,13,51],"220":[2,13,68],"221":[6,13,42],"222":[6,13,104],"223":[2,1,17],"224":[3,2,18],"225":[4,2,95],"226":[2,2,109],"227":[2,2,46],"228":[3,2,26],"229":[4,2,22],"230":[1,6,114],"231":[3,1,103],"232":[2,3,45],"233":[2,3,103],"234":[4,3,1],"235":[2,7,47],"236":[2,7,96],"237":[2,7,63],"238":[3,3,16],"239":[3,1,74],"240":[2,3,93],"241":[2,3,83],"242":[4,1,80],"243":[5,4,80],"244":[5,4,29],"245":[2,1,1],"246":[1,2,21],"247":[1,3,12],"248":[2,3,53],"249":[2,2,3],"250":[2,2,20],"251":[4,4,44],"252":[1,4,58],"253":[2,2,56],"254":[3,2,1],"255":[1,5,62],"256":[3,5,61],"257":[1,5,45],"258":[1,2,13],"259":[4,1,1],"260":[2,4,52],"261":[3,4,77],"262":[3,4,73],"263":[4,4,42],"264":[3,4,91],"265":[3,4,84],"266":[5,4,81],"267":[7,1,17],"268":[1,7,7],"269":[4,7,16],"270":[4,7,45],"271":[3,7,37],"272":[2,1,49],"273":[4,2,1],"274":[3,6,41],"275":[4,6,14],"276":[2,10,30],"277":[3,10,34],"278":[3,10,27],"279":[3,6,55],"280":[2,2,23],"281":[2,4,13],"282":[3,6,28],"283":[3,6,49],"284":[4,4,149],"285":[4,2,19],"286":[7,6,32],"287":[3,6,58],"288":[3,1,21],"289":[2,3,64],"290":[2,3,67],"291":[1,3,87],"292":[1,4,69],"293":[1,4,43],"294":[2,1,1],"295":[1,2,20],"296":[1,2,17],"297":[2,3,13],"298":[5,3,113],"299":[2,1,22],"300":[1,3,18],"301":[1,3,14],"302":[1,3,20],"303":[1,3,22],"304":[2,1,1],"305":[1,3,16],"306":[2,1,1],"307":[3,2,18],"308":[3,2,1],"309":[1,4,32],"310":[2,1,22],"311":[2,3,23],"312":[2,3,5],"313":[2,3,3],"314":[2,1,1],"315":[1,3,16],"316":[2,1,9],"317":[1,3,31],"318":[1,1,1],"319":[3,1,10],"320":[1,3,7],"321":[3,1,21],"322":[1,4,46],"323":[2,1,15],"324":[2,1,20],"325":[2,1,19],"326":[2,1,42],"327":[2,1,8],"328":[2,1,61]},"averageFieldLength":[2.7051671732522777,3.6443768996960486,44.34954407294835],"storedFields":{"0":{"href":"/example#example","html":"</header>\n<p>This is an example page.</p>","isPage":true,"text":"\nThis is an example page.","title":"Example","titles":[]},"1":{"href":"/getting-started#what-is-dojo","html":"</header>\n<p>Ohayo Sensei!</p>\n<p>Dojo is an open-source, provable game engine built with Cairo, designed to be the ultimate toolchain for creating onchain games.</p>\n<p>Dojo enables developers to go from concept to a fully realized onchain game in days.</p>\n<p>TLDR Dojo is;</p>\n<ul>\n<li>Cairo framework for building onchain games</li>\n<li>Rust based indexing for your games</li>\n<li>Rust based CLI tooling for improved development flow</li>\n<li>Apache 2.0 Open source - always has been, always will be</li>\n<li>Built by a vibrant community of engineers and gamers</li>\n<li>Join the Sensei - <a href=\"https://discord.gg/vUN4Xq9Qv6\">join us!</a></li>\n</ul>\n<hr/>\n","isPage":true,"text":"\nOhayo Sensei!\nDojo is an open-source, provable game engine built with Cairo, designed to be the ultimate toolchain for creating onchain games.\nDojo enables developers to go from concept to a fully realized onchain game in days.\nTLDR Dojo is;\n\nCairo framework for building onchain games\nRust based indexing for your games\nRust based CLI tooling for improved development flow\nApache 2.0 Open source - always has been, always will be\nBuilt by a vibrant community of engineers and gamers\nJoin the Sensei - join us!\n\n\n","title":"What is Dojo?","titles":[]},"2":{"href":"/getting-started#how-to-use-these-docs","html":"\n<p>This book is dedicated to familiarizing you with the Dojo engine and the potential of Provable games. A special section on the <a href=\"/theory/autonomous-worlds.md\">Theory</a> elucidates this emergent concept of autonomous worlds and Provable games.</p>\n<ul>\n<li><a href=\"/getting-started/quick-start.md\">Quickstart</a></li>\n<li><a href=\"/theory/what-is-dojo.mdx\">What is Dojo? </a></li>\n<li><a href=\"/cairo/overview.md\">Explore the Architecture</a></li>\n</ul>\n<hr/>\n","isPage":false,"text":"\nThis book is dedicated to familiarizing you with the Dojo engine and the potential of Provable games. A special section on the Theory elucidates this emergent concept of autonomous worlds and Provable games.\n\nQuickstart\nWhat is Dojo? \nExplore the Architecture\n\n\n","title":"How to use these docs?","titles":["What is Dojo?",null]},"3":{"href":"/getting-started#organizational-structure","html":"\n<p>Dojo is an open-source initiative, licensed under Apache 2.0, dedicated to promoting and advancing the concept of Autonomous Worlds (AWs). It is spearheaded by <a href=\"https://cartridge.gg/\">Cartridge</a>, <a href=\"https://bibliothecadao.xyz/\">Realms &amp; BibliothecaDAO</a>, <a href=\"https://briq.construction/\">briq</a> and many more <a href=\"https://github.com/orgs/dojoengine/people\">contributors</a>.</p>\n","isPage":false,"text":"\nDojo is an open-source initiative, licensed under Apache 2.0, dedicated to promoting and advancing the concept of Autonomous Worlds (AWs). It is spearheaded by Cartridge, Realms &amp; BibliothecaDAO, briq and many more contributors.\n","title":"Organizational Structure","titles":["What is Dojo?",null]},"4":{"href":"/getting-started#how-do-i-get-involved","html":"\n<p>Check out our <a href=\"https://github.com/dojoengine\">Github</a>, our <a href=\"https://twitter.com/dojostarknet\">Twitter</a>, <a href=\"https://discord.gg/vUN4Xq9Qv6\">Discord</a> and <a href=\"getting-started/contributing.md\">contribution guide</a></p>","isPage":false,"text":"\nCheck out our Github, our Twitter, Discord and contribution guide","title":"How do I get involved?","titles":["What is Dojo?",null]},"5":{"href":"/cairo/authorization#authorization","html":"\n<blockquote>\n<p>Authorization is crucial to a world, just like how authorization is crucial to any smart contract.</p>\n</blockquote>\n<p>As discussed in the <a href=\"/cairo/world.md\">World</a> chapter, Autonomous Worlds (AWs) function as sovereign chains nested within a public blockchain. These Worlds are also open to the public. This structure allows anyone to enhance a World by deploying models or systems. However, this openness also introduces security considerations. Similar to Ethereum, interacting with a model&#x27;s state within a System requires the appropriate authorization from the model owner.</p>\n","isPage":true,"text":"\n\nAuthorization is crucial to a world, just like how authorization is crucial to any smart contract.\n\nAs discussed in the World chapter, Autonomous Worlds (AWs) function as sovereign chains nested within a public blockchain. These Worlds are also open to the public. This structure allows anyone to enhance a World by deploying models or systems. However, this openness also introduces security considerations. Similar to Ethereum, interacting with a model&#x27;s state within a System requires the appropriate authorization from the model owner.\n","title":"Authorization","titles":[null]},"6":{"href":"/cairo/authorization#auth-architecture","html":"\n<p>Every time a <code>set!</code> is called in a <code>System</code>, the world checks if the <code>System</code> has authorization to update the model state. Only when the <code>System</code> possesses the necessary authorization, the <code>set!</code> is executed. The following diagram illustrates the authorization architecture.</p>\n<p><img src=\"/dojo-auth.png\" alt=\"Authorization Architecture\"/></p>\n","isPage":false,"text":"\nEvery time a set! is called in a System, the world checks if the System has authorization to update the model state. Only when the System possesses the necessary authorization, the set! is executed. The following diagram illustrates the authorization architecture.\n\n","title":"Auth Architecture","titles":[null,"Authorization"]},"7":{"href":"/cairo/authorization#providing-authorization","html":"\n<blockquote>\n<p>The deployer of the model is its initial owner. A model owner is able to grant the <code>owner</code> and <code>writer</code> roles. Only owners can grant a System the <code>writer</code> role which allows it to update the model.</p>\n</blockquote>\n<p><code>sozo</code> offers a convenient tool to authorize systems.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark-dimmed\"><code data-language=\"shell\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> auth writer Moves spawn</span></span></code></pre></figure>\n<p>This command will generate a <code>writer</code> authorization for the <code>spawn</code> system to update the <code>Moves</code> model.</p>","isPage":false,"text":"\n\nThe deployer of the model is its initial owner. A model owner is able to grant the owner and writer roles. Only owners can grant a System the writer role which allows it to update the model.\n\nsozo offers a convenient tool to authorize systems.\nsozo auth writer Moves spawn\nThis command will generate a writer authorization for the spawn system to update the Moves model.","title":"Providing Authorization","titles":[null,"Authorization"]},"8":{"href":"/cairo/commands#commands","html":"\n<strong><em>TL;DR</em></strong>\n<ul>\n<li>Commands are shorthand ways to write function calls</li>\n<li>Commands abstract complex queries into shorthands</li>\n<li>Commands are similar to rust macros</li>\n</ul>\n<p>Understanding commands is key to understanding Dojo. You will leverage them heavily within the systems you design.</p>\n<p>Commands in Dojo are generalized functions that are expanded at compile time to facilitate system execution. They provide a convenient way for systems to interact with the world state by abstracting common operations, such as retrieving or updating models, and generating unique IDs. By leveraging these commands, developers can streamline their system implementations and improve code readability.</p>\n","isPage":true,"text":"\nTL;DR\n\nCommands are shorthand ways to write function calls\nCommands abstract complex queries into shorthands\nCommands are similar to rust macros\n\nUnderstanding commands is key to understanding Dojo. You will leverage them heavily within the systems you design.\nCommands in Dojo are generalized functions that are expanded at compile time to facilitate system execution. They provide a convenient way for systems to interact with the world state by abstracting common operations, such as retrieving or updating models, and generating unique IDs. By leveraging these commands, developers can streamline their system implementations and improve code readability.\n","title":"Commands","titles":[null]},"9":{"href":"/cairo/commands#using-commands","html":"\n<p>Commands are used within systems to interact with the world state. They are called using the following syntax:</p>\n","isPage":false,"text":"\nCommands are used within systems to interact with the world state. They are called using the following syntax:\n","title":"Using commands","titles":[null,"Commands"]},"10":{"href":"/cairo/commands#the-get-command","html":"\n<p>The <code>get!</code> command is used to retrieve models from the world state:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// world = calling world</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// caller = key of the entity that called the system</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// (Position, Moves) = tuple of models to retrieve</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> (position, moves) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, caller, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span></code></pre></figure>\n<p>Here we are retrieving the <code>Position</code> and <code>Moves</code> models from the world state. We are also using the <code>caller</code> to retrieve the models for the current entity.</p>\n<p>You can then use <code>position</code> and <code>moves</code> as you would as any other Cairo struct.</p>\n<p>In the case that your model defines several keys as the <a href=\"/cairo/models.md#the-key-attribute\">resource example</a>, you must provide a value for each key.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> location </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> 0x1234</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> resource </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (player, location), (</span><span style=\"color:#F69D50\">Resource</span><span style=\"color:#ADBAC7\">));</span></span></code></pre></figure>\n<p>If you use the <code>get!</code> command on a model that has never been set before, all the fields that are not <code>#[key]</code> are equal to 0 in the returned model, which is the default value in the storage.</p>\n","isPage":false,"text":"\nThe get! command is used to retrieve models from the world state:\n// world = calling world\n// caller = key of the entity that called the system\n// (Position, Moves) = tuple of models to retrieve\nlet (position, moves) = get!(world, caller, (Position, Moves));\nHere we are retrieving the Position and Moves models from the world state. We are also using the caller to retrieve the models for the current entity.\nYou can then use position and moves as you would as any other Cairo struct.\nIn the case that your model defines several keys as the resource example, you must provide a value for each key.\nlet player = get_caller_address();\nlet location = 0x1234;\n \nlet resource = get!(world, (player, location), (Resource));\nIf you use the get! command on a model that has never been set before, all the fields that are not #[key] are equal to 0 in the returned model, which is the default value in the storage.\n","title":"The get! command","titles":[null,"Commands"]},"11":{"href":"/cairo/commands#the-set-command","html":"\n<p>The <code>set!</code> command is used to update models state.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">set </span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        player</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> caller, remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        player</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> caller, x</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// If the structs are already defined it can also be written as:</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">set!</span><span style=\"color:#ADBAC7\">(world, (moves, position));</span></span></code></pre></figure>\n<p>Here we are updating the <code>Moves</code> and <code>Position</code> models in the world state using the <code>caller</code> as the entity id.</p>\n","isPage":false,"text":"\nThe set! command is used to update models state.\nset !(world, (\n    Moves {\n        player: caller, remaining: 10\n    },\n    Position {\n        player: caller, x: position.x + 10, y: position.y + 10\n    },\n));\n \n// If the structs are already defined it can also be written as:\nset!(world, (moves, position));\nHere we are updating the Moves and Position models in the world state using the caller as the entity id.\n","title":"The set! command","titles":[null,"Commands"]},"12":{"href":"/cairo/commands#the-emit-command","html":"\n<p>The <code>emit!</code> command is used to emit custom events. These events are indexed by <a href=\"/toolchain/torii/overview.md\">Torii</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">emit!</span><span style=\"color:#ADBAC7\">(world, </span><span style=\"color:#F69D50\">Moved</span><span style=\"color:#ADBAC7\"> { address</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> caller, direction });</span></span></code></pre></figure>\n<p>This will emit these values which could be captured by a client or you could query these via <a href=\"/toolchain/torii/overview.md\">Torii</a>.</p>\n","isPage":false,"text":"\nThe emit! command is used to emit custom events. These events are indexed by Torii.\nemit!(world, Moved { address: caller, direction });\nThis will emit these values which could be captured by a client or you could query these via Torii.\n","title":"The emit! command","titles":[null,"Commands"]},"13":{"href":"/cairo/commands#the-delete-command","html":"\n<p>The <code>delete!</code> command deletes a model from the db.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> moves </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">delete!</span><span style=\"color:#ADBAC7\">(world, (moves));</span></span></code></pre></figure>","isPage":false,"text":"\nThe delete! command deletes a model from the db.\nlet player = get_caller_address();\nlet moves = get!(world, player, (Moves));\ndelete!(world, (moves));","title":"The delete! command","titles":[null,"Commands"]},"14":{"href":"/cairo/config#config","html":"</header>\n<p>Dojo worlds are defined in their <code>Scarb.toml</code> files. This is just a regular <a href=\"https://docs.swmansion.com/scarb/\">Scarb</a> file which is an excellent Cairo package manager and project manager.</p>\n<p>Full example of a <code>Scarb.toml</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">package</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cairo-version = </span><span style=\"color:#96D0FF\">&quot;2.4.0&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;dojo_examples&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">version = </span><span style=\"color:#96D0FF\">&quot;0.5.0&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">cairo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">sierra-replace-ids = </span><span style=\"color:#6CB6FF\">true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># IMPORTANT: Dojo should be pinned to a specific version or else your world might not compile.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, version = </span><span style=\"color:#96D0FF\">&quot;0.5.0&quot;</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[[</span><span style=\"color:#F69D50\">target</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">initializer_class_hash = </span><span style=\"color:#96D0FF\">&quot;0xbeef&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">env</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;http://localhost:5050/&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Default account for katana with seed = 0</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;0x1800000000300000180000000000030000000000003006001800006600&quot;</span></span></code></pre></figure>","isPage":true,"text":"\nDojo worlds are defined in their Scarb.toml files. This is just a regular Scarb file which is an excellent Cairo package manager and project manager.\nFull example of a Scarb.toml file:\n[package]\ncairo-version = &quot;2.4.0&quot;\nname = &quot;dojo_examples&quot;\nversion = &quot;0.5.0&quot;\n \n[cairo]\nsierra-replace-ids = true\n \n[dependencies]\n# IMPORTANT: Dojo should be pinned to a specific version or else your world might not compile.\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, version = &quot;0.5.0&quot; }\n \n[[target.dojo]]\n \n[tool.dojo]\ninitializer_class_hash = &quot;0xbeef&quot;\n \n[tool.dojo.env]\nrpc_url = &quot;http://localhost:5050/&quot;\n# Default account for katana with seed = 0\naccount_address = &quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;\nprivate_key = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;","title":"Config","titles":[]},"15":{"href":"/cairo/entities#entities","html":"\n<blockquote>\n<p>Entities are the primary key value within the world, to which models can be attached.</p>\n</blockquote>\n<p>Different ECS systems handle entities in various ways. In Dojo, entities are treated as a primary key value within the world, to which models can be attached. To illustrate this concept, consider a simple example of a character in a game that has a <code>Moves</code> and a <code>Position</code> model.</p>\n<p>When defining the models for this entity, it is important to note that we do not reference the entity directly. Instead, we simply provide two structs that the entity will contain.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Models</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Models</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Health</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    x</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    y</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<blockquote>\n<p>ECS Theory: Plenty has been written on ECS systems, to go deeper read <a href=\"https://github.com/SanderMertens/ecs-faq\">ECS-FAQ</a></p>\n</blockquote>","isPage":true,"text":"\n\nEntities are the primary key value within the world, to which models can be attached.\n\nDifferent ECS systems handle entities in various ways. In Dojo, entities are treated as a primary key value within the world, to which models can be attached. To illustrate this concept, consider a simple example of a character in a game that has a Moves and a Position model.\nWhen defining the models for this entity, it is important to note that we do not reference the entity directly. Instead, we simply provide two structs that the entity will contain.\n#[derive(Models, Drop, Serde)]\nstruct Moves {\n    #[key]\n    player: ContractAddress,\n    remaining: u8,\n}\n \n#[derive(Models, Drop, Serde)]\nstruct Health {\n    #[key]\n    player: ContractAddress,\n    x: u32,\n    y: u32\n}\n\nECS Theory: Plenty has been written on ECS systems, to go deeper read ECS-FAQ\n","title":"Entities","titles":[null]},"16":{"href":"/cairo/enum#enum","html":"\n<p>Enums are very useful in game design, as they simplify the creation of clean, complex logic.</p>\n<p>You can define an enum as follows:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// This enum simply defines the states of a game.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Introspect</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">PartialEq</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Print</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">enum</span><span style=\"color:#F69D50\"> GameStatus</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    NotStarted</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> (),</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Lobby</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> (),</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    InProgress</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> (),</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Finished</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> (),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// We define an into trait</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">impl</span><span style=\"color:#F69D50\"> GameStatusFelt252</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">Into</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">GameStatus</span><span style=\"color:#ADBAC7\">, felt252&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> into</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> GameStatus</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> felt252 {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        match</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            GameStatus</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">NotStarted</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            GameStatus</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Lobby</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            GameStatus</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">InProgress</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            GameStatus</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Finished</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#6CB6FF\"> 3</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Then within a trait you can create something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Game</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    game_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    status</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> GameStatus</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[generate_trait]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">impl</span><span style=\"color:#F69D50\"> GameImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">GameTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> assert_in_progress</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Game</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">status </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> GameStatus</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">InProgress</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;Game not started&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> assert_lobby</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Game</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">status </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> GameStatus</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Lobby</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;Game not in lobby&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> assert_not_started</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Game</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">status </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> GameStatus</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">NotStarted</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;Game already started&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<blockquote>\n<p>Read more about Cairo enums <a href=\"https://book.cairo-lang.org/ch06-00-enums-and-pattern-matching.html\">here</a></p>\n</blockquote>","isPage":true,"text":"\nEnums are very useful in game design, as they simplify the creation of clean, complex logic.\nYou can define an enum as follows:\n \n// This enum simply defines the states of a game.\n#[derive(Serde, Copy, Drop, Introspect, PartialEq, Print)]\nenum GameStatus {\n    NotStarted: (),\n    Lobby: (),\n    InProgress: (),\n    Finished: (),\n}\n \n// We define an into trait\nimpl GameStatusFelt252 of Into&lt;GameStatus, felt252&gt; {\n    fn into(self: GameStatus) -&gt; felt252 {\n        match self {\n            GameStatus::NotStarted =&gt; 0,\n            GameStatus::Lobby =&gt; 1,\n            GameStatus::InProgress =&gt; 2,\n            GameStatus::Finished =&gt; 3,\n        }\n    }\n}\nThen within a trait you can create something like this:\n#[derive(Model, Copy, Drop, Serde)]\nstruct Game {\n    #[key]\n    game_id: u32,\n    status: GameStatus,\n}\n \n#[generate_trait]\nimpl GameImpl of GameTrait {\n    fn assert_in_progress(self: Game) {\n        assert(self.status == GameStatus::InProgress, &quot;Game not started&quot;);\n    }\n    fn assert_lobby(self: Game) {\n        assert(self.status == GameStatus::Lobby, &quot;Game not in lobby&quot;);\n    }\n    fn assert_not_started(self: Game) {\n        assert(self.status == GameStatus::NotStarted, &quot;Game already started&quot;);\n    }\n}\n\nRead more about Cairo enums here\n","title":"Enum","titles":[null]},"17":{"href":"/cairo/events#events","html":"\n<p>Events play a pivotal role in decoding the dynamics of a Dojo world. Every time there&#x27;s an update to a <code>Model</code>, the <code>World</code> contract emits these events. What&#x27;s even more exciting is that you can craft your own custom events to fit specific needs! Moreover, thanks to <a href=\"/toolchain/torii/overview.md\">Torii</a>, all these events are seamlessly indexed, ensuring easy and efficient querying.</p>\n","isPage":true,"text":"\nEvents play a pivotal role in decoding the dynamics of a Dojo world. Every time there&#x27;s an update to a Model, the World contract emits these events. What&#x27;s even more exciting is that you can craft your own custom events to fit specific needs! Moreover, thanks to Torii, all these events are seamlessly indexed, ensuring easy and efficient querying.\n","title":"Events","titles":[null]},"18":{"href":"/cairo/events#model-events","html":"\n<p>Consider this example of a <code>Moves</code> model:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Address</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>When this model is updated, the <code>World</code> contract will emit an event with the following structure:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> StoreSetRecord</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    table</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span><span style=\"color:#768390\"> // Moves</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    keys</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;,</span><span style=\"color:#768390\"> // [player]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    offset</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span><span style=\"color:#768390\"> // offset for the value in the table</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    value</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;,</span><span style=\"color:#768390\"> // [remaining]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>This will then be captured by <a href=\"/toolchain/torii/overview.md\">Torii</a> and indexed for querying. This will allow you to then reconstruct the state of your world.</p>\n<p>Similarly, when a model is deleted, the <code>World</code> contract will emit an event with the following structure:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> StoreDelRecord</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    table</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    keys</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nConsider this example of a Moves model:\nstruct Moves {\n    #[key]\n    player: Address,\n    remaining: u32,\n}\nWhen this model is updated, the World contract will emit an event with the following structure:\n#[derive(Drop, starknet::Event)]\nstruct StoreSetRecord {\n    table: felt252, // Moves\n    keys: Span&lt;felt252&gt;, // [player]\n    offset: u8, // offset for the value in the table\n    value: Span&lt;felt252&gt;, // [remaining]\n}\nThis will then be captured by Torii and indexed for querying. This will allow you to then reconstruct the state of your world.\nSimilarly, when a model is deleted, the World contract will emit an event with the following structure:\n#[derive(Drop, starknet::Event)]\nstruct StoreDelRecord {\n    table: felt252,\n    keys: Span&lt;felt252&gt;,\n}\n","title":"Model Events","titles":[null,"Events"]},"19":{"href":"/cairo/events#world-events","html":"\n<p>The <code>World</code> contract also emits events when it&#x27;s initialized and when new models and contracts are registered. These events are emitted with the following structures:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> WorldSpawned</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    caller</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> ModelRegistered</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    name</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    class_hash</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    prev_class_hash</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ClassHash</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> ContractDeployed</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    salt</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    class_hash</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> ContractUpgraded</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    class_hash</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>These events are also captured by <a href=\"/toolchain/torii/overview.md\">Torii</a> and indexed for querying.</p>\n","isPage":false,"text":"\nThe World contract also emits events when it&#x27;s initialized and when new models and contracts are registered. These events are emitted with the following structures:\n#[derive(Drop, starknet::Event)]\nstruct WorldSpawned {\n    address: ContractAddress,\n    caller: ContractAddress\n}\n#[derive(Drop, starknet::Event)]\nstruct ModelRegistered {\n    name: felt252,\n    class_hash: ClassHash,\n    prev_class_hash: ClassHash\n}\n#[derive(Drop, starknet::Event)]\nstruct ContractDeployed {\n    salt: felt252,\n    class_hash: ClassHash,\n    address: ContractAddress,\n}\n \n#[derive(Drop, starknet::Event)]\nstruct ContractUpgraded {\n    class_hash: ClassHash,\n    address: ContractAddress,\n}\nThese events are also captured by Torii and indexed for querying.\n","title":"World Events","titles":[null,"Events"]},"20":{"href":"/cairo/events#custom-events","html":"\n<p>Within your game, emitting custom events can be highly beneficial. Fortunately, there&#x27;s a handy <code>emit!</code> command that lets you release events directly from your world. These events are indexed by <a href=\"/toolchain/torii/overview.md\">Torii</a>.</p>\n<p>Use it like so:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">emit!</span><span style=\"color:#ADBAC7\">(world, </span><span style=\"color:#F69D50\">Moved</span><span style=\"color:#ADBAC7\"> { address, direction });</span></span></code></pre></figure>\n<p>Include this in your contract and it will emit an event with the following structure:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Moved</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    address</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Now a full example using a custom event:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">fn</span><span style=\"color:#DCBDFB\"> move</span><span style=\"color:#ADBAC7\">(ctx</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Context</span><span style=\"color:#ADBAC7\">, direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F47067\">mut</span><span style=\"color:#ADBAC7\"> position, </span><span style=\"color:#F47067\">mut</span><span style=\"color:#ADBAC7\"> moves) </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get </span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, caller, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">remaining </span><span style=\"color:#F47067\">-=</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> next </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> next_position</span><span style=\"color:#ADBAC7\">(position, direction);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    set </span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (moves, next));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    emit </span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, </span><span style=\"color:#F69D50\">Moved</span><span style=\"color:#ADBAC7\"> { address</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> caller, direction });</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<blockquote>\n<p>Note: Read about the <code>get!</code> and <code>set!</code> macros in <a href=\"/cairo/commands.md\">Commands</a>.</p>\n</blockquote>","isPage":false,"text":"\nWithin your game, emitting custom events can be highly beneficial. Fortunately, there&#x27;s a handy emit! command that lets you release events directly from your world. These events are indexed by Torii.\nUse it like so:\nemit!(world, Moved { address, direction });\nInclude this in your contract and it will emit an event with the following structure:\n#[derive(Drop, starknet::Event)]\nstruct Moved {\n    address: felt252,\n    direction: felt252,\n}\nNow a full example using a custom event:\nfn move(ctx: Context, direction: Direction) {\n    let (mut position, mut moves) = get !(world, caller, (Position, Moves));\n    moves.remaining -= 1;\n \n    let next = next_position(position, direction);\n    set !(world, (moves, next));\n    emit !(world, Moved { address: caller, direction });\n}\n\nNote: Read about the get! and set! macros in Commands.\n","title":"Custom Events","titles":[null,"Events"]},"21":{"href":"/cairo/hello-dojo#hello-dojo","html":"</header>\n<blockquote>\n<p>This section assumes that you have already installed the Dojo toolchain and are familiar with Cairo. If not, please refer to the <a href=\"/getting-started/quick-start.md\">Getting Started</a> section.</p>\n</blockquote>\n","isPage":true,"text":"\n\nThis section assumes that you have already installed the Dojo toolchain and are familiar with Cairo. If not, please refer to the Getting Started section.\n\n","title":"Hello Dojo","titles":[]},"22":{"href":"/cairo/hello-dojo#dojo-as-an-ecs-in-15-minutes","html":"\n<p>Although Dojo isn&#x27;t exclusively an Entity Component System (ECS) framework, we recommend adopting this robust design pattern. In this context, systems shape the environment&#x27;s logic, while components (<a href=\"/cairo/models.md\">models</a>) mirror the state of the world. By taking this route, you&#x27;ll benefit from a structured and modular framework. This framework promises both flexibility and scalability in a continuously evolving world. If this seems a bit intricate at first, hang tight; we&#x27;ll delve into the details shortly.</p>\n<p>To start, let&#x27;s set up a project to run locally on your machine. From an empty directory, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> init</span></span></code></pre></figure>\n<p>Congratulations! You now have a local Dojo project. This command creates a <code>dojo-starter</code> project in your current directory. It&#x27;s the ideal starting point for a new project and equips you with everything you need to begin.</p>\n","isPage":false,"text":"\nAlthough Dojo isn&#x27;t exclusively an Entity Component System (ECS) framework, we recommend adopting this robust design pattern. In this context, systems shape the environment&#x27;s logic, while components (models) mirror the state of the world. By taking this route, you&#x27;ll benefit from a structured and modular framework. This framework promises both flexibility and scalability in a continuously evolving world. If this seems a bit intricate at first, hang tight; we&#x27;ll delve into the details shortly.\nTo start, let&#x27;s set up a project to run locally on your machine. From an empty directory, execute:\nsozo init\nCongratulations! You now have a local Dojo project. This command creates a dojo-starter project in your current directory. It&#x27;s the ideal starting point for a new project and equips you with everything you need to begin.\n","title":"Dojo as an ECS in 15 Minutes","titles":["Hello Dojo"]},"23":{"href":"/cairo/hello-dojo#anatomy-of-a-dojo-project","html":"\n<p>Inspect the contents of the <code>dojo-starter</code> project, and you&#x27;ll notice the following structure (excluding the non-Cairo files):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">src</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -</span><span style=\"color:#96D0FF\"> models</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    -</span><span style=\"color:#96D0FF\"> position.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    -</span><span style=\"color:#96D0FF\"> moves.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -</span><span style=\"color:#96D0FF\"> systems</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    -</span><span style=\"color:#96D0FF\"> actions.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -</span><span style=\"color:#96D0FF\"> tests</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    -</span><span style=\"color:#96D0FF\"> test_world.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -</span><span style=\"color:#96D0FF\"> lib.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Scarb.toml</span></span></code></pre></figure>\n<p>As Dojo projects bear a strong resemblance to typical Cairo projects, the primary difference lies in the inclusion of a special attribute tag used to define data models, which we refer to as <code>components</code> in this context.</p>\n<p>Since we&#x27;re crafting an ECS, it&#x27;s essential to adhere to the specific terminology associated with Entity Component Systems.</p>\n<p>Next, open the <code>src/models/moves.cairo</code> file to continue.&quot;</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    last_direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">rest of code</span></span></code></pre></figure>\n<p>Notice the <code>#[derive(Model, Drop, Serde)]</code> attributes. For a model to be recognized, we <em>must</em> include <code>Model</code>. This signals to the Dojo compiler that this struct should be treated as a model.</p>\n<p>Our <code>Moves</code> model houses a <code>player</code> field. At the same time, we have the <code>#[key]</code> attribute, it informs Dojo that this model is indexed by the <code>player</code> field. If this is unfamiliar to you, we&#x27;ll clarify its importance later in the chapter. Essentially, it implies that you can query this model using the <code>player</code> field. Our <code>Moves</code> model also contains the <code>remaining</code> and <code>last_direction</code> fields</p>\n<p>Next, open the <code>src/models/position.cairo</code> file to continue.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    vec</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Introspect</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    x</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    y</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">...</span><span style=\"color:#ADBAC7\">rest of code</span></span></code></pre></figure>\n<p>In a similar vein, we have a <code>Position</code> model that have a Vec2 data structure. Vec holds <code>x</code> and <code>y</code> values. Once again, this model is indexed by the <code>player</code> field.</p>\n<p>Now, let&#x27;s examine the contents of the <code>src/systems/actions.cairo</code> file.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> dojo_starter</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">moves</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Direction</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> dojo_starter</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">position</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// define the interface</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">interface]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> IActions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> spawn</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> move</span><span style=\"color:#ADBAC7\">(direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// dojo decorator</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> actions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#6CB6FF\"> super</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">IActions</span><span style=\"color:#ADBAC7\">, next_position};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">, get_caller_address};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_starter</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">position</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\">}, </span><span style=\"color:#F69D50\">moves</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Direction</span><span style=\"color:#ADBAC7\">}};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // declaring custom event struct</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[event]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    enum</span><span style=\"color:#F69D50\"> Event</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Moved</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Moved</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // declaring custom event struct</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[derive(starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    struct</span><span style=\"color:#F69D50\"> Moved</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // impl: implement functions specified in trait</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> ActionsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">IActions</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> spawn</span><span style=\"color:#ADBAC7\">(world</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> IWorldDispatcher</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Get the address of the current caller, possibly the player&#x27;s address.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Retrieve the player&#x27;s current position from the world.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> position </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Retrieve the player&#x27;s move data, e.g., how many moves they have left.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> moves </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Update the world state with the new data.</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // 1. Set players moves to 100</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // 2. Initialize player&#x27;s position to (10,10)</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        player, remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">remaining </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">, last_direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        player, vec</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // Implementation of the move function for the ContractState struct.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> move</span><span style=\"color:#ADBAC7\">(world</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> IWorldDispatcher</span><span style=\"color:#ADBAC7\">, direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Get the address of the current caller, possibly the player&#x27;s address.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Retrieve the player&#x27;s current position and moves data from the world.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F47067\">mut</span><span style=\"color:#ADBAC7\"> position, </span><span style=\"color:#F47067\">mut</span><span style=\"color:#ADBAC7\"> moves) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Deduct one from the player&#x27;s remaining moves.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">remaining </span><span style=\"color:#F47067\">-=</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Update the last direction the player moved in.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">last_direction </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> direction;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Calculate the player&#x27;s next position based on the provided direction.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> next </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> next_position</span><span style=\"color:#ADBAC7\">(position, direction);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // // Update the world state with the new moves data and position.</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(world, (moves, next));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Emit an event to the world to notify about the player&#x27;s move.</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            emit!</span><span style=\"color:#ADBAC7\">(world, </span><span style=\"color:#F69D50\">Moved</span><span style=\"color:#ADBAC7\"> { player, direction });</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Define function like this:</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">fn</span><span style=\"color:#DCBDFB\"> next_position</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">mut</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\">, direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    match</span><span style=\"color:#ADBAC7\"> direction {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> { </span><span style=\"color:#F47067\">return</span><span style=\"color:#ADBAC7\"> position; },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Left</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> { position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">-=</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">; },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Right</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> { position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">+=</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">; },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Up</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> { position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">-=</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">; },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Down</span><span style=\"color:#F47067\"> =&gt;</span><span style=\"color:#ADBAC7\"> { position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">+=</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">; },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    position</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nInspect the contents of the dojo-starter project, and you&#x27;ll notice the following structure (excluding the non-Cairo files):\nsrc\n  - models\n    - position.cairo\n    - moves.cairo\n  - systems\n    - actions.cairo\n  - tests\n    - test_world.cairo\n  - lib.cairo\nScarb.toml\nAs Dojo projects bear a strong resemblance to typical Cairo projects, the primary difference lies in the inclusion of a special attribute tag used to define data models, which we refer to as components in this context.\nSince we&#x27;re crafting an ECS, it&#x27;s essential to adhere to the specific terminology associated with Entity Component Systems.\nNext, open the src/models/moves.cairo file to continue.&quot;\n#[derive(Model, Drop, Serde)]\nstruct Moves {\n    #[key]\n    player: ContractAddress,\n    remaining: u8,\n    last_direction: Direction\n}\n...rest of code\nNotice the #[derive(Model, Drop, Serde)] attributes. For a model to be recognized, we must include Model. This signals to the Dojo compiler that this struct should be treated as a model.\nOur Moves model houses a player field. At the same time, we have the #[key] attribute, it informs Dojo that this model is indexed by the player field. If this is unfamiliar to you, we&#x27;ll clarify its importance later in the chapter. Essentially, it implies that you can query this model using the player field. Our Moves model also contains the remaining and last_direction fields\nNext, open the src/models/position.cairo file to continue.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Position {\n    #[key]\n    player: ContractAddress,\n    vec: Vec2,\n}\n \n#[derive(Copy, Drop, Serde, Introspect)]\nstruct Vec2 {\n    x: u32,\n    y: u32\n}\n...rest of code\nIn a similar vein, we have a Position model that have a Vec2 data structure. Vec holds x and y values. Once again, this model is indexed by the player field.\nNow, let&#x27;s examine the contents of the src/systems/actions.cairo file.\nuse dojo_starter::models::moves::Direction;\nuse dojo_starter::models::position::Position;\n \n// define the interface\n#[dojo::interface]\ntrait IActions {\n    fn spawn();\n    fn move(direction: Direction);\n}\n \n// dojo decorator\n#[dojo::contract]\nmod actions {\n    use super::{IActions, next_position};\n \n    use starknet::{ContractAddress, get_caller_address};\n    use dojo_starter::models::{position::{Position, Vec2}, moves::{Moves, Direction}};\n \n    // declaring custom event struct\n    #[event]\n    #[derive(Drop, starknet::Event)]\n    enum Event {\n        Moved: Moved,\n    }\n \n    // declaring custom event struct\n    #[derive(starknet::Event, Model, Copy, Drop, Serde)]\n    struct Moved {\n        #[key]\n        player: ContractAddress,\n        direction: Direction\n    }\n \n    // impl: implement functions specified in trait\n    #[abi(embed_v0)]\n    impl ActionsImpl of IActions&lt;ContractState&gt; {\n        fn spawn(world: IWorldDispatcher) {\n            // Get the address of the current caller, possibly the player&#x27;s address.\n            let player = get_caller_address();\n            // Retrieve the player&#x27;s current position from the world.\n            let position = get!(world, player, (Position));\n            // Retrieve the player&#x27;s move data, e.g., how many moves they have left.\n            let moves = get!(world, player, (Moves));\n \n            // Update the world state with the new data.\n            // 1. Set players moves to 100\n            // 2. Initialize player&#x27;s position to (10,10)\n            set!(\n                world,\n                (\n                    Moves {\n                        player, remaining: moves.remaining + 1, last_direction: Direction::None(())\n                    },\n                    Position {\n                        player, vec: Vec2 { x: position.vec.x + 10, y: position.vec.y + 10 }\n                    },\n                )\n            );\n        }\n \n        // Implementation of the move function for the ContractState struct.\n        fn move(world: IWorldDispatcher, direction: Direction) {\n            // Get the address of the current caller, possibly the player&#x27;s address.\n            let player = get_caller_address();\n \n            // Retrieve the player&#x27;s current position and moves data from the world.\n            let (mut position, mut moves) = get!(world, player, (Position, Moves));\n \n            // Deduct one from the player&#x27;s remaining moves.\n            moves.remaining -= 1;\n \n            // Update the last direction the player moved in.\n            moves.last_direction = direction;\n \n            // Calculate the player&#x27;s next position based on the provided direction.\n            let next = next_position(position, direction);\n \n            // // Update the world state with the new moves data and position.\n            set!(world, (moves, next));\n \n            // Emit an event to the world to notify about the player&#x27;s move.\n            emit!(world, Moved { player, direction });\n        }\n    }\n}\n \n// Define function like this:\nfn next_position(mut position: Position, direction: Direction) -&gt; Position {\n    match direction {\n        Direction::None =&gt; { return position; },\n        Direction::Left =&gt; { position.vec.x -= 1; },\n        Direction::Right =&gt; { position.vec.x += 1; },\n        Direction::Up =&gt; { position.vec.y -= 1; },\n        Direction::Down =&gt; { position.vec.y += 1; },\n    };\n    position\n}\n","title":"Anatomy of a Dojo Project","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes",null]},"24":{"href":"/cairo/hello-dojo#breaking-it-down","html":"\n","isPage":false,"text":"\n","title":"Breaking it down","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"25":{"href":"/cairo/hello-dojo#system-is-a-function-in-a-contract","html":"\n<p>As you can see a <code>System</code> is like a regular function of a Dojo(Starknet) contract. It imports the Models we defined earlier and exposes two functions <code>spawn</code> and <code>move</code>. These functions are called when a player spawns into the world and when they move respectively.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// Retrieve the player&#x27;s current position from the world.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> position </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Retrieve the player&#x27;s move data, e.g., how many moves they have left.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> moves </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span></code></pre></figure>\n<p>Here we use <code>get!</code> <a href=\"/cairo/commands.md\">command</a> to retrieve the <code>Position</code> and <code>Moves</code> model for the <code>player</code> entity, which is the address of the caller.</p>\n<p>Now the next line:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// Update the world state with the new data.</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// 1. Increase the player&#x27;s remaining moves by 1.</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// 2. Move the player&#x27;s position 10 units in both the x and y direction.</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            player, remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">remaining </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">, last_direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            player, vec</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure>\n<p>Here we use the <code>set!</code> <a href=\"/cairo/commands.md\">command</a> to set the <code>Moves</code> and <code>Position</code> models for the <code>player</code> entity.</p>\n<p>We covered a lot here in a short time. Let&#x27;s recap:</p>\n<ul>\n<li>Explained the anatomy of a Dojo project</li>\n<li>Explained the importance of the <code>#[derive(Model)]</code>attribute</li>\n<li>Explained the <code>spawn</code> and <code>move</code> functions</li>\n<li>Explained the <code>Moves</code> and <code>Position</code> struct</li>\n<li>Touched on the <code>get!</code> and <code>set!</code> commands</li>\n</ul>\n","isPage":false,"text":"\nAs you can see a System is like a regular function of a Dojo(Starknet) contract. It imports the Models we defined earlier and exposes two functions spawn and move. These functions are called when a player spawns into the world and when they move respectively.\n// Retrieve the player&#x27;s current position from the world.\nlet position = get!(world, player, (Position));\n \n// Retrieve the player&#x27;s move data, e.g., how many moves they have left.\nlet moves = get!(world, player, (Moves));\nHere we use get! command to retrieve the Position and Moves model for the player entity, which is the address of the caller.\nNow the next line:\n// Update the world state with the new data.\n// 1. Increase the player&#x27;s remaining moves by 1.\n// 2. Move the player&#x27;s position 10 units in both the x and y direction.\nset!(\n    world,\n    (\n        Moves {\n            player, remaining: moves.remaining + 1, last_direction: Direction::None\n        },\n        Position {\n            player, vec: Vec2 { x: position.vec.x + 10, y: position.vec.y + 10}\n        },\n    )\n);\nHere we use the set! command to set the Moves and Position models for the player entity.\nWe covered a lot here in a short time. Let&#x27;s recap:\n\nExplained the anatomy of a Dojo project\nExplained the importance of the #[derive(Model)]attribute\nExplained the spawn and move functions\nExplained the Moves and Position struct\nTouched on the get! and set! commands\n\n","title":"System is a function in a contract","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes","Breaking it down"]},"26":{"href":"/cairo/hello-dojo#run-it-locally","html":"\n<p>Now that we&#x27;ve covered some theory, let&#x27;s build the Dojo project! In your primary terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>That compiled the models and system into an artifact that can be deployed! Simple as that!</p>\n<p>Now, let&#x27;s deploy it to <a href=\"/toolchain/katana/overview.md\">Katana</a>! First, we need to get Katana running. Open a second terminal and execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --disable-fee</span></span></code></pre></figure>\n<p>Success! <a href=\"/toolchain/katana/overview.md\">Katana</a> should now be running locally on your machine. Now, let&#x27;s deploy! In your primary terminal, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate</span></span></code></pre></figure>\n<p>This command will deploy the artifact to <a href=\"/toolchain/katana/overview.md\">Katana</a>. You should see terminal output similar to this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">Migration account: 0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">World name: dojo_starter</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Chain ID: KATANA</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">[1] 🌎 Building World state....</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; No remote World found</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">[2] 🧰 Evaluating Worlds diff....</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Total diffs found: 5</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">[3] 📦 Preparing for migration....</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Total items to be migrated (5): New 5 Update 0</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\"># Base Contract</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Class Hash: 0x679177a2cb757694ac4f326d01052ff0963eac0bc2a17116a2b87badcdf6f76</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\"># World</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Contract address: 0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Set Metadata transaction: 0x2acbbe239dae2d122c18b3efb0698c00ceb25d7ef9103e63879dce593f8afee</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Metadata uri: ipfs://QmcgVv9FGthd1TSm7fUh2dzyQ9Son8EBmntRC1UmKsFuTx</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\"># Models (</span><span style=\"color:#F69D50\">3</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">dojo_starter::systems::actions::actions::moved</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Class hash: 0xf00737ffe57c5c931bfec9a7ea66f76d5eaae12cacca6952dcee0c2e3d8038</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">dojo_starter::models::moves::moves</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Class hash: 0x23c28dcfad6be01ca6509fdb35fd2bed6622238397613c60da5d387a43c38d0</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">dojo_starter::models::position::position</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Class hash: 0x2e9c42b868b520d54bff1b7f4c9b91f39bb2e2ad1c39d6484fb5d8a95382e01</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">All models are registered at: 0x2c8998d162d40e9313fd2f7d3e0a8898db1ceb25bb9de1ec463686286c010cd</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\"># Contracts (</span><span style=\"color:#F69D50\">1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">dojo_starter::systems::actions::actions</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">  &gt; Contract address: 0x7ec42d76c6d876b8f219c20b6a152fe35fe2afc62c471b29ba689c2f6a075b3</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">🎉 Successfully migrated World on block #3 at address 0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">✨ Updating manifests...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">✨ Done.</span></span></code></pre></figure>\n<p>Your 🌎 is now deployed at <code>0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8</code>!</p>\n<p>This establishes the world address for your project.</p>\n<p>Let&#x27;s discuss the <code>Scarb.toml</code> file in the project. This file contains environment variables that make running CLI commands in your project a breeze (read more about it <a href=\"/cairo/config.md\">here</a>). On this file, you have to update the value of <code>world_address</code> with the address we got from the output of <code>sozo migrate</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">env</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;http://localhost:5050/&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Default account for katana with seed = 0</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;0x1800000000300000180000000000030000000000003006001800006600&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">world_address = </span><span style=\"color:#96D0FF\">&quot;0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8&quot;</span><span style=\"color:#768390\"> # Update this line with your world address</span></span></code></pre></figure>\n<p>At the same time, make sure your file specifies the version of Dojo you have installed! In this case version <code>0.6.0-alpha.7</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, tag = </span><span style=\"color:#96D0FF\">&quot;v0.6.0-alpha.7&quot;</span><span style=\"color:#ADBAC7\"> }</span></span></code></pre></figure>\n","isPage":false,"text":"\nNow that we&#x27;ve covered some theory, let&#x27;s build the Dojo project! In your primary terminal:\nsozo build\nThat compiled the models and system into an artifact that can be deployed! Simple as that!\nNow, let&#x27;s deploy it to Katana! First, we need to get Katana running. Open a second terminal and execute:\nkatana --disable-fee\nSuccess! Katana should now be running locally on your machine. Now, let&#x27;s deploy! In your primary terminal, execute:\nsozo migrate\nThis command will deploy the artifact to Katana. You should see terminal output similar to this:\nMigration account: 0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03\n \nWorld name: dojo_starter\n \nChain ID: KATANA\n \n[1] 🌎 Building World state....\n  &gt; No remote World found\n[2] 🧰 Evaluating Worlds diff....\n  &gt; Total diffs found: 5\n[3] 📦 Preparing for migration....\n  &gt; Total items to be migrated (5): New 5 Update 0\n \n# Base Contract\n  &gt; Class Hash: 0x679177a2cb757694ac4f326d01052ff0963eac0bc2a17116a2b87badcdf6f76\n# World\n  &gt; Contract address: 0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8\n  &gt; Set Metadata transaction: 0x2acbbe239dae2d122c18b3efb0698c00ceb25d7ef9103e63879dce593f8afee\n  &gt; Metadata uri: ipfs://QmcgVv9FGthd1TSm7fUh2dzyQ9Son8EBmntRC1UmKsFuTx\n# Models (3)\ndojo_starter::systems::actions::actions::moved\n  &gt; Class hash: 0xf00737ffe57c5c931bfec9a7ea66f76d5eaae12cacca6952dcee0c2e3d8038\ndojo_starter::models::moves::moves\n  &gt; Class hash: 0x23c28dcfad6be01ca6509fdb35fd2bed6622238397613c60da5d387a43c38d0\ndojo_starter::models::position::position\n  &gt; Class hash: 0x2e9c42b868b520d54bff1b7f4c9b91f39bb2e2ad1c39d6484fb5d8a95382e01\nAll models are registered at: 0x2c8998d162d40e9313fd2f7d3e0a8898db1ceb25bb9de1ec463686286c010cd\n# Contracts (1)\ndojo_starter::systems::actions::actions\n  &gt; Contract address: 0x7ec42d76c6d876b8f219c20b6a152fe35fe2afc62c471b29ba689c2f6a075b3\n \n🎉 Successfully migrated World on block #3 at address 0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8\n \n✨ Updating manifests...\n \n✨ Done.\nYour 🌎 is now deployed at 0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8!\nThis establishes the world address for your project.\nLet&#x27;s discuss the Scarb.toml file in the project. This file contains environment variables that make running CLI commands in your project a breeze (read more about it here). On this file, you have to update the value of world_address with the address we got from the output of sozo migrate.\n[tool.dojo.env]\nrpc_url = &quot;http://localhost:5050/&quot;\n# Default account for katana with seed = 0\naccount_address = &quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;\nprivate_key = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;\nworld_address = &quot;0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8&quot; # Update this line with your world address\nAt the same time, make sure your file specifies the version of Dojo you have installed! In this case version 0.6.0-alpha.7.\n[dependencies]\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, tag = &quot;v0.6.0-alpha.7&quot; }\n","title":"Run it locally!","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"27":{"href":"/cairo/hello-dojo#indexing","html":"\n<p>With your local world address established, let&#x27;s delve into indexing. You can index the entire world. To accomplish this we have to copy your <code>world address</code> from the output of <code>sozo migrate</code>. Now Open a new terminal and input this simple command that includes your own world address:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#6CB6FF\"> 0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8</span></span></code></pre></figure>\n<p>Running the command mentioned above starts a <a href=\"/toolchain/torii/overview.md\">Torii</a> server on your local machine. This server uses SQLite as its database and is accessible at <a href=\"http://0.0.0.0:8080/graphql\">http://0.0.0.0:8080/graphql</a>. <code>Torii</code> will automatically organize your data into tables, making it easy for you to perform queries using GraphQL. When you run the command, you&#x27;ll see terminal output that looks something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.305489Z  INFO torii::relay::server: Relay peer id peer_id=12D3KooWF2CrpqMsHveDqVLtuiGfQur5zTwSFXgu4izK4gFVoCJX</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.311246Z  INFO libp2p_swarm: local_peer_id=12D3KooWF2CrpqMsHveDqVLtuiGfQur5zTwSFXgu4izK4gFVoCJX</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.314052Z  INFO torii::cli: Starting torii endpoint: http://0.0.0.0:8080</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.314065Z  INFO torii::cli: Serving Graphql playground: http://0.0.0.0:8080/graphql</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.314070Z  INFO torii::cli: World Explorer is available on: https://worlds.dev/torii?url=http%3A%2F%2Flocalhost%3A8080%2Fgraphql</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315318Z  INFO torii::relay::server: New listen address address=/ip4/127.0.0.1/tcp/9090</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315336Z  INFO torii::relay::server: New listen address address=/ip4/192.168.100.28/tcp/9090</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315340Z  INFO torii::relay::server: New listen address address=/ip4/172.17.0.1/tcp/9090</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315374Z  INFO torii::relay::server: New listen address address=/ip4/127.0.0.1/udp/9090/quic-v1</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315379Z  INFO torii::relay::server: New listen address address=/ip4/192.168.100.28/udp/9090/quic-v1</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315383Z  INFO torii::relay::server: New listen address address=/ip4/172.17.0.1/udp/9090/quic-v1</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315555Z  INFO torii::relay::server: New listen address address=/ip4/127.0.0.1/udp/9091/webrtc-direct/certhash/uEiBNe_o7CBNfrOrx0yDPdKlGN8ODgfdG6VcJnNUGt5EXKQ</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315563Z  INFO torii::relay::server: New listen address address=/ip4/192.168.100.28/udp/9091/webrtc-direct/certhash/uEiBNe_o7CBNfrOrx0yDPdKlGN8ODgfdG6VcJnNUGt5EXKQ</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.315746Z  INFO torii::relay::server: New listen address address=/ip4/172.17.0.1/udp/9091/webrtc-direct/certhash/uEiBNe_o7CBNfrOrx0yDPdKlGN8ODgfdG6VcJnNUGt5EXKQ</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.321750Z  INFO torii_core::engine: processed block: 0</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.323093Z  INFO torii_core::engine: processed block: 1</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.323538Z  INFO torii_core::engine: processed block: 2</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.324375Z  INFO torii_core::engine: processed block: 3</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.325597Z  INFO torii_core::processors::metadata_update: Resource 0x0 metadata set: ipfs://QmcgVv9FGthd1TSm7fUh2dzyQ9Son8EBmntRC1UmKsFuTx/</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.325648Z  INFO torii_core::engine: processed block: 4</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.326382Z  INFO torii_core::engine: processed block: 5</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.326812Z  INFO torii_core::engine: processed block: 6</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.327265Z  INFO torii_core::engine: processed block: 7</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.332613Z  INFO torii_core::processors::register_model: Registered model name=&quot;Moved&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.339471Z  INFO torii_core::processors::register_model: Registered model name=&quot;Moves&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.346717Z  INFO torii_core::processors::register_model: Registered model name=&quot;Position&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.348367Z  INFO torii_core::engine: processed block: 8</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.349451Z  INFO torii_core::engine: processed block: 9</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:07.350306Z  INFO torii_core::engine: processed block: 10</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">2024-03-24T07:01:11.359573Z  INFO torii_core::processors::metadata_update: Updated resource 0x0 metadata from ipfs</span></span></code></pre></figure>\n<p>You can observe that our <code>Moves</code> and <code>Position</code> models have been successfully registered.\nNext, let&#x27;s use the GraphiQL IDE to retrieve data from the <code>Moves</code> model. In your web browser, navigate to <code>http://0.0.0.0:8080/graphql</code>, and enter the following query:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  model</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">id</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    name</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    classHash</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    transactionHash</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    createdAt</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>After you run the query, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;model&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;name&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;classHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x23c28dcfad6be01ca6509fdb35fd2bed6622238397613c60da5d387a43c38d0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2024-03-24T07:01:07+00:00&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Awesome, now let&#x27;s work with subscriptions to get real-time updates. Let&#x27;s clean up your workspace on the GraphiQL IDE and input the following subscription:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entityUpdated</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    keys</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    eventId</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    createdAt</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    updatedAt</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Once you execute the subscription, you will receive notifications whenever new entities are updated or created. For now, don&#x27;t make any changes to it, and proceed to create a new entity.</p>\n<p>To accomplish this, we have to go back to our primary terminal and check the contracts section.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Contracts (1)</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">dojo_starter::systems::actions::actions</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Contract</span><span style=\"color:#96D0FF\"> address: </span><span style=\"color:#6CB6FF\">0x7ec42d76c6d876b8f219c20b6a152fe35fe2afc62c471b29ba689c2f6a075b3</span></span></code></pre></figure>\n<p>We have to use <code>actions</code> contract address to start to create entities. In your main local terminal, run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> execute </span><span style=\"color:#6CB6FF\">0x7ec42d76c6d876b8f219c20b6a152fe35fe2afc62c471b29ba689c2f6a075b3</span><span style=\"color:#96D0FF\"> spawn</span></span></code></pre></figure>\n<p>By running this command, you&#x27;ve activated the spawn system, resulting in the creation of a new entity. This action establishes a local world that you can interact with.</p>\n<p>Now, go back to your GraphiQL IDE, and you will notice that you have received the subscription&#x27;s results, which should look something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;entityUpdated&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x2038e0daba5c3948a6289e91e2a68dfc28e734a281c753933b8bd331e6d3dae&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;eventId&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2024-03-24T07:06:52Z&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;updatedAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2024-03-24T07:06:52Z&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">--------------------------------------------------------------------------------------------------------</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;entityUpdated&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x2038e0daba5c3948a6289e91e2a68dfc28e734a281c753933b8bd331e6d3dae&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;eventId&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0001&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2024-03-24T07:06:52Z&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;updatedAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2024-03-24T07:06:52Z&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>In the GraphiQL IDE, by clicking the <code>DOCS</code>-button on the right, you can open the API documentation. This documentation is auto-generated based on our schema definition and displays all API operations and data types of our schema.. In order to know more about query and subscription, you can jump to <a href=\"/toolchain/torii/graphql.md\">GraphQL</a> section.\nWe&#x27;ve covered quite a bit! Here&#x27;s a recap:</p>\n<ul>\n<li>Built a Dojo world</li>\n<li>Deployed the project to Katana</li>\n<li>Indexed the world with Torii</li>\n<li>Ran the spawn system locally</li>\n<li>Interacted with GraphQL</li>\n</ul>\n","isPage":false,"text":"\nWith your local world address established, let&#x27;s delve into indexing. You can index the entire world. To accomplish this we have to copy your world address from the output of sozo migrate. Now Open a new terminal and input this simple command that includes your own world address:\ntorii --world 0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8\nRunning the command mentioned above starts a Torii server on your local machine. This server uses SQLite as its database and is accessible at http://0.0.0.0:8080/graphql. Torii will automatically organize your data into tables, making it easy for you to perform queries using GraphQL. When you run the command, you&#x27;ll see terminal output that looks something like this:\n2024-03-24T07:01:07.305489Z  INFO torii::relay::server: Relay peer id peer_id=12D3KooWF2CrpqMsHveDqVLtuiGfQur5zTwSFXgu4izK4gFVoCJX\n2024-03-24T07:01:07.311246Z  INFO libp2p_swarm: local_peer_id=12D3KooWF2CrpqMsHveDqVLtuiGfQur5zTwSFXgu4izK4gFVoCJX\n2024-03-24T07:01:07.314052Z  INFO torii::cli: Starting torii endpoint: http://0.0.0.0:8080\n2024-03-24T07:01:07.314065Z  INFO torii::cli: Serving Graphql playground: http://0.0.0.0:8080/graphql\n2024-03-24T07:01:07.314070Z  INFO torii::cli: World Explorer is available on: https://worlds.dev/torii?url=http%3A%2F%2Flocalhost%3A8080%2Fgraphql\n \n2024-03-24T07:01:07.315318Z  INFO torii::relay::server: New listen address address=/ip4/127.0.0.1/tcp/9090\n2024-03-24T07:01:07.315336Z  INFO torii::relay::server: New listen address address=/ip4/192.168.100.28/tcp/9090\n2024-03-24T07:01:07.315340Z  INFO torii::relay::server: New listen address address=/ip4/172.17.0.1/tcp/9090\n2024-03-24T07:01:07.315374Z  INFO torii::relay::server: New listen address address=/ip4/127.0.0.1/udp/9090/quic-v1\n2024-03-24T07:01:07.315379Z  INFO torii::relay::server: New listen address address=/ip4/192.168.100.28/udp/9090/quic-v1\n2024-03-24T07:01:07.315383Z  INFO torii::relay::server: New listen address address=/ip4/172.17.0.1/udp/9090/quic-v1\n2024-03-24T07:01:07.315555Z  INFO torii::relay::server: New listen address address=/ip4/127.0.0.1/udp/9091/webrtc-direct/certhash/uEiBNe_o7CBNfrOrx0yDPdKlGN8ODgfdG6VcJnNUGt5EXKQ\n2024-03-24T07:01:07.315563Z  INFO torii::relay::server: New listen address address=/ip4/192.168.100.28/udp/9091/webrtc-direct/certhash/uEiBNe_o7CBNfrOrx0yDPdKlGN8ODgfdG6VcJnNUGt5EXKQ\n2024-03-24T07:01:07.315746Z  INFO torii::relay::server: New listen address address=/ip4/172.17.0.1/udp/9091/webrtc-direct/certhash/uEiBNe_o7CBNfrOrx0yDPdKlGN8ODgfdG6VcJnNUGt5EXKQ\n2024-03-24T07:01:07.321750Z  INFO torii_core::engine: processed block: 0\n2024-03-24T07:01:07.323093Z  INFO torii_core::engine: processed block: 1\n2024-03-24T07:01:07.323538Z  INFO torii_core::engine: processed block: 2\n2024-03-24T07:01:07.324375Z  INFO torii_core::engine: processed block: 3\n2024-03-24T07:01:07.325597Z  INFO torii_core::processors::metadata_update: Resource 0x0 metadata set: ipfs://QmcgVv9FGthd1TSm7fUh2dzyQ9Son8EBmntRC1UmKsFuTx/\n2024-03-24T07:01:07.325648Z  INFO torii_core::engine: processed block: 4\n2024-03-24T07:01:07.326382Z  INFO torii_core::engine: processed block: 5\n2024-03-24T07:01:07.326812Z  INFO torii_core::engine: processed block: 6\n2024-03-24T07:01:07.327265Z  INFO torii_core::engine: processed block: 7\n2024-03-24T07:01:07.332613Z  INFO torii_core::processors::register_model: Registered model name=&quot;Moved&quot;\n2024-03-24T07:01:07.339471Z  INFO torii_core::processors::register_model: Registered model name=&quot;Moves&quot;\n2024-03-24T07:01:07.346717Z  INFO torii_core::processors::register_model: Registered model name=&quot;Position&quot;\n2024-03-24T07:01:07.348367Z  INFO torii_core::engine: processed block: 8\n2024-03-24T07:01:07.349451Z  INFO torii_core::engine: processed block: 9\n2024-03-24T07:01:07.350306Z  INFO torii_core::engine: processed block: 10\n2024-03-24T07:01:11.359573Z  INFO torii_core::processors::metadata_update: Updated resource 0x0 metadata from ipfs\nYou can observe that our Moves and Position models have been successfully registered.\nNext, let&#x27;s use the GraphiQL IDE to retrieve data from the Moves model. In your web browser, navigate to http://0.0.0.0:8080/graphql, and enter the following query:\nquery {\n  model(id: &quot;Moves&quot;) {\n    id\n    name\n    classHash\n    transactionHash\n    createdAt\n  }\n}\nAfter you run the query, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;model&quot;: {\n      &quot;id&quot;: &quot;Moves&quot;,\n      &quot;name&quot;: &quot;Moves&quot;,\n      &quot;classHash&quot;: &quot;0x23c28dcfad6be01ca6509fdb35fd2bed6622238397613c60da5d387a43c38d0&quot;,\n      &quot;transactionHash&quot;: &quot;&quot;,\n      &quot;createdAt&quot;: &quot;2024-03-24T07:01:07+00:00&quot;\n    }\n  }\n}\nAwesome, now let&#x27;s work with subscriptions to get real-time updates. Let&#x27;s clean up your workspace on the GraphiQL IDE and input the following subscription:\nsubscription {\n  entityUpdated {\n    id\n    keys\n    eventId\n    createdAt\n    updatedAt\n  }\n}\nOnce you execute the subscription, you will receive notifications whenever new entities are updated or created. For now, don&#x27;t make any changes to it, and proceed to create a new entity.\nTo accomplish this, we have to go back to our primary terminal and check the contracts section.\n# Contracts (1)\ndojo_starter::systems::actions::actions\n  &gt; Contract address: 0x7ec42d76c6d876b8f219c20b6a152fe35fe2afc62c471b29ba689c2f6a075b3\nWe have to use actions contract address to start to create entities. In your main local terminal, run the following command:\nsozo execute 0x7ec42d76c6d876b8f219c20b6a152fe35fe2afc62c471b29ba689c2f6a075b3 spawn\nBy running this command, you&#x27;ve activated the spawn system, resulting in the creation of a new entity. This action establishes a local world that you can interact with.\nNow, go back to your GraphiQL IDE, and you will notice that you have received the subscription&#x27;s results, which should look something like this:\n{\n  &quot;data&quot;: {\n    &quot;entityUpdated&quot;: {\n      &quot;id&quot;: &quot;0x2038e0daba5c3948a6289e91e2a68dfc28e734a281c753933b8bd331e6d3dae&quot;,\n      &quot;keys&quot;: [\n        &quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;\n      ],\n      &quot;eventId&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0000&quot;,\n      &quot;createdAt&quot;: &quot;2024-03-24T07:06:52Z&quot;,\n      &quot;updatedAt&quot;: &quot;2024-03-24T07:06:52Z&quot;\n    }\n  }\n}\n--------------------------------------------------------------------------------------------------------\n{\n  &quot;data&quot;: {\n    &quot;entityUpdated&quot;: {\n      &quot;id&quot;: &quot;0x2038e0daba5c3948a6289e91e2a68dfc28e734a281c753933b8bd331e6d3dae&quot;,\n      &quot;keys&quot;: [\n        &quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;\n      ],\n      &quot;eventId&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0001&quot;,\n      &quot;createdAt&quot;: &quot;2024-03-24T07:06:52Z&quot;,\n      &quot;updatedAt&quot;: &quot;2024-03-24T07:06:52Z&quot;\n    }\n  }\n}\nIn the GraphiQL IDE, by clicking the DOCS-button on the right, you can open the API documentation. This documentation is auto-generated based on our schema definition and displays all API operations and data types of our schema.. In order to know more about query and subscription, you can jump to GraphQL section.\nWe&#x27;ve covered quite a bit! Here&#x27;s a recap:\n\nBuilt a Dojo world\nDeployed the project to Katana\nIndexed the world with Torii\nRan the spawn system locally\nInteracted with GraphQL\n\n","title":"Indexing","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"28":{"href":"/cairo/hello-dojo#next-steps","html":"\n<p>This overview provides a rapid end-to-end glimpse of Dojo. However, the potential of these worlds is vast! Designed to manage hundreds of systems and components, Dojo is equipped for expansive creativity. So, what will you craft next?</p>","isPage":false,"text":"\nThis overview provides a rapid end-to-end glimpse of Dojo. However, the potential of these worlds is vast! Designed to manage hundreds of systems and components, Dojo is equipped for expansive creativity. So, what will you craft next?","title":"Next Steps","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"29":{"href":"/cairo/metadata#metadata","html":"\n<p>Dojo supports associating offchain metadata with the world contract and other deployed contracts. This can provide additional context about the world, such as it&#x27;s name, description, social links and other media. Enabling external services to easily index and distribute worlds and experiences built on them.</p>\n","isPage":true,"text":"\nDojo supports associating offchain metadata with the world contract and other deployed contracts. This can provide additional context about the world, such as it&#x27;s name, description, social links and other media. Enabling external services to easily index and distribute worlds and experiences built on them.\n","title":"Metadata","titles":[null]},"30":{"href":"/cairo/metadata#world-metadata","html":"\n<p>During migration, <code>sozo</code> will automatically manage the worlds metadata for you, uploading it to ipfs and setting it in the world contract. It does so by parsing the metadata defined in the projects <code>Scarb.toml</code>.</p>\n<p>To set a worlds metadata, create the following section in your <code>Scarb.toml</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">world</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;example&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">description = </span><span style=\"color:#96D0FF\">&quot;example world&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">icon_uri = </span><span style=\"color:#96D0FF\">&quot;file://assets/icon.png&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cover_uri = </span><span style=\"color:#96D0FF\">&quot;file://assets/cover.png&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">website = </span><span style=\"color:#96D0FF\">&quot;https://dojoengine.org&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">socials.x = </span><span style=\"color:#96D0FF\">&quot;https://twitter.com/dojostarknet&quot;</span></span></code></pre></figure>\n<p>The toolchain supports the <code>name</code>, <code>description</code>, <code>icon_uri</code>, <code>cover_uri</code>, <code>website</code> and <code>socials</code> attributes by default. <code>_uri</code> attributes can point to a asset in the repo using the <code>file://</code> schema or to remote resouces using either <code>ipfs://</code> or <code>https://</code>. Arbitrary social links can be set by setting a key value on the <code>socials</code> attribute. For example, we could add a <code>socials.github = &quot;...&quot;</code>.</p>\n<p>During migration, <code>sozo</code> will upload any local assets to ipfs, replace the corresponding uris, upload the metadata json to ipfs, and set the <code>metadata_uri</code> for the world (resource <code>0</code>).</p>\n","isPage":false,"text":"\nDuring migration, sozo will automatically manage the worlds metadata for you, uploading it to ipfs and setting it in the world contract. It does so by parsing the metadata defined in the projects Scarb.toml.\nTo set a worlds metadata, create the following section in your Scarb.toml:\n[tool.dojo.world]\nname = &quot;example&quot;\ndescription = &quot;example world&quot;\nicon_uri = &quot;file://assets/icon.png&quot;\ncover_uri = &quot;file://assets/cover.png&quot;\nwebsite = &quot;https://dojoengine.org&quot;\nsocials.x = &quot;https://twitter.com/dojostarknet&quot;\nThe toolchain supports the name, description, icon_uri, cover_uri, website and socials attributes by default. _uri attributes can point to a asset in the repo using the file:// schema or to remote resouces using either ipfs:// or https://. Arbitrary social links can be set by setting a key value on the socials attribute. For example, we could add a socials.github = &quot;...&quot;.\nDuring migration, sozo will upload any local assets to ipfs, replace the corresponding uris, upload the metadata json to ipfs, and set the metadata_uri for the world (resource 0).\n","title":"World Metadata","titles":[null,"Metadata"]},"31":{"href":"/cairo/metadata#contract-metadata","html":"\n<p>It is possible for contract owners to set a <code>metadata_uri</code> for any contract. However, this specification has not yet been defined and it is not supported by the toolchain at this time.</p>","isPage":false,"text":"\nIt is possible for contract owners to set a metadata_uri for any contract. However, this specification has not yet been defined and it is not supported by the toolchain at this time.","title":"Contract Metadata","titles":[null,"Metadata"]},"32":{"href":"/cairo/models#models","html":"\n<blockquote>\n<p>Models = Data</p>\n</blockquote>\n<strong><em>TL;DR</em></strong>\n<ul>\n<li>Models store structured data in your world.</li>\n<li>Models are Cairo structs with additional features.</li>\n<li>Models can implement traits.</li>\n<li>Use the <code>#[derive(Model)]</code> decorator to define them.</li>\n<li>Custom enums and types are supported.</li>\n<li>Define the primary key using the <code>#[key]</code> attribute.</li>\n</ul>\n","isPage":true,"text":"\n\nModels = Data\n\nTL;DR\n\nModels store structured data in your world.\nModels are Cairo structs with additional features.\nModels can implement traits.\nUse the #[derive(Model)] decorator to define them.\nCustom enums and types are supported.\nDefine the primary key using the #[key] attribute.\n\n","title":"Models","titles":[null]},"33":{"href":"/cairo/models#models-are-structs","html":"\n<p>Models are structs annotated with the <code>#[derive(Model)]</code> attribute. Consider these models as a key-value store, where the <code>#[key]</code> attribute is utilized to define the primary key. While models can contain any number of fields, adhering to best practices in Entity-Component-System (ECS) design involves maintaining small, isolated models.</p>\n<p>This approach fosters modularity and composability, enabling you to reuse models across various entity types.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nModels are structs annotated with the #[derive(Model)] attribute. Consider these models as a key-value store, where the #[key] attribute is utilized to define the primary key. While models can contain any number of fields, adhering to best practices in Entity-Component-System (ECS) design involves maintaining small, isolated models.\nThis approach fosters modularity and composability, enabling you to reuse models across various entity types.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Moves {\n    #[key]\n    player: ContractAddress,\n    remaining: u8,\n}\n","title":"Models are Structs","titles":[null,"Models"]},"34":{"href":"/cairo/models#the-key-attribute","html":"\n<p>The <code>#[key]</code> attribute indicates to Dojo that this model is indexed by the <code>player</code> field. A field that is identified as a <code>#[key]</code> is not stored. It is used by the dojo database system to uniquely identify the storage location that contains your model.</p>\n<p>You need to define at least one key for each model, as this is how you query the model. However, you can create composite keys by defining multiple fields as keys. If you define multiple keys, they must <strong>all</strong> be provided to query the model.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Resource</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    location</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    balance</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>In this case you then would set the model with both the player and location fields:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Resource</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            player</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> caller,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            location</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 12</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            balance</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure>\n<p>To retrieve a model with a composite key using the <a href=\"/cairo/commands.md#the-get-command\">get!</a> command, you must provide a value for each key as follow:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> location </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> 0x1234</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> resource </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (player, location), (</span><span style=\"color:#F69D50\">Resource</span><span style=\"color:#ADBAC7\">));</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe #[key] attribute indicates to Dojo that this model is indexed by the player field. A field that is identified as a #[key] is not stored. It is used by the dojo database system to uniquely identify the storage location that contains your model.\nYou need to define at least one key for each model, as this is how you query the model. However, you can create composite keys by defining multiple fields as keys. If you define multiple keys, they must all be provided to query the model.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Resource {\n    #[key]\n    player: ContractAddress,\n    #[key]\n    location: ContractAddress,\n    balance: u8,\n}\nIn this case you then would set the model with both the player and location fields:\nset!(\n    world,\n    (\n        Resource {\n            player: caller,\n            location: 12,\n            balance: 10\n        },\n    )\n);\nTo retrieve a model with a composite key using the get! command, you must provide a value for each key as follow:\nlet player = get_caller_address();\nlet location = 0x1234;\n \nlet resource = get!(world, (player, location), (Resource));\n","title":"The #[key] attribute","titles":[null,"Models","Models are Structs"]},"35":{"href":"/cairo/models#implementing-traits","html":"\n<p>Models can implement traits. This is useful for defining common functionality across models. For example, you may want to define a <code>Position</code> model that implements a <code>PositionTrait</code> trait. This trait could define functions such as <code>is_zero</code> and <code>is_equal</code> which could be used when accessing the model.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> PositionTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> is_zero</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> is_equal</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\">, b</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">impl</span><span style=\"color:#F69D50\"> PositionImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">PositionTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> is_zero</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        if</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            return</span><span style=\"color:#6CB6FF\"> true</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        false</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> is_equal</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\">, b</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> b</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> b</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nModels can implement traits. This is useful for defining common functionality across models. For example, you may want to define a Position model that implements a PositionTrait trait. This trait could define functions such as is_zero and is_equal which could be used when accessing the model.\ntrait PositionTrait {\n    fn is_zero(self: Position) -&gt; bool;\n    fn is_equal(self: Position, b: Position) -&gt; bool;\n}\n \nimpl PositionImpl of PositionTrait {\n    fn is_zero(self: Position) -&gt; bool {\n        if self.x - self.y == 0 {\n            return true;\n        }\n        false\n    }\n \n    fn is_equal(self: Position, b: Position) -&gt; bool {\n        self.x == b.x &amp;&amp; self.y == b.y\n    }\n}\n","title":"Implementing Traits","titles":[null,"Models","Models are Structs"]},"36":{"href":"/cairo/models#custom-setting-models","html":"\n<p>Suppose we need a place to keep a global value with the flexibility to modify it in the future. Take, for instance, a global <code>combat_cool_down</code> parameter that defines the duration required for an entity to be primed for another attack. To achieve this, we can craft a model dedicated to storing this value, while also allowing for its modification via a decentralized governance model.</p>\n<p>To establish these models, you&#x27;d follow the usual creation method. However, when initializing them, employ a constant identifier, such as GAME_SETTINGS_ID.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> GAME_SETTINGS_ID</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> 9999999999999</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(model, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> GameSettings</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    game_settings_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    combat_cool_down</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nSuppose we need a place to keep a global value with the flexibility to modify it in the future. Take, for instance, a global combat_cool_down parameter that defines the duration required for an entity to be primed for another attack. To achieve this, we can craft a model dedicated to storing this value, while also allowing for its modification via a decentralized governance model.\nTo establish these models, you&#x27;d follow the usual creation method. However, when initializing them, employ a constant identifier, such as GAME_SETTINGS_ID.\nconst GAME_SETTINGS_ID: u32 = 9999999999999;\n \n#[derive(model, Copy, Drop, Serde)]\nstruct GameSettings {\n    #[key]\n    game_settings_id: u32,\n    combat_cool_down: u32,\n}\n","title":"Custom Setting models","titles":[null,"Models","Models are Structs"]},"37":{"href":"/cairo/models#types","html":"\n<p>Support model types:</p>\n<ul>\n<li><code>u8</code></li>\n<li><code>u16</code></li>\n<li><code>u32</code></li>\n<li><code>u64</code></li>\n<li><code>u128</code></li>\n<li><code>u256</code></li>\n<li><code>ContractAddress</code></li>\n<li>Enums</li>\n<li>Custom Types</li>\n</ul>\n<p>It is currently not possible to use Arrays.</p>\n","isPage":false,"text":"\nSupport model types:\n\nu8\nu16\nu32\nu64\nu128\nu256\nContractAddress\nEnums\nCustom Types\n\nIt is currently not possible to use Arrays.\n","title":"Types","titles":[null,"Models","Models are Structs"]},"38":{"href":"/cairo/models#custom-types--enums","html":"\n<p>For models containing complex types, it&#x27;s crucial to implement the <code>SchemaIntrospection</code> trait.</p>\n<p>Consider the model below:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Card</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    token_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> u256,</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// The card&#x27;s designated role.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    role</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Roles</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>For complex types, like <code>Roles</code> in the above example, you need to implement <code>SchemaIntrospection</code>. Here&#x27;s how:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">impl</span><span style=\"color:#F69D50\"> RolesSchemaIntrospectionImpl</span><span style=\"color:#F47067\"> for</span><span style=\"color:#F69D50\"> SchemaIntrospection</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">Roles</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[inline(always)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> size</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> usize</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        1</span><span style=\"color:#768390\"> // Represents the byte size of the enum.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[inline(always)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> layout</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#ADBAC7\"> layout</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Array</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">&gt;) {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        layout</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">append</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">8</span><span style=\"color:#ADBAC7\">);</span><span style=\"color:#768390\"> // Specifies the layout byte size;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[inline(always)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> ty</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> Ty</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Enum</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            Enum</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                name</span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> &#x27;Roles&#x27;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                attrs</span><span style=\"color:#F47067\">:</span><span style=\"color:#DCBDFB\"> array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                children</span><span style=\"color:#F47067\">:</span><span style=\"color:#DCBDFB\"> array!</span><span style=\"color:#ADBAC7\">[</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Goalkeeper&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Defender&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Midfielder&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Attacker&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                ]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                .</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nFor models containing complex types, it&#x27;s crucial to implement the SchemaIntrospection trait.\nConsider the model below:\nstruct Card {\n    #[key]\n    token_id: u256,\n    /// The card&#x27;s designated role.\n    role: Roles,\n}\nFor complex types, like Roles in the above example, you need to implement SchemaIntrospection. Here&#x27;s how:\nimpl RolesSchemaIntrospectionImpl for SchemaIntrospection&lt;Roles&gt; {\n    #[inline(always)]\n    fn size() -&gt; usize {\n        1 // Represents the byte size of the enum.\n    }\n \n    #[inline(always)]\n    fn layout(ref layout: Array&lt;u8&gt;) {\n        layout.append(8); // Specifies the layout byte size;\n    }\n \n    #[inline(always)]\n    fn ty() -&gt; Ty {\n        Ty::Enum(\n            Enum {\n                name: &#x27;Roles&#x27;,\n                attrs: array![].span(),\n                children: array![\n                    (&#x27;Goalkeeper&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Defender&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Midfielder&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Attacker&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                ]\n                .span()\n            }\n        )\n    }\n}\n","title":"Custom Types + Enums","titles":[null,"Models","Models are Structs"]},"39":{"href":"/cairo/models#in-practice-with-modularity-in-mind","html":"\n<p>Consider a tangible analogy: Humans and Goblins. While they possess intrinsic differences, they share common traits, such as having a position and health. However, humans possess an additional model. Furthermore, we introduce a Counter model, a distinct feature that tallies the numbers of humans and goblins.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Potions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    quantity</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Health</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    health</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    x</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    y</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Special counter model</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Counter</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    counter</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    goblin_count</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    human_count</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>So the Human will have a <code>Potions</code>, <code>Health</code> and <code>Position</code> model, and the Goblin will have a <code>Health</code> and <code>Position</code> model. By doing we save having to create Health and Position models for each entity type.</p>\n<p>So then a contract would look like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> spawnHuman</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> array</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ArrayTrait</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F47067\"> box::</span><span style=\"color:#F69D50\">BoxTrait</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> traits</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Into</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">world</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Context</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Health</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Potions</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Counter</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // we can set the counter value as a const, then query it easily! This pattern is useful for settings.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    const</span><span style=\"color:#6CB6FF\"> COUNTER_ID</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> 9999999999999</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // impl: implement functions specified in trait</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> GoblinActionsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">IGoblinActions</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> goblin_actions</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">, entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> world </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">world_dispatcher</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> counter </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, </span><span style=\"color:#6CB6FF\">COUNTER_ID</span><span style=\"color:#ADBAC7\">, (</span><span style=\"color:#F69D50\">Counter</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> human_count </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> counter</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">human_count </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> goblin_count </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> counter</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">goblin_count </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // spawn a human</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Health</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> human_count, health</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 100</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> human_count, x</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Potions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> human_count, quantity</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // spawn a goblin</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Health</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> goblin_count, health</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 100</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        entity_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> goblin_count, x</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // increment the counter</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Counter</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        counter</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> COUNTER_ID</span><span style=\"color:#ADBAC7\">, human_count</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> human_count, goblin_count</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> goblin_count</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<blockquote>\n<p>A complete example can be found in the <a href=\"https://github.com/dojoengine/dojo-starter\">Dojo Starter</a></p>\n</blockquote>\n<header>","isPage":false,"text":"\nConsider a tangible analogy: Humans and Goblins. While they possess intrinsic differences, they share common traits, such as having a position and health. However, humans possess an additional model. Furthermore, we introduce a Counter model, a distinct feature that tallies the numbers of humans and goblins.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Potions {\n    #[key]\n    entity_id: u32,\n    quantity: u8,\n}\n \n#[derive(Model, Copy, Drop, Serde)]\nstruct Health {\n    #[key]\n    entity_id: u32,\n    health: u8,\n}\n \n#[derive(Model, Copy, Drop, Serde)]\nstruct Position {\n    #[key]\n    entity_id: u32,\n    x: u32,\n    y: u32\n}\n \n// Special counter model\n#[derive(Model, Copy, Drop, Serde)]\nstruct Counter {\n    #[key]\n    counter: u32,\n    goblin_count: u32,\n    human_count: u32,\n}\nSo the Human will have a Potions, Health and Position model, and the Goblin will have a Health and Position model. By doing we save having to create Health and Position models for each entity type.\nSo then a contract would look like this:\n#[dojo::contract]\nmod spawnHuman {\n    use array::ArrayTrait;\n    use box::BoxTrait;\n    use traits::Into;\n    use dojo::world::Context;\n \n    use dojo_examples::models::Position;\n    use dojo_examples::models::Health;\n    use dojo_examples::models::Potions;\n    use dojo_examples::models::Counter;\n \n    // we can set the counter value as a const, then query it easily! This pattern is useful for settings.\n    const COUNTER_ID: u32 = 9999999999999;\n \n    // impl: implement functions specified in trait\n    #[abi(embed_v0)]\n    impl GoblinActionsImpl of IGoblinActions&lt;ContractState&gt; {\n        fn goblin_actions(self: @ContractState, entity_id: u32) {\n            let world = self.world_dispatcher.read();\n \n            let counter = get!(world, COUNTER_ID, (Counter));\n \n            let human_count = counter.human_count + 1;\n            let goblin_count = counter.goblin_count + 1;\n \n            // spawn a human\n            set!(\n                world,\n                (\n                    Health {\n                        entity_id: human_count, health: 100\n                        },\n                    Position {\n                        entity_id: human_count, x: position.x + 10, y: position.y + 10,\n                        },\n                    Potions {\n                        entity_id: human_count, quantity: 10\n \n                    },\n                )\n            );\n \n            // spawn a goblin\n            set!(\n                world,\n                (\n                    Health {\n                        entity_id: goblin_count, health: 100\n                        },\n                    Position {\n                        entity_id: goblin_count, x: position.x + 10, y: position.y + 10,\n                        },\n                )\n            );\n \n            // increment the counter\n            set!(\n                world,\n                (\n                    Counter {\n                        counter: COUNTER_ID, human_count: human_count, goblin_count: goblin_count\n                    },\n                )\n            );\n        }\n    }\n}\n\nA complete example can be found in the Dojo Starter\n\n","title":"In practice with modularity in mind","titles":[null,"Models"]},"40":{"href":"/cairo/models#upgrading-models-and-data-migration","html":"</header>\n<p>When upgrading a system, especially one that involves data storage, it’s essential to consider the impact on existing models. Here are some key points to keep in mind:</p>\n<header>","isPage":false,"text":"\nWhen upgrading a system, especially one that involves data storage, it’s essential to consider the impact on existing models. Here are some key points to keep in mind:\n","title":"Upgrading Models and Data Migration","titles":[]},"41":{"href":"/cairo/models#risk-free-upgrades","html":"</header>\n<p>Upgrading a system is generally safe from a storage perspective if the changes do not affect the existing data layout.\nFor example, adding new fields to a model (without modifying existing fields) won’t disrupt the stored data. Retrieving existing data remains straightforward.</p>\n<p>Suppose we have a basic model called Player that represents player information:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Player</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u64</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    username</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> String</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    score</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>In this model: <code>player_id</code>, serves as the primary key. We store the player’s <code>username</code> and their <code>score</code>.\nNow, let’s say we want to enhance our system by adding a new field called level to the Player model. We’ll do this without modifying the existing fields (player_id, username, and score).</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Player</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u64</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    username</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> String</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    score</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    level</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span><span style=\"color:#768390\"> // New field</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Our existing data remains intact. Retrieving player information using the original fields (player_id, username, and score) continues to work seamlessly.\nFor example, querying Player 1 (ID: 123) with username “Alice” and score 100 still provides accurate results.\nso this is for risk free upgrade.</p>\n<header>","isPage":false,"text":"\nUpgrading a system is generally safe from a storage perspective if the changes do not affect the existing data layout.\nFor example, adding new fields to a model (without modifying existing fields) won’t disrupt the stored data. Retrieving existing data remains straightforward.\nSuppose we have a basic model called Player that represents player information:\n#[derive(Model)]\nstruct Player {\n    #[key]\n    player_id: u64,\n    username: String,\n    score: u32,\n}\nIn this model: player_id, serves as the primary key. We store the player’s username and their score.\nNow, let’s say we want to enhance our system by adding a new field called level to the Player model. We’ll do this without modifying the existing fields (player_id, username, and score).\n#[derive(Model)]\nstruct Player {\n    #[key]\n    player_id: u64,\n    username: String,\n    score: u32,\n    level: u8, // New field\n}\nOur existing data remains intact. Retrieving player information using the original fields (player_id, username, and score) continues to work seamlessly.\nFor example, querying Player 1 (ID: 123) with username “Alice” and score 100 still provides accurate results.\nso this is for risk free upgrade.\n","title":"Risk-Free Upgrades:","titles":[]},"42":{"href":"/cairo/models#risk-of-data-corruption","html":"</header>\n<p>You have a User model with three fields: user_id, username, and age. The age field is initially stored as an integer (e.g., 30).</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> User</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    user_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u64</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    username</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> String</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    age</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span><span style=\"color:#768390\"> // Now a string</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>Later, you decide to modify the age field and store it as a string instead of an integer:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> User</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    user_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u64</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    username</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> String</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    age</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> String</span><span style=\"color:#ADBAC7\">,</span><span style=\"color:#768390\"> // Now a string</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>This change involves altering the data type of the age field from numeric (integer) to textual (string).</p>\n<p>When you modify the data type of an existing field, you introduce the risk of data corruption.\nIn our example, the existing data <code>(e.g., age 30)</code> stored in the age field will no longer fit the new format (string).\nRetrieving ages as integers won’t work directly because they are now stored as strings.\nTo handle this situation, you’ll need to convert the string representation of age back to integers when necessary.</p>\n<header>","isPage":false,"text":"\nYou have a User model with three fields: user_id, username, and age. The age field is initially stored as an integer (e.g., 30).\nstruct User {\n    user_id: u64,\n    username: String,\n    age: u32, // Now a string\n}\n \nLater, you decide to modify the age field and store it as a string instead of an integer:\nstruct User {\n    user_id: u64,\n    username: String,\n    age: String, // Now a string\n}\nThis change involves altering the data type of the age field from numeric (integer) to textual (string).\nWhen you modify the data type of an existing field, you introduce the risk of data corruption.\nIn our example, the existing data (e.g., age 30) stored in the age field will no longer fit the new format (string).\nRetrieving ages as integers won’t work directly because they are now stored as strings.\nTo handle this situation, you’ll need to convert the string representation of age back to integers when necessary.\n","title":"Risk of Data Corruption","titles":[]},"43":{"href":"/cairo/models#conversion-process","html":"</header>\n<p>When retrieving the age, you’ll need to parse the string value  <code>(e.g., &quot;30&quot;)</code> and convert it back to an integer  <code>(e.g., 30)</code> for any calculations or comparisons.\nThis conversion process ensures that the data remains consistent despite the change in data type.\nIn summary, data corruption occurs when existing data doesn’t align with the new data type after modifying a field. Proper handling, such as converting values during retrieval, is essential to maintain data integrity.</p>","isPage":false,"text":"\nWhen retrieving the age, you’ll need to parse the string value  (e.g., &quot;30&quot;) and convert it back to an integer  (e.g., 30) for any calculations or comparisons.\nThis conversion process ensures that the data remains consistent despite the change in data type.\nIn summary, data corruption occurs when existing data doesn’t align with the new data type after modifying a field. Proper handling, such as converting values during retrieval, is essential to maintain data integrity.","title":"Conversion Process:","titles":[]},"44":{"href":"/cairo/origami#what-is-origami","html":"\n<p>Origami is the native dojo collection of primitives that can be imported into your game.</p>\n<p>It contains:</p>\n<ul>\n<li>algebra</li>\n<li>defi</li>\n<li>hex map</li>\n<li>random</li>\n<li>security</li>\n<li>erc tokens</li>\n</ul>\n<p>Find the <a href=\"https://github.com/dojoengine/origami\">Origami repo</a></p>","isPage":true,"text":"\nOrigami is the native dojo collection of primitives that can be imported into your game.\nIt contains:\n\nalgebra\ndefi\nhex map\nrandom\nsecurity\nerc tokens\n\nFind the Origami repo","title":"What is Origami?","titles":[null]},"45":{"href":"/cairo/overview#a-new-approach-to-onchain-game-development","html":"\n<p>Dojo provides an advanced abstraction layer over Cairo, mirroring React&#x27;s relationship with JavaScript. Its specialized architecture simplifies game design and development.</p>\n<p>By leveraging Dojo, developers can use succinct <a href=\"/cairo/commands.md\">commands</a> that transform into comprehensive queries at compile time.</p>\n","isPage":true,"text":"\nDojo provides an advanced abstraction layer over Cairo, mirroring React&#x27;s relationship with JavaScript. Its specialized architecture simplifies game design and development.\nBy leveraging Dojo, developers can use succinct commands that transform into comprehensive queries at compile time.\n","title":"A New Approach to Onchain Game Development","titles":[null]},"46":{"href":"/cairo/overview#delving-into-the-architecture","html":"\n<p>Dojo efficiently encapsulates boilerplate contracts within the compiler, letting developers concentrate on the distinct aspects of their game or app.</p>\n<p>Consider this as the most basic Dojo world setup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">-</span><span style=\"color:#ADBAC7\"> src</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  -</span><span style=\"color:#ADBAC7\"> main</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  -</span><span style=\"color:#ADBAC7\"> lib</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">-</span><span style=\"color:#F69D50\"> Scarb</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">toml</span></span></code></pre></figure>\n<p>While seemingly simple, behind the scenes Dojo compiler generates foundational contracts, setting the stage for you to focus purely on data and logic.</p>\n<p>Lets take a look at the <code>main.cairo</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// dojo data models</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span><span style=\"color:#768390\"> // primary key</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    vec</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// regular cairo struct</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Introspect</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    x</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    y</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// interface</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">interface]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> IPlayerActions</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">TContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> spawn</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">TContractState</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// contract</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> player_actions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">, get_caller_address};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#6CB6FF\"> super</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#6CB6FF\"> super</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">IPlayerActions</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> PlayerActionsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">IPlayerActions</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        //</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // This is how we interact with the world contract.</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        //</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> spawn</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Access the world dispatcher for reading.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> world </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">world_dispatcher</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // get player address</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // dojo command - get player position</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> position </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // dojo command - set player position</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(world, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\"> { player, vec</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\"> } }));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nDojo efficiently encapsulates boilerplate contracts within the compiler, letting developers concentrate on the distinct aspects of their game or app.\nConsider this as the most basic Dojo world setup:\n- src\n  - main.cairo\n  - lib.cairo\n- Scarb.toml\nWhile seemingly simple, behind the scenes Dojo compiler generates foundational contracts, setting the stage for you to focus purely on data and logic.\nLets take a look at the main.cairo:\nuse starknet::ContractAddress;\n \n// dojo data models\n#[derive(Model, Copy, Drop, Serde)]\nstruct Position {\n    #[key] // primary key\n    player: ContractAddress,\n    vec: Vec2,\n}\n \n// regular cairo struct\n#[derive(Copy, Drop, Serde, Introspect)]\nstruct Vec2 {\n    x: u32,\n    y: u32\n}\n \n// interface\n#[starknet::interface]\ntrait IPlayerActions&lt;TContractState&gt; {\n    fn spawn(self: @TContractState);\n}\n \n// contract\n#[dojo::contract]\nmod player_actions {\n    use starknet::{ContractAddress, get_caller_address};\n    use super::{Position, Vec2};\n    use super::IPlayerActions;\n \n    #[abi(embed_v0)]\n    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {\n        //\n        // This is how we interact with the world contract.\n        //\n        fn spawn(self: @ContractState) {\n            // Access the world dispatcher for reading.\n            let world = self.world_dispatcher.read();\n \n            // get player address\n            let player = get_caller_address();\n \n            // dojo command - get player position\n            let position = get!(world, player, (Position));\n \n            // dojo command - set player position\n            set!(world, (Position { player, vec: Vec2 { x: 10, y: 10 } }));\n        }\n    }\n}\n","title":"Delving into the Architecture","titles":[null,"A New Approach to Onchain Game Development",null]},"47":{"href":"/cairo/overview#breakdown","html":"\n<p>Dojo contract is just a regular Cairo contract, with some dojo specifics.</p>\n","isPage":false,"text":"\nDojo contract is just a regular Cairo contract, with some dojo specifics.\n","title":"Breakdown","titles":[null,"A New Approach to Onchain Game Development"]},"48":{"href":"/cairo/overview#position-struct---the-dojo-model","html":"\n<p>In a Dojo world, state is defined using models. These are structs marked with the <code>#[derive(Model)]</code> attribute, functioning similarly to a key-pair store. The primary key for a model is indicated using the <code>#[key]</code> attribute; for instance, the <code>player</code> field serves as the primary key in this context.</p>\n<p>Read more about models <a href=\"/cairo/models.md\">here</a>.</p>\n","isPage":false,"text":"\nIn a Dojo world, state is defined using models. These are structs marked with the #[derive(Model)] attribute, functioning similarly to a key-pair store. The primary key for a model is indicated using the #[key] attribute; for instance, the player field serves as the primary key in this context.\nRead more about models here.\n","title":"Position struct - the dojo model","titles":[null,"A New Approach to Onchain Game Development","Breakdown"]},"49":{"href":"/cairo/overview#spawn-function---a-dojo-system","html":"\n<p>In the <code>spawn</code> function, we just call <code>self.world_dispatcher</code>. This provides a gateway to the world contract. This facilitates the effortless utilization of the get! and set! commands, allowing seamless interaction with the world contract.</p>\n<p>Commands, a significant innovation in Dojo, are further explored <a href=\"/cairo/commands.md\">here</a>.</p>","isPage":false,"text":"\nIn the spawn function, we just call self.world_dispatcher. This provides a gateway to the world contract. This facilitates the effortless utilization of the get! and set! commands, allowing seamless interaction with the world contract.\nCommands, a significant innovation in Dojo, are further explored here.","title":"spawn function - a dojo system","titles":[null,"A New Approach to Onchain Game Development","Breakdown"]},"50":{"href":"/cairo/systems#systems","html":"\n<blockquote>\n<p><strong>IMPORTANT:</strong> Before defining your systems, prioritize permissions. Plan carefully to ensure proper access and security.</p>\n</blockquote>\n<strong><em>TL;DR</em></strong>\n<ul>\n<li>Systems function as contract methods.</li>\n<li>Contracts containing Systems gain permissions to write to models.</li>\n<li>Systems pass a <code>world</code> address as their first parameter unless utilizing the <a href=\"#the-dojocontract-decorator\"><code>#[dojo::contract]</code></a> decorator.</li>\n<li>Systems engage the world contract to alter models&#x27; state.</li>\n<li>The world contract is invoked through systems.</li>\n<li>Systems ought to be concise and specific.</li>\n<li>In most scenarios, systems are stateless.</li>\n</ul>\n","isPage":true,"text":"\n\nIMPORTANT: Before defining your systems, prioritize permissions. Plan carefully to ensure proper access and security.\n\nTL;DR\n\nSystems function as contract methods.\nContracts containing Systems gain permissions to write to models.\nSystems pass a world address as their first parameter unless utilizing the #[dojo::contract] decorator.\nSystems engage the world contract to alter models&#x27; state.\nThe world contract is invoked through systems.\nSystems ought to be concise and specific.\nIn most scenarios, systems are stateless.\n\n","title":"Systems","titles":[null]},"51":{"href":"/cairo/systems#what-are-systems","html":"\n<p>Within dojo we define systems as functions within a Dojo Contract that act on the world.</p>\n<p>Systems play a pivotal role in your world&#x27;s logic, directly mutating its component states. It&#x27;s important to understand that to enact these mutations, a system needs explicit permission from the <a href=\"/cairo/models.md\"><code>models</code></a> owner.</p>\n","isPage":false,"text":"\nWithin dojo we define systems as functions within a Dojo Contract that act on the world.\nSystems play a pivotal role in your world&#x27;s logic, directly mutating its component states. It&#x27;s important to understand that to enact these mutations, a system needs explicit permission from the models owner.\n","title":"What are Systems?","titles":[null,"Systems"]},"52":{"href":"/cairo/systems#system-permissions","html":"\n<p>Since the whole contract is given write access to the model, it is important to be careful when defining systems. A simple way to think about it is:</p>\n<p><img src=\"/permissions.png\" alt=\"System Permissions\"/></p>\n","isPage":false,"text":"\nSince the whole contract is given write access to the model, it is important to be careful when defining systems. A simple way to think about it is:\n\n","title":"System Permissions","titles":[null,"Systems"]},"53":{"href":"/cairo/systems#system-structure","html":"\n<p>Every system function starts with a <a href=\"/cairo/world.md\"><code>world</code></a> address as its initial parameter. This design permits these functions to alter the world&#x27;s state. Notably, this structure also makes systems adaptable and reusable across multiple worlds!</p>\n<p>Let&#x27;s look at the simplest possible system which mutates the state of the <code>Moves</code> component.</p>\n<blockquote>\n<p>NOTE: This is not using the #[dojo::contract] attribute meaning it was to accept the world as a parameter.</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> player_actions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">, get_caller_address};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">world</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">IWorldDispatcher</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">IWorldDispatcherTrait</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">components</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Direction</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">utils</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">next_position;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#6CB6FF\"> super</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">IPlayerActions</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // no storage</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[storage]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    struct</span><span style=\"color:#F69D50\"> Storage</span><span style=\"color:#ADBAC7\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // implementation of the PlayerActions interface</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> PlayerActionsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">IPlayerActions</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> spawn</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">, world</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> IWorldDispatcher</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> position </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        player,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        last_direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nEvery system function starts with a world address as its initial parameter. This design permits these functions to alter the world&#x27;s state. Notably, this structure also makes systems adaptable and reusable across multiple worlds!\nLet&#x27;s look at the simplest possible system which mutates the state of the Moves component.\n\nNOTE: This is not using the #[dojo::contract] attribute meaning it was to accept the world as a parameter.\n\n#[starknet::contract]\nmod player_actions {\n    use starknet::{ContractAddress, get_caller_address};\n    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};\n    use dojo_examples::components::{Position, Moves, Direction, Vec2};\n    use dojo_examples::utils::next_position;\n    use super::IPlayerActions;\n \n    // no storage\n    #[storage]\n    struct Storage {}\n \n    // implementation of the PlayerActions interface\n    #[abi(embed_v0)]\n    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {\n        fn spawn(self: @ContractState, world: IWorldDispatcher) {\n            let player = get_caller_address();\n            let position = get!(world, player, (Position));\n            set!(\n                world,\n                (\n                    Moves {\n                        player,\n                        remaining: 10,\n                        last_direction: Direction::None(())\n                    }\n                )\n            );\n        }\n    }\n}\n","title":"System Structure","titles":[null,"Systems"]},"54":{"href":"/cairo/systems#breaking-it-down","html":"\n","isPage":false,"text":"\n","title":"Breaking it down","titles":[null]},"55":{"href":"/cairo/systems#system-is-a-function-in-a-contract","html":"\n<p>As you can see a System is like a regular function of a Starknet contract. This contract can include storage, and it can implement interfaces.</p>\n","isPage":false,"text":"\nAs you can see a System is like a regular function of a Starknet contract. This contract can include storage, and it can implement interfaces.\n","title":"System is a function in a contract","titles":[null,"Breaking it down","System Structure"]},"56":{"href":"/cairo/systems#spawn-function","html":"\n<p>The spawn function is currently the only system that exists in this contract. It is called when a player spawns into the world. It is responsible for setting up the player&#x27;s initial state.</p>\n","isPage":false,"text":"\nThe spawn function is currently the only system that exists in this contract. It is called when a player spawns into the world. It is responsible for setting up the player&#x27;s initial state.\n","title":"Spawn function","titles":[null,"Breaking it down","System Structure"]},"57":{"href":"/cairo/systems#the-dojocontract-decorator","html":"\n<p>All Starknet contracts are defined using the <code>#[starknet::contract]</code> decorator, ensuring accurate compilation. In this context, Dojo introduces the <code>#[dojo::contract]</code> decorator, which aims to minimize boilerplate in contract writing.</p>\n<p>The <code>#[dojo::contract]</code> decorator allows developers to omit including <code>world: IWorldDispatcher</code> as a parameter. Behind the scenes, it injects the world into the contract and eliminates some imports, thereby streamlining the development process.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> player_actions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">, get_caller_address};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Direction</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">utils</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">next_position;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#6CB6FF\"> super</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">IPlayerActions</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[event]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    enum</span><span style=\"color:#F69D50\"> Event</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Moved</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Moved</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    struct</span><span style=\"color:#F69D50\"> Moved</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // impl: implement functions specified in trait</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> PlayerActionsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">IPlayerActions</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // ContractState is defined by system decorator expansion</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> spawn</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // world dispatcher</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> world </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">world_dispatcher</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // player</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // get the position</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> position </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // set the position</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Moves</span><span style=\"color:#ADBAC7\"> { player, remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, last_direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">(()) },</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">                    Position</span><span style=\"color:#ADBAC7\"> { player, vec</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\"> } },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> move</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">, direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // world dispatcher</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> world </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">world_dispatcher</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // player</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // get the position and moves</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F47067\">mut</span><span style=\"color:#ADBAC7\"> position, </span><span style=\"color:#F47067\">mut</span><span style=\"color:#ADBAC7\"> moves) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, player, (</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // adjust</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">remaining </span><span style=\"color:#F47067\">-=</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">last_direction </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> direction;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // get next direction</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> next </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> next_position</span><span style=\"color:#ADBAC7\">(position, direction);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // set models</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(world, (moves, next));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // emit custom event</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            emit!</span><span style=\"color:#ADBAC7\">(world, </span><span style=\"color:#F69D50\">Moved</span><span style=\"color:#ADBAC7\"> { player, direction });</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<blockquote>\n<p>To interact with Systems read more in the <a href=\"/toolchain/sozo/overview.md\">sozo</a> docs.</p>\n</blockquote>","isPage":false,"text":"\nAll Starknet contracts are defined using the #[starknet::contract] decorator, ensuring accurate compilation. In this context, Dojo introduces the #[dojo::contract] decorator, which aims to minimize boilerplate in contract writing.\nThe #[dojo::contract] decorator allows developers to omit including world: IWorldDispatcher as a parameter. Behind the scenes, it injects the world into the contract and eliminates some imports, thereby streamlining the development process.\n#[dojo::contract]\nmod player_actions {\n    use starknet::{ContractAddress, get_caller_address};\n    use dojo_examples::models::{Position, Moves, Direction, Vec2};\n    use dojo_examples::utils::next_position;\n    use super::IPlayerActions;\n \n    #[event]\n    #[derive(Drop, starknet::Event)]\n    enum Event {\n        Moved: Moved,\n    }\n \n    #[derive(Drop, starknet::Event)]\n    struct Moved {\n        player: ContractAddress,\n        direction: Direction\n    }\n \n    // impl: implement functions specified in trait\n    #[abi(embed_v0)]\n    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {\n        // ContractState is defined by system decorator expansion\n        fn spawn(self: @ContractState) {\n            // world dispatcher\n            let world = self.world_dispatcher.read();\n \n            // player\n            let player = get_caller_address();\n \n            // get the position\n            let position = get!(world, player, (Position));\n \n            // set the position\n            set!(\n                world,\n                (\n                    Moves { player, remaining: 10, last_direction: Direction::None(()) },\n                    Position { player, vec: Vec2 { x: 10, y: 10 } },\n                )\n            );\n        }\n \n        fn move(self: @ContractState, direction: Direction) {\n            // world dispatcher\n            let world = self.world_dispatcher.read();\n \n            // player\n            let player = get_caller_address();\n \n            // get the position and moves\n            let (mut position, mut moves) = get!(world, player, (Position, Moves));\n \n            // adjust\n            moves.remaining -= 1;\n            moves.last_direction = direction;\n \n            // get next direction\n            let next = next_position(position, direction);\n \n            // set models\n            set!(world, (moves, next));\n \n            // emit custom event\n            emit!(world, Moved { player, direction });\n        }\n    }\n}\n\nTo interact with Systems read more in the sozo docs.\n","title":"The #[dojo::contract] Decorator","titles":[null,"Breaking it down"]},"58":{"href":"/cairo/testing#testing","html":"\n<p>Testing is a crucial part of any software development process. Dojo provides a testing framework that allows you to write tests for your smart contracts. Since Dojo uses a custom compiler, you need to use <code>sozo</code> to test your contracts.</p>\n<p>From your project directory, simply:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark-dimmed\"><code data-language=\"shell\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> test</span></span></code></pre></figure>\n<p>This will search for all tests within your project and run them.</p>\n","isPage":true,"text":"\nTesting is a crucial part of any software development process. Dojo provides a testing framework that allows you to write tests for your smart contracts. Since Dojo uses a custom compiler, you need to use sozo to test your contracts.\nFrom your project directory, simply:\nsozo test\nThis will search for all tests within your project and run them.\n","title":"Testing","titles":[null]},"59":{"href":"/cairo/testing#writing-unit-tests","html":"\n<p>It is best practise to include unit tests in the same file as the Model/System you are writing.</p>\n<p>Lets show a <code>model</code> test example from the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a>:</p>\n<p><code>models.cairo</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">...</span><span style=\"color:#768390\">//rest of code</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[cfg(test)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> tests</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#6CB6FF\"> super</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2Trait</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[available_gas(100000)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> test_vec_is_zero</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">Vec2Trait</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">is_zero</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\"> }), </span><span style=\"color:#96D0FF\">&quot;not zero&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[available_gas(100000)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> test_vec_is_equal</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> position </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 420</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(position</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">is_equal</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 420</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\"> }), </span><span style=\"color:#96D0FF\">&quot;not equal&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>In this test we are testing the <code>is_zero</code> and <code>is_equal</code> functions of the <code>Position</code> model. It is good practise to test all functions of your models.</p>\n","isPage":false,"text":"\nIt is best practise to include unit tests in the same file as the Model/System you are writing.\nLets show a model test example from the dojo-starter:\nmodels.cairo\n \n...//rest of code\n \n#[cfg(test)]\nmod tests {\n    use super::{Position, Vec2, Vec2Trait};\n \n    #[test]\n    #[available_gas(100000)]\n    fn test_vec_is_zero() {\n        assert!(Vec2Trait::is_zero(Vec2 { x: 0, y: 0 }), &quot;not zero&quot;);\n    }\n \n    #[test]\n    #[available_gas(100000)]\n    fn test_vec_is_equal() {\n        let position = Vec2 { x: 420, y: 0 };\n        assert!(position.is_equal(Vec2 { x: 420, y: 0 }), &quot;not equal&quot;);\n    }\n}\nIn this test we are testing the is_zero and is_equal functions of the Position model. It is good practise to test all functions of your models.\n","title":"Writing Unit Tests","titles":[null,"Testing"]},"60":{"href":"/cairo/testing#writing-integration-tests","html":"\n<p>Integration tests are e2e tests that test the entire system. You can write integration tests for your world by creating a <code>tests</code> directory in your project root. Then create a file for each integration test you want to write.</p>\n<p>This is the example from the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a>:</p>\n<p><code>move.cairo</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[cfg(test)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> tests</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">world</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">IWorldDispatcherTrait</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">IWorldDispatcher</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">test_utils</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{spawn_test_world, deploy_contract};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{position, moves};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo_examples</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Direction</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#6CB6FF\"> super</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{actions, </span><span style=\"color:#F69D50\">IActionsDispatcher</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">IActionsDispatcherTrait</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // helper setup function</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    // reusable function for tests</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> IActionsDispatcher</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // components</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#F47067\"> mut</span><span style=\"color:#ADBAC7\"> models </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> array!</span><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">position</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">moves</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">         // deploy world with models</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> world </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> spawn_test_world</span><span style=\"color:#ADBAC7\">(models);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // deploy systems contract</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> contract_address </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> world</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            .</span><span style=\"color:#DCBDFB\">deploy_contract</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;salt&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">actions</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">try_into</span><span style=\"color:#ADBAC7\">()</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">unwrap</span><span style=\"color:#ADBAC7\">());</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> actions_system </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> IActionsDispatcher</span><span style=\"color:#ADBAC7\"> { contract_address };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[available_gas(30000000)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> test_move</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // caller</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> caller </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x0</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> actions_system </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">         // System calls</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">Direction</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Right</span><span style=\"color:#ADBAC7\">(()));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // check moves</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> moves </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, caller, (</span><span style=\"color:#F69D50\">Moves</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(moves</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">remaining </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> 99</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;moves is wrong&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // get new_position</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> new_position </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, caller, </span><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // check new position x</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(new_position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">x </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> 11</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;position x is wrong&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // check new position y</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(new_position</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">vec</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">y </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> 10</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;position y is wrong&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nIntegration tests are e2e tests that test the entire system. You can write integration tests for your world by creating a tests directory in your project root. Then create a file for each integration test you want to write.\nThis is the example from the dojo-starter:\nmove.cairo\n#[cfg(test)]\nmod tests {\n    use dojo::world::{IWorldDispatcherTrait, IWorldDispatcher};\n    use dojo::test_utils::{spawn_test_world, deploy_contract};\n    use dojo_examples::models::{position, moves};\n    use dojo_examples::models::{Position, Moves, Direction};\n \n    use super::{actions, IActionsDispatcher, IActionsDispatcherTrait};\n \n    // helper setup function\n    // reusable function for tests\n    fn setup_world() -&gt; IActionsDispatcher {\n        // components\n        let mut models = array![position::TEST_CLASS_HASH, moves::TEST_CLASS_HASH];\n \n         // deploy world with models\n        let world = spawn_test_world(models);\n \n        // deploy systems contract\n        let contract_address = world\n            .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());\n        let actions_system = IActionsDispatcher { contract_address };\n \n        actions_system\n    }\n \n \n    #[test]\n    #[available_gas(30000000)]\n    fn test_move() {\n        // caller\n        let caller = starknet::contract_address_const::&lt;0x0&gt;();\n \n        let actions_system = setup_world();\n \n         // System calls\n        actions_system.spawn();\n        actions_system.move(Direction::Right(()));\n \n        // check moves\n        let moves = get!(world, caller, (Moves));\n        assert!(moves.remaining == 99, &quot;moves is wrong&quot;);\n \n        // get new_position\n        let new_position = get!(world, caller, Position);\n \n        // check new position x\n        assert!(new_position.vec.x == 11, &quot;position x is wrong&quot;);\n \n        // check new position y\n        assert!(new_position.vec.y == 10, &quot;position y is wrong&quot;);\n    }\n}\n","title":"Writing Integration Tests","titles":[null,"Testing"]},"61":{"href":"/cairo/testing#useful-dojo-test-functions","html":"\n<p><code>spawn_test_world(models)</code> - This function will create a test world with the models and systems you pass in. It will also deploy the world and register the models and systems.</p>","isPage":false,"text":"\nspawn_test_world(models) - This function will create a test world with the models and systems you pass in. It will also deploy the world and register the models and systems.","title":"Useful Dojo Test Functions","titles":[null,"Testing","Writing Integration Tests"]},"62":{"href":"/cairo/world#the-world-contract","html":"\n<p>The world contract functions as a central store for the world models and systems. Every contract that interacts with the world, must use the world contract address as the first parameter. This is how the world contract is able to manage the state of the world.</p>\n<p>Although we suggest strongly to structure your world around an ECS pattern you are not required to do so. You can simply use the dojo-models as a keypair store along with the supporting infrastructure.</p>\n<blockquote>\n<p>NOTE: Dojo core abstracts the world contract away, you do not write it and it is not meant to be altered when building a world. However, it&#x27;s important to understand how it works and how it interacts with the rest of the system.</p>\n</blockquote>\n","isPage":true,"text":"\nThe world contract functions as a central store for the world models and systems. Every contract that interacts with the world, must use the world contract address as the first parameter. This is how the world contract is able to manage the state of the world.\nAlthough we suggest strongly to structure your world around an ECS pattern you are not required to do so. You can simply use the dojo-models as a keypair store along with the supporting infrastructure.\n\nNOTE: Dojo core abstracts the world contract away, you do not write it and it is not meant to be altered when building a world. However, it&#x27;s important to understand how it works and how it interacts with the rest of the system.\n\n","title":"The World Contract","titles":[null]},"63":{"href":"/cairo/world#events","html":"\n<p>The world contract emits all model events via the <code>StoreSetRecord</code> event. This enables block explorers to reconstruct everything in the world by listening to one contract.</p>\n","isPage":false,"text":"\nThe world contract emits all model events via the StoreSetRecord event. This enables block explorers to reconstruct everything in the world by listening to one contract.\n","title":"Events","titles":[null,"The World Contract"]},"64":{"href":"/cairo/world#full-world-api","html":"\n<p>The world exposes an interface which can be interacted with by any client. It is worth noting here that as a developer you don&#x27;t deploy this world, it is deployed when you <a href=\"/toolchain/sozo/overview.md\">migrate</a> the world.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// World interface</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">interface]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> IWorld</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> metadata_uri</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, resource</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> set_metadata_uri</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, resource</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, uri</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> model</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, name</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> register_model</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, class_hash</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> deploy_contract</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, salt</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, class_hash</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> upgrade_contract</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">, class_hash</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> uuid</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> usize</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> emit</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, keys</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Array</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;, values</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> entity</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, keys</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;, offset</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">, length</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> usize</span><span style=\"color:#ADBAC7\">, layout</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    ) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> set_entity</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        keys</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        offset</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        values</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        layout</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> entities</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        index</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Option</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        values</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        values_length</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> usize</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        values_layout</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    ) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;, </span><span style=\"color:#F69D50\">Span</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;&gt;);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> entity_ids</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> set_executor</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, contract_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> executor</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> base</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> ClassHash</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> delete_entity</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, keys</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;felt252&gt;, layout</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">&gt;);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> is_owner</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">, resource</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> grant_owner</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">, resource</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> revoke_owner</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">, resource</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> is_writer</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, system</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> grant_writer</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, system</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> revoke_writer</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, model</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, system</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe world exposes an interface which can be interacted with by any client. It is worth noting here that as a developer you don&#x27;t deploy this world, it is deployed when you migrate the world.\n// World interface\n#[starknet::interface]\ntrait IWorld&lt;T&gt; {\n    fn metadata_uri(self: @T, resource: felt252) -&gt; Span&lt;felt252&gt;;\n    fn set_metadata_uri(ref self: T, resource: felt252, uri: Span&lt;felt252&gt;);\n    fn model(self: @T, name: felt252) -&gt; ClassHash;\n    fn register_model(ref self: T, class_hash: ClassHash);\n    fn deploy_contract(ref self: T, salt: felt252, class_hash: ClassHash) -&gt; ContractAddress;\n    fn upgrade_contract(ref self: T, address: ContractAddress, class_hash: ClassHash) -&gt; ClassHash;\n    fn uuid(ref self: T) -&gt; usize;\n    fn emit(self: @T, keys: Array&lt;felt252&gt;, values: Span&lt;felt252&gt;);\n    fn entity(\n        self: @T, model: felt252, keys: Span&lt;felt252&gt;, offset: u8, length: usize, layout: Span&lt;u8&gt;\n    ) -&gt; Span&lt;felt252&gt;;\n    fn set_entity(\n        ref self: T,\n        model: felt252,\n        keys: Span&lt;felt252&gt;,\n        offset: u8,\n        values: Span&lt;felt252&gt;,\n        layout: Span&lt;u8&gt;\n    );\n    fn entities(\n        self: @T,\n        model: felt252,\n        index: Option&lt;felt252&gt;,\n        values: Span&lt;felt252&gt;,\n        values_length: usize,\n        values_layout: Span&lt;u8&gt;\n    ) -&gt; (Span&lt;felt252&gt;, Span&lt;Span&lt;felt252&gt;&gt;);\n    fn entity_ids(self: @T, model: felt252) -&gt; Span&lt;felt252&gt;;\n    fn set_executor(ref self: T, contract_address: ContractAddress);\n    fn executor(self: @T) -&gt; ContractAddress;\n    fn base(self: @T) -&gt; ClassHash;\n    fn delete_entity(ref self: T, model: felt252, keys: Span&lt;felt252&gt;, layout: Span&lt;u8&gt;);\n    fn is_owner(self: @T, address: ContractAddress, resource: felt252) -&gt; bool;\n    fn grant_owner(ref self: T, address: ContractAddress, resource: felt252);\n    fn revoke_owner(ref self: T, address: ContractAddress, resource: felt252);\n    fn is_writer(self: @T, model: felt252, system: ContractAddress) -&gt; bool;\n    fn grant_writer(ref self: T, model: felt252, system: ContractAddress);\n    fn revoke_writer(ref self: T, model: felt252, system: ContractAddress);\n}\n","title":"Full World API","titles":[null,"The World Contract"]},"65":{"href":"/cairo/world#uuid","html":"\n<p>It is often useful to generate unique IDs for entities. The <code>uuid()</code> fn can be used to generate a unique ID.</p>\n<p>Use it like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> world</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">uuid</span><span style=\"color:#ADBAC7\">();</span></span></code></pre></figure>","isPage":false,"text":"\nIt is often useful to generate unique IDs for entities. The uuid() fn can be used to generate a unique ID.\nUse it like this:\nlet game_id = world.uuid();","title":"uuid()","titles":[null,"The World Contract"]},"66":{"href":"/client/torii#torii-client","html":"\n<p>Torii client is a rust client for interacting with Dojo worlds. It can be compiled to wasm to be used in JS clients, or can used directly in Rust clients or other lower level languages with bindings.</p>\n","isPage":true,"text":"\nTorii client is a rust client for interacting with Dojo worlds. It can be compiled to wasm to be used in JS clients, or can used directly in Rust clients or other lower level languages with bindings.\n","title":"Torii Client","titles":[null]},"67":{"href":"/client/torii#usage-in-rust-projects","html":"\n<strong>@kairy</strong>\n","isPage":false,"text":"\n@kairy\n","title":"Usage in Rust projects","titles":[null,"Torii Client"]},"68":{"href":"/community/get-started#get-started","html":"\n<p>Dojo is a thriving community of builders, artists, and deep thinkers, pushing the frontier of what is possible.</p>\n<ul>\n<li><a href=\"https://dojoengine.notion.site/Dojo-Engine-Community-Hub-d316194b998941c48ddf771a4dd5ff08#bcd6a32db1b2406cb6c325f3b700d45a\">Community Hub</a></li>\n<li><a href=\"https://discord.gg/KG9w9BmDrV\">Discord</a></li>\n<li><a href=\"https://twitter.com/dojostarknet\">Twitter</a></li>\n<li><a href=\"https://github.com/dojoengine/awesome-dojo\">Awesome Dojo</a></li>\n<li><a href=\"https://www.dojoengine.org/en/articles/\">Dojo Blog</a></li>\n</ul>\n","isPage":true,"text":"\nDojo is a thriving community of builders, artists, and deep thinkers, pushing the frontier of what is possible.\n\nCommunity Hub\nDiscord\nTwitter\nAwesome Dojo\nDojo Blog\n\n","title":"Get Started","titles":[null]},"69":{"href":"/community/get-started#ecosystem--studios-powered-by-dojo","html":"\n<p><img src=\"/Built%20with.svg\" alt=\"dojo\"/></p>\n","isPage":false,"text":"\n\n","title":"Ecosystem &amp; Studios powered by Dojo","titles":[null]},"70":{"href":"/community/get-started#realms-world","html":"\n<ul>\n<li><a href=\"https://discord.gg/realmsworld\">discord</a></li>\n<li><a href=\"https://realms.world/\">website</a></li>\n</ul>\n","isPage":false,"text":"\n\ndiscord\nwebsite\n\n","title":"Realms World","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"71":{"href":"/community/get-started#briq-world","html":"\n<ul>\n<li><a href=\"https://discord.gg/kpvbDCw5pr\">discord</a></li>\n<li><a href=\"https://briq.construction/\">website</a></li>\n</ul>\n","isPage":false,"text":"\n\ndiscord\nwebsite\n\n","title":"Briq World","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"72":{"href":"/community/get-started#cartridge","html":"\n<ul>\n<li><a href=\"https://discord.gg/cartridge\">discord</a></li>\n<li><a href=\"https://cartridge.gg/\">website</a></li>\n</ul>\n","isPage":false,"text":"\n\ndiscord\nwebsite\n\n","title":"Cartridge","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"73":{"href":"/community/get-started#zkorp","html":"\n<ul>\n<li><a href=\"https://twitter.com/zKorp_\">twitter</a></li>\n</ul>\n","isPage":false,"text":"\n\ntwitter\n\n","title":"zKorp","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"74":{"href":"/community/get-started#templates--libraries","html":"\n<p>Templates, libraries or utilities that use Dojo.</p>\n<ul>\n<li><a href=\"https://github.com/dojoengine/origami\">Origami</a> - Cairo primitives for onchain Gaming</li>\n<li><a href=\"https://github.com/CheDAOLabs/cc-dojo-map\">Crypts And Caverns Dojo Map</a> - An Example projects of integrating C&amp;C maps developed by the CHE-DAO team with Dojo.</li>\n</ul>\n","isPage":false,"text":"\nTemplates, libraries or utilities that use Dojo.\n\nOrigami - Cairo primitives for onchain Gaming\nCrypts And Caverns Dojo Map - An Example projects of integrating C&amp;C maps developed by the CHE-DAO team with Dojo.\n\n","title":"Templates &amp; Libraries","titles":[null]},"75":{"href":"/community/get-started#awesome-projects","html":"\n<ul>\n<li><a href=\"https://github.com/cartridge-gg/beer-baron\">Beer Baron</a> - An dojo onchain simulation masked as a beer brewing game. It is designed to work with 10 - 10,000 players.</li>\n<li><a href=\"https://github.com/dojoengine/origami/tree/main/examples/chess\">Chess Dojo</a> - A chess game built on Dojo.</li>\n<li><a href=\"https://github.com/cartridge-gg/rollyourown\">Dope Wars: Roll Your Own</a> - An onchain adaptation of the classic Drug Wars game developed by the Cartridge team.</li>\n<li><a href=\"https://github.com/cartridge-gg/drive-ai\">Drive AI</a> - An onchain driving simulator controlled by a neural network developed by the Cartridge team.</li>\n<li><a href=\"https://github.com/dojoengine/emoji-man\">Emoji Man</a> - Pac-man inspired onchain game using dojo and phaser.</li>\n<li><a href=\"https://github.com/funDAOmental/lootunderworld\">Loot Underworld</a> - Excavating the dangerous, endless mysteries of the subterranean in the dark depths of the Realms Autonomous (Under)World.</li>\n<li><a href=\"https://github.com/pixelaw/game\">PixeLAW</a> - A pixel grid-based Autonomous World with coexisting games (i.e. Paint, Snake, Rock-Paper-Scissors).</li>\n<li><a href=\"https://github.com/BibliothecaDAO/eternum\">Realms Autonomous World</a> - The Realms Autonomous World</li>\n<li><a href=\"https://github.com/dojoengine/stark-lander\">Stark Lander</a> - Land on the Moon!</li>\n<li><a href=\"https://github.com/Starklandxyz\">StarkLand</a> - Full On-chain Multiplayer Online Simulation Game (FOMOSLG) built on Starknet.</li>\n<li><a href=\"https://github.com/funDAOmental/underdark\">Underdark: Lair of the Slenderduck</a> - An unhinged on-chain generative dungeon skin crawler. Beware the Slenderduck!</li>\n<li><a href=\"https://github.com/z-korp/zdefender-front\">zDefender</a> - An onchain tower defense.</li>\n<li><a href=\"https://github.com/z-korp/zknight\">zKnight</a> - An onchain strategy game</li>\n</ul>","isPage":false,"text":"\n\nBeer Baron - An dojo onchain simulation masked as a beer brewing game. It is designed to work with 10 - 10,000 players.\nChess Dojo - A chess game built on Dojo.\nDope Wars: Roll Your Own - An onchain adaptation of the classic Drug Wars game developed by the Cartridge team.\nDrive AI - An onchain driving simulator controlled by a neural network developed by the Cartridge team.\nEmoji Man - Pac-man inspired onchain game using dojo and phaser.\nLoot Underworld - Excavating the dangerous, endless mysteries of the subterranean in the dark depths of the Realms Autonomous (Under)World.\nPixeLAW - A pixel grid-based Autonomous World with coexisting games (i.e. Paint, Snake, Rock-Paper-Scissors).\nRealms Autonomous World - The Realms Autonomous World\nStark Lander - Land on the Moon!\nStarkLand - Full On-chain Multiplayer Online Simulation Game (FOMOSLG) built on Starknet.\nUnderdark: Lair of the Slenderduck - An unhinged on-chain generative dungeon skin crawler. Beware the Slenderduck!\nzDefender - An onchain tower defense.\nzKnight - An onchain strategy game\n","title":"Awesome Projects","titles":[null]},"76":{"href":"/deployment/locally#local-deployment-with-katana","html":"\n<p>Experience the power of rapid development with Dojo, featuring the ultra-fast local development sequencer, <a href=\"/toolchain/katana/overview.md\">Katana</a>. Katana acts as an on-device Starknet, enabling thorough testing of your dojo world in a controlled environment before migrating them to the remote testnet.</p>\n","isPage":true,"text":"\nExperience the power of rapid development with Dojo, featuring the ultra-fast local development sequencer, Katana. Katana acts as an on-device Starknet, enabling thorough testing of your dojo world in a controlled environment before migrating them to the remote testnet.\n","title":"Local Deployment with Katana","titles":[null]},"77":{"href":"/deployment/locally#easy-katana-deployments","html":"\n<p>Deploying to Katana is straightforward and efficient.</p>\n<blockquote>\n<p><strong>Pre-requisite:</strong> Ensure you&#x27;ve completed the <a href=\"/getting-started/quick-start.md\">Quick Start</a> guide and have your project set up.</p>\n</blockquote>\n<p>To initiate Katana from your project directory, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --disable-fee</span></span></code></pre></figure>\n<p>This command launches a local instance of Katana, setting the stage for your deployment.</p>\n","isPage":false,"text":"\nDeploying to Katana is straightforward and efficient.\n\nPre-requisite: Ensure you&#x27;ve completed the Quick Start guide and have your project set up.\n\nTo initiate Katana from your project directory, execute:\nkatana --disable-fee\nThis command launches a local instance of Katana, setting the stage for your deployment.\n","title":"Easy Katana Deployments","titles":[null,"Local Deployment with Katana"]},"78":{"href":"/deployment/locally#step-by-step-guide-to-deploy-on-katana","html":"\n<p>Deploying your project to Katana involves a few simple steps.\\</p>\n<ol>\n<li>\n<strong>Compile Your Contracts:</strong>\n<p>If you haven&#x27;t compiled your contracts yet, run:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>Compiling ensures that your contracts are ready for deployment.</p>\n</li>\n<li>\n<strong>Migrate your Project:</strong>\n<p>To migrate, run:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate</span></span></code></pre></figure>\n</li>\n</ol>\n<p>Success! You have now migrated your world. You will be able to interact with the world using <a href=\"/toolchain/sozo/overview.md\">sozo</a>.</p>","isPage":false,"text":"\nDeploying your project to Katana involves a few simple steps.\\\n\n\nCompile Your Contracts:\nIf you haven&#x27;t compiled your contracts yet, run:\nsozo build\nCompiling ensures that your contracts are ready for deployment.\n\n\nMigrate your Project:\nTo migrate, run:\nsozo migrate\n\n\nSuccess! You have now migrated your world. You will be able to interact with the world using sozo.","title":"Step-by-Step Guide to Deploy on Katana","titles":[null,"Local Deployment with Katana"]},"79":{"href":"/deployment/remote#deployment-to-remote-network","html":"\n<blockquote>\n<p><em>IMPORTANT: Dojo is unaudited. Use at your own risk.</em></p>\n</blockquote>\n<p>Dojo makes it easy to deploy to remote networks, you just need to have a valid account and network endpoint.</p>\n<p>Scarb.toml</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">package</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;ohayoo&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">version = </span><span style=\"color:#96D0FF\">&quot;0.1.0&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cairo-version = </span><span style=\"color:#96D0FF\">&quot;0.3.15&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">cairo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">sierra-replace-ids = </span><span style=\"color:#6CB6FF\">true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, tag = </span><span style=\"color:#96D0FF\">&quot;v0.3.15&quot;</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># KATANA on slot</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># rpc_url = &quot;https://api.cartridge.gg/x/example/katana&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># ENDPOINT</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;https://api.cartridge.gg/x/shinai/madara&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;0x2&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">world_address = </span><span style=\"color:#96D0FF\">&quot;0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># GOERLI</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># rpc_url = &quot;https://starknet-goerli.g.alchemy.com/v2/&lt;API KEY&gt;&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;</span></span></code></pre></figure>\n","isPage":true,"text":"\n\nIMPORTANT: Dojo is unaudited. Use at your own risk.\n\nDojo makes it easy to deploy to remote networks, you just need to have a valid account and network endpoint.\nScarb.toml\n[package]\nname = &quot;ohayoo&quot;\nversion = &quot;0.1.0&quot;\ncairo-version = &quot;0.3.15&quot;\n \n[cairo]\nsierra-replace-ids = true\n \n[dependencies]\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, tag = &quot;v0.3.15&quot; }\n \n# KATANA on slot\n# rpc_url = &quot;https://api.cartridge.gg/x/example/katana&quot;\n# account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;\n# private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;\n# world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;\n \n# ENDPOINT\nrpc_url = &quot;https://api.cartridge.gg/x/shinai/madara&quot;\naccount_address = &quot;0x2&quot;\nprivate_key = &quot;0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d&quot;\nworld_address = &quot;0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201&quot;\n \n# GOERLI\n# rpc_url = &quot;https://starknet-goerli.g.alchemy.com/v2/&lt;API KEY&gt;&quot;\n# account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;\n# private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;\n# world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;\n","title":"Deployment to Remote Network","titles":[null]},"80":{"href":"/deployment/remote#deploy-to-public-starknet","html":"\n<p>If you credentials are correct in the Scarb.toml then a simple migrate will deploy the world to Starknet.</p>\n","isPage":false,"text":"\nIf you credentials are correct in the Scarb.toml then a simple migrate will deploy the world to Starknet.\n","title":"Deploy to public Starknet","titles":[null,"Deployment to Remote Network"]},"81":{"href":"/deployment/remote#deploy-to-remote-katana","html":"\n<p>Katanas are able to be hosted and run as remote testnets, however this is not recommended for production use.</p>\n<p>Deploy to remote katana with slot <a href=\"/tutorial/deploy-using-slot/main.md\">here</a></p>\n","isPage":false,"text":"\nKatanas are able to be hosted and run as remote testnets, however this is not recommended for production use.\nDeploy to remote katana with slot here\n","title":"Deploy to Remote","titles":[null,"Deployment to Remote Network"]},"82":{"href":"/deployment/remote#deploy-to-remote-madara","html":"\n<p><a href=\"https://github.com/keep-starknet-strange/madara\">Madara</a> is a blazingly fast Starknet sequencer.</p>","isPage":false,"text":"\nMadara is a blazingly fast Starknet sequencer.","title":"Deploy to Remote Madara","titles":[null,"Deployment to Remote Network"]},"83":{"href":"/getting-started/from-source#building-from-source","html":"\n<blockquote>\n<p>If you are just wanting to play with the toolchain, we strongly suggest following the <a href=\"/getting-started/quick-start.md\">Quick Start</a> guide.</p>\n</blockquote>\n","isPage":true,"text":"\n\nIf you are just wanting to play with the toolchain, we strongly suggest following the Quick Start guide.\n\n","title":"Building from source","titles":[null]},"84":{"href":"/getting-started/from-source#prerequisites","html":"\n<p>You will need the <a href=\"https://rust-lang.org\">Rust</a> compiler and Cargo, the Rust package manager.\nThe easiest way to install both is with <a href=\"https://rustup.rs/\"><code>rustup.rs</code></a>.</p>\n<p>On Windows, you will also need a recent version of <a href=\"https://visualstudio.microsoft.com/downloads/\">Visual Studio</a>,\ninstalled with the &quot;Desktop Development With C++&quot; Workloads option.</p>\n","isPage":false,"text":"\nYou will need the Rust compiler and Cargo, the Rust package manager.\nThe easiest way to install both is with rustup.rs.\nOn Windows, you will also need a recent version of Visual Studio,\ninstalled with the &quot;Desktop Development With C++&quot; Workloads option.\n","title":"Prerequisites","titles":[null,"Building from source",null]},"85":{"href":"/getting-started/from-source#building","html":"\n<p>You can either use the different <a href=\"/toolchain/dojoup.md\">Dojoup</a> flags:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --branch</span><span style=\"color:#96D0FF\"> master</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --path</span><span style=\"color:#96D0FF\"> path/to/dojo</span></span></code></pre></figure>\n<p>Or, by using a single Cargo command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --git https://github.com/dojoengine/dojo --force sozo katana torii</span></span></code></pre></figure>\n<p>Or, by manually building from a local copy of the <a href=\"https://github.com/dojoengine/dojo\">Dojo repository</a>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># clone the repository</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">git</span><span style=\"color:#96D0FF\"> clone https://github.com/dojoengine/dojo.git</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">cd</span><span style=\"color:#96D0FF\"> dojo</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># install Sozo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./bin/sozo --force</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># install Katana</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./bin/katana --force</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># install Torii</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./bin/torii --force</span></span></code></pre></figure>","isPage":false,"text":"\nYou can either use the different Dojoup flags:\ndojoup --branch master\ndojoup --path path/to/dojo\nOr, by using a single Cargo command:\ncargo install --git https://github.com/dojoengine/dojo --force sozo katana torii\nOr, by manually building from a local copy of the Dojo repository:\n# clone the repository\ngit clone https://github.com/dojoengine/dojo.git\ncd dojo\n# install Sozo\ncargo install --path ./bin/sozo --force\n# install Katana\ncargo install --path ./bin/katana --force\n# install Torii\ncargo install --path ./bin/torii --force","title":"Building","titles":[null,"Building from source",null]},"86":{"href":"/getting-started/quick-start#quick-start","html":"\n<blockquote>\n<p>It is worth reading <a href=\"/theory/autonomous-worlds.md\">theory</a> to familiarize yourself with the concept of Autonomous Worlds (AWs) and the <a href=\"/theory/cairo.md\">Cairo ecosystem</a> before diving into the code.</p>\n</blockquote>\n<div data-vocs-steps=\"true\"><div data-depth=\"3\">","isPage":true,"text":"\n\nIt is worth reading theory to familiarize yourself with the concept of Autonomous Worlds (AWs) and the Cairo ecosystem before diving into the code.\n\n","title":"Quick Start","titles":[null]},"87":{"href":"/getting-started/quick-start#install-dojoup","html":"<p>Dojo is built around a set of development tools - Katana, Torii and Sozo. Install them all easily with Dojoup.</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> -L</span><span style=\"color:#96D0FF\"> https://install.dojoengine.org </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> bash</span></span></code></pre></figure></div><div data-depth=\"3\">","isPage":false,"text":"Dojo is built around a set of development tools - Katana, Torii and Sozo. Install them all easily with Dojoup.curl -L https://install.dojoengine.org | bash","title":"Install Dojoup","titles":[null,"Quick Start"]},"88":{"href":"/getting-started/quick-start#run-dojoup","html":"<p>This will install Dojoup, then simply follow the instructions on-screen,\nwhich will make the <code>dojoup</code> command available in your CLI.</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span></span></code></pre></figure><p>For full <code>dojoup</code> reference and debugging see <a href=\"/toolchain/dojoup.md\">Dojoup</a>.</p></div><div data-depth=\"3\">","isPage":false,"text":"This will install Dojoup, then simply follow the instructions on-screen,\nwhich will make the dojoup command available in your CLI.dojoupFor full dojoup reference and debugging see Dojoup.","title":"Run dojoup","titles":[null,"Quick Start"]},"89":{"href":"/getting-started/quick-start#install-scarb-optional","html":"<p>To ensure the proper functioning of the language server, your local <code>Scarb</code> version must be equal to or higher than the Dojo&#x27;s Cairo version. To accomplish this, first check your Dojo&#x27;s Cairo version running the following command:</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#6CB6FF\"> --version</span></span></code></pre></figure><p>You should have an output similar to this:</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">sozo 0.6.0-alpha.9</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">scarb: 2.5.4</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">cairo: 2.5.4</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">sierra: 1.4.0</span></span></code></pre></figure><p>After that, check your local <code>Scarb</code> version:</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">scarb</span><span style=\"color:#6CB6FF\"> --version</span></span></code></pre></figure><p>You should have an output similar to this:</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">scarb 2.5.4 (28dee92c8 2024-02-14)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">cairo: 2.5.4 (https://crates.io/crates/cairo-lang-compiler/2.5.4)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">sierra: 1.4.0</span></span></code></pre></figure><p>If your local <code>Scarb</code> version is lower than the Dojo&#x27;s Cairo version, you have to install a newer version <code>Scarb</code>.</p><p>To accomplish it, please refer to the <a href=\"https://docs.swmansion.com/scarb/download\">installation instructions</a>.\nWe strongly recommend that you install\nScarb via <a href=\"https://docs.swmansion.com/scarb/download.html#install-via-asdf\">asdf</a>, a CLI tool that can manage\nmultiple language runtime versions on a per-project basis.\nThis will ensure that the version of Scarb you use to work on a project always matches the one defined in the\nproject settings, avoiding problems related to version mismatches.</p><p>Please refer to the <a href=\"https://asdf-vm.com/guide/getting-started.html\">asdf documentation</a> to install all\nprerequisites.</p><p>Once you have <code>asdf</code> installed locally, you can download Scarb plugin with the following command:</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">asdf</span><span style=\"color:#96D0FF\"> plugin add scarb</span></span></code></pre></figure><p>This will allow you to download specific versions. You can choose the same version as the Dojo&#x27;s Cairo version, for example, <code>2.5.4</code>, with the following command:</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">asdf</span><span style=\"color:#96D0FF\"> install scarb </span><span style=\"color:#6CB6FF\">2.5</span><span style=\"color:#96D0FF\">.4</span></span></code></pre></figure><p>and set a global version:</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">asdf</span><span style=\"color:#96D0FF\"> global scarb </span><span style=\"color:#6CB6FF\">2.5</span><span style=\"color:#96D0FF\">.4</span></span></code></pre></figure><p>Otherwise, you can simply run the following command in your terminal, and follow the onscreen instructions. This\nwill install the latest stable release of Scarb.</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> --proto</span><span style=\"color:#96D0FF\"> &#x27;=https&#x27;</span><span style=\"color:#6CB6FF\"> --tlsv1.2</span><span style=\"color:#6CB6FF\"> -sSf</span><span style=\"color:#96D0FF\"> https://docs.swmansion.com/scarb/install.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> sh</span></span></code></pre></figure><p>If you want to install a specific version of Scarb, run the following with the desired version number.</p><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> --proto</span><span style=\"color:#96D0FF\"> &#x27;=https&#x27;</span><span style=\"color:#6CB6FF\"> --tlsv1.2</span><span style=\"color:#6CB6FF\"> -sSf</span><span style=\"color:#96D0FF\"> https://docs.swmansion.com/scarb/install.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> sh</span><span style=\"color:#6CB6FF\"> -s</span><span style=\"color:#6CB6FF\"> --</span><span style=\"color:#6CB6FF\"> -v</span><span style=\"color:#6CB6FF\"> 2.5</span><span style=\"color:#96D0FF\">.4</span></span></code></pre></figure>","isPage":false,"text":"To ensure the proper functioning of the language server, your local Scarb version must be equal to or higher than the Dojo&#x27;s Cairo version. To accomplish this, first check your Dojo&#x27;s Cairo version running the following command:sozo --versionYou should have an output similar to this:sozo 0.6.0-alpha.9\nscarb: 2.5.4\ncairo: 2.5.4\nsierra: 1.4.0After that, check your local Scarb version:scarb --versionYou should have an output similar to this:scarb 2.5.4 (28dee92c8 2024-02-14)\ncairo: 2.5.4 (https://crates.io/crates/cairo-lang-compiler/2.5.4)\nsierra: 1.4.0If your local Scarb version is lower than the Dojo&#x27;s Cairo version, you have to install a newer version Scarb.To accomplish it, please refer to the installation instructions.\nWe strongly recommend that you install\nScarb via asdf, a CLI tool that can manage\nmultiple language runtime versions on a per-project basis.\nThis will ensure that the version of Scarb you use to work on a project always matches the one defined in the\nproject settings, avoiding problems related to version mismatches.Please refer to the asdf documentation to install all\nprerequisites.Once you have asdf installed locally, you can download Scarb plugin with the following command:asdf plugin add scarbThis will allow you to download specific versions. You can choose the same version as the Dojo&#x27;s Cairo version, for example, 2.5.4, with the following command:asdf install scarb 2.5.4and set a global version:asdf global scarb 2.5.4Otherwise, you can simply run the following command in your terminal, and follow the onscreen instructions. This\nwill install the latest stable release of Scarb.curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | shIf you want to install a specific version of Scarb, run the following with the desired version number.curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v 2.5.4","title":"Install Scarb (optional)","titles":[null,"Quick Start"]},"90":{"href":"/getting-started/quick-start#next-steps","html":"<blockquote>\n<p>Head to <a href=\"/cairo/hello-dojo.md\">Hello Dojo</a> to get create your first Dojo world.</p>\n</blockquote></div></div>","isPage":false,"text":"\nHead to Hello Dojo to get create your first Dojo world.\n","title":"Next steps","titles":[null]},"91":{"href":"/getting-started/setup#development-setup","html":"</header>\n<blockquote>\n<p>This is a guide to setting up a development environment for Dojo. It is not suggested to follow this guide if you are just wanting to play with the toolchain. We strongly suggest following the <a href=\"/getting-started/quick-start.md\">Quick Start</a> guide.</p>\n</blockquote>\n","isPage":true,"text":"\n\nThis is a guide to setting up a development environment for Dojo. It is not suggested to follow this guide if you are just wanting to play with the toolchain. We strongly suggest following the Quick Start guide.\n\n","title":"Development Setup","titles":[]},"92":{"href":"/getting-started/setup#prerequisites","html":"\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust\">Rust</a></li>\n<li><a href=\"https://github.com/starkware-libs/cairo\">Cairo</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf\">protoc</a></li>\n</ul>\n","isPage":false,"text":"\n\nRust\nCairo\nprotoc\n\n","title":"Prerequisites","titles":["Development Setup",null]},"93":{"href":"/getting-started/setup#guide","html":"\n","isPage":false,"text":"\n","title":"Guide","titles":["Development Setup"]},"94":{"href":"/getting-started/setup#clone","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">git</span><span style=\"color:#96D0FF\"> clone https://github.com/dojoengine/dojo.git</span></span></code></pre></figure>\n","isPage":false,"text":"\ngit clone https://github.com/dojoengine/dojo.git\n","title":"Clone","titles":["Development Setup","Guide"]},"95":{"href":"/getting-started/setup#linux--mac","html":"\n","isPage":false,"text":"\n","title":"Linux &amp; Mac","titles":["Development Setup","Guide"]},"96":{"href":"/getting-started/setup#1-install-rust-and-dependencies","html":"\n<p>Start by installing Rust and running the test suite to confirm your setup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">rustup</span><span style=\"color:#96D0FF\"> override set stable </span><span style=\"color:#ADBAC7\">&amp;&amp; </span><span style=\"color:#F69D50\">rustup</span><span style=\"color:#96D0FF\"> update </span><span style=\"color:#ADBAC7\">&amp;&amp; </span><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> test</span></span></code></pre></figure>\n<blockquote>\n<p>Note: Depending on your Linux distribution, you may need to install additional dependencies. Make sure to install any suggested or missing dependencies that arise during the setup process.</p>\n</blockquote>\n","isPage":false,"text":"\nStart by installing Rust and running the test suite to confirm your setup:\nrustup override set stable &amp;&amp; rustup update &amp;&amp; cargo test\n\nNote: Depending on your Linux distribution, you may need to install additional dependencies. Make sure to install any suggested or missing dependencies that arise during the setup process.\n\n","title":"1. Install Rust and Dependencies","titles":["Development Setup","Guide","Linux &amp; Mac"]},"97":{"href":"/getting-started/setup#2-install-scarb-package-manager","html":"\n<p>Next, install the <a href=\"https://docs.swmansion.com/scarb\">Scarb</a> package manager by running:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> --proto</span><span style=\"color:#96D0FF\"> &#x27;=https&#x27;</span><span style=\"color:#6CB6FF\"> --tlsv1.2</span><span style=\"color:#6CB6FF\"> -sSf</span><span style=\"color:#96D0FF\"> https://docs.swmansion.com/scarb/install.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> sh</span></span></code></pre></figure>\n","isPage":false,"text":"\nNext, install the Scarb package manager by running:\ncurl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh\n","title":"2. Install Scarb Package Manager","titles":["Development Setup","Guide","Linux &amp; Mac"]},"98":{"href":"/getting-started/setup#3-add-the-cairo-10-vscode-extension","html":"\n<p>Install the <a href=\"https://marketplace.visualstudio.com/items?itemName=starkware.cairo1\">Cairo 1.0</a> extension for Visual Studio Code.</p>\n","isPage":false,"text":"\nInstall the Cairo 1.0 extension for Visual Studio Code.\n","title":"3. Add the Cairo 1.0 VSCode Extension","titles":["Development Setup","Guide","Linux &amp; Mac"]},"99":{"href":"/getting-started/setup#windows","html":"\n<p><em>Coming soon</em></p>\n","isPage":false,"text":"\nComing soon\n","title":"Windows","titles":["Development Setup","Guide"]},"100":{"href":"/getting-started/setup#container","html":"\n<p><em>Coming soon</em></p>","isPage":false,"text":"\nComing soon","title":"Container","titles":["Development Setup","Guide"]},"101":{"href":"/misc/contributors#contributing-to-dojo-book","html":"\n<p>As the Dojo engine progresses and develops, it is essential for the Dojo book to keep pace with these advancements.</p>\n<p>Updating and refining the book ensures that it remains a relevant and valuable resource for those interested in understanding and utilizing the latest Dojo engine features and capabilities.</p>\n<p>All help is welcome!</p>","isPage":true,"text":"\nAs the Dojo engine progresses and develops, it is essential for the Dojo book to keep pace with these advancements.\nUpdating and refining the book ensures that it remains a relevant and valuable resource for those interested in understanding and utilizing the latest Dojo engine features and capabilities.\nAll help is welcome!","title":"Contributing to Dojo Book","titles":[null]},"102":{"href":"/theory/autonomous-worlds#onchain-games-to-provable-games","html":"\n<p>Onchain games promise us freedom of expression and sovereignty over our information. They possess these properties because they run on a blockchain verified by consensus. Provable games, using zk proofs, allow for the verification of game state and computations without large consensus schemes. Written in languages like Cairo, Noir or running RISC-Zero, these games can operate independently on an isolated zkVM like a browser, with verifiable outputs ensuring truthful execution. This broadens our possibilities in the onchain gaming industry.</p>\n<p>An illustrative example is a game like Donkey Kong. Currently, to have your high score recognized on the leaderboard, you must play on a certified machine to prevent cheating, while recording your gameplay. However, if Donkey Kong were a provable game, players could compete in isolation. Achieving a high score would simply require submitting a proof to the Donkey Kong organization for verification. This method allows players to establish themselves as the King of Kong from the comfort of their home, without the need to record their gameplay!</p>\n<p>It&#x27;s important to note that the approach isn&#x27;t binary. For instance, you could operate an onchain game on an EVM and then layer a Cairo-based game on top, enhancing the core game while broadening its capabilities.</p>\n<p>For more information about Starknet, Cairo and its tech stack, check out the <a href=\"https://book.starknet.io/\">Starknet &amp; Cairo book</a>.</p>\n","isPage":true,"text":"\nOnchain games promise us freedom of expression and sovereignty over our information. They possess these properties because they run on a blockchain verified by consensus. Provable games, using zk proofs, allow for the verification of game state and computations without large consensus schemes. Written in languages like Cairo, Noir or running RISC-Zero, these games can operate independently on an isolated zkVM like a browser, with verifiable outputs ensuring truthful execution. This broadens our possibilities in the onchain gaming industry.\nAn illustrative example is a game like Donkey Kong. Currently, to have your high score recognized on the leaderboard, you must play on a certified machine to prevent cheating, while recording your gameplay. However, if Donkey Kong were a provable game, players could compete in isolation. Achieving a high score would simply require submitting a proof to the Donkey Kong organization for verification. This method allows players to establish themselves as the King of Kong from the comfort of their home, without the need to record their gameplay!\nIt&#x27;s important to note that the approach isn&#x27;t binary. For instance, you could operate an onchain game on an EVM and then layer a Cairo-based game on top, enhancing the core game while broadening its capabilities.\nFor more information about Starknet, Cairo and its tech stack, check out the Starknet &amp; Cairo book.\n","title":"Onchain games to provable games","titles":[null]},"103":{"href":"/theory/autonomous-worlds#autonomous-worlds","html":"\n<blockquote>\n<p>&quot;Autonomous worlds represent persistent, permissionless, and decentralized open environments that users can freely interact with and contribute to.&quot;</p>\n</blockquote>\n<p>The precise definition of Autonomous Worlds (AWs) remains somewhat elusive, as it is more of an abstract concept that has yet to be fully crystallized. Lattice first <a href=\"https://0xparc.org/blog/autonomous-worlds\">introduced</a> the terminology in 2022, but the notion of open worlds operating on the blockchain has been around for a while. The abstraction introduced by MUD served as a catalyst for the market to recognize the potential of these worlds.</p>\n<p>Autonomous Worlds share notable similarities with blockchains in their fundamental nature. Once established, they persist, maintaining their state throughout the lifespan of the chain. Players can join or leave, and developers can expand these worlds by deploying features in a permissionless manner, much like how contracts are added to a chain. While there is no universally accepted definition for an Autonomous World, we believe that a game must possess at least the following two essential features to be considered as such:</p>\n<ol>\n<li>\n<p>Decentralized data availability layer: While the state execution may reside on a centralized layer, it is crucial that the state can be reconstructed if the execution layer ceases to exist. Rollups offer a solution, providing increased capacity execution layers while ensuring data is permanently settled on Ethereum. This guarantees the world&#x27;s perpetual persistence.</p>\n</li>\n<li>\n<p>Permissionless entry point for expanding the world: The World contract must be capable of accepting new systems and components without requiring permission. While this doesn&#x27;t imply that every component and system will be utilized, they must adhere to this pattern, ensuring open and unrestricted access for potential enhancements.</p>\n</li>\n</ol>\n<p>We&#x27;re firm believers in the potential for Autonomous Worlds to catalyze the exploration of novel forms in the medium provided by zk proofs and blockchain technology. This is not only about games, but also about new forms of artwork, coordination, fun, emerging from tinkering and radical innovation, eventually questioning the very notion of &quot;play&quot; in this brave new decentralized and trustless world.</p>\n","isPage":false,"text":"\n\n&quot;Autonomous worlds represent persistent, permissionless, and decentralized open environments that users can freely interact with and contribute to.&quot;\n\nThe precise definition of Autonomous Worlds (AWs) remains somewhat elusive, as it is more of an abstract concept that has yet to be fully crystallized. Lattice first introduced the terminology in 2022, but the notion of open worlds operating on the blockchain has been around for a while. The abstraction introduced by MUD served as a catalyst for the market to recognize the potential of these worlds.\nAutonomous Worlds share notable similarities with blockchains in their fundamental nature. Once established, they persist, maintaining their state throughout the lifespan of the chain. Players can join or leave, and developers can expand these worlds by deploying features in a permissionless manner, much like how contracts are added to a chain. While there is no universally accepted definition for an Autonomous World, we believe that a game must possess at least the following two essential features to be considered as such:\n\n\nDecentralized data availability layer: While the state execution may reside on a centralized layer, it is crucial that the state can be reconstructed if the execution layer ceases to exist. Rollups offer a solution, providing increased capacity execution layers while ensuring data is permanently settled on Ethereum. This guarantees the world&#x27;s perpetual persistence.\n\n\nPermissionless entry point for expanding the world: The World contract must be capable of accepting new systems and components without requiring permission. While this doesn&#x27;t imply that every component and system will be utilized, they must adhere to this pattern, ensuring open and unrestricted access for potential enhancements.\n\n\nWe&#x27;re firm believers in the potential for Autonomous Worlds to catalyze the exploration of novel forms in the medium provided by zk proofs and blockchain technology. This is not only about games, but also about new forms of artwork, coordination, fun, emerging from tinkering and radical innovation, eventually questioning the very notion of &quot;play&quot; in this brave new decentralized and trustless world.\n","title":"Autonomous Worlds","titles":[null]},"104":{"href":"/theory/autonomous-worlds#homework","html":"\n<ul>\n<li><a href=\"https://www.wired.com/story/autonomous-worlds-aim-to-free-online-games-from-corporate-control/\">Wired - Autonomous Worlds Primer</a></li>\n<li><a href=\"https://0xparc.org/blog/autonomous-worlds\">0xParc - Autonomous Worlds (Part 1)</a></li>\n<li><a href=\"https://gubsheep.substack.com/p/the-strongest-crypto-gaming-thesis\">Gubsheep - The Strongest Crypto Gaming Thesis</a></li>\n<li><a href=\"https://lattice.xyz/blog/mud-an-engine-for-autonomous-worlds\">Lattice - MUD: An engine for Autonomous Worlds</a></li>\n<li><a href=\"https://www.guiltygyoza.xyz/2022/07/game2\">Guiltygyoza - Game 2.0</a></li>\n<li><a href=\"https://www.guiltygyoza.xyz/2023/05/composable-engineering\">Guiltygyoza - Composable Engineering</a></li>\n<li><a href=\"https://www.thejaymo.net/2022/05/06/wind-up-worlds/\">Jay Springett - Wind-up Worlds</a></li>\n<li><a href=\"https://www.are.na/sylve-chevet/on-chain-realities-and-autonomous-worlds\">Are.na collection on Autonomous Worlds</a></li>\n<li><a href=\"https://www.dojoengine.org/en/articles/provable-games/\">Tarrence - Provable Games</a></li>\n<li><a href=\"https://loaf.coffee/posts/provable-goblins\">Loaf - Provable Goblins</a></li>\n</ul>","isPage":false,"text":"\n\nWired - Autonomous Worlds Primer\n0xParc - Autonomous Worlds (Part 1)\nGubsheep - The Strongest Crypto Gaming Thesis\nLattice - MUD: An engine for Autonomous Worlds\nGuiltygyoza - Game 2.0\nGuiltygyoza - Composable Engineering\nJay Springett - Wind-up Worlds\nAre.na collection on Autonomous Worlds\nTarrence - Provable Games\nLoaf - Provable Goblins\n","title":"Homework","titles":[null,"Autonomous Worlds"]},"105":{"href":"/theory/cairo#cairo","html":"</header>\n<p>Cairo is an open-source, Turing-complete smart contract language developed by Starkware, designed to power the Validity Rollup Starknet. The language enables highly expressive and verifiable computation, making it well-suited for building scalable and secure applications, including decentralized finance (DeFi) projects.</p>\n<p>Dojo builds on Cairo to create a robust framework for developing Autonomous Worlds (AWs). By leveraging the capabilities of Cairo, Dojo aims to streamline the development process, improve maintainability, and enhance the performance of AWs.</p>\n<p>A key feature of the Dojo framework is its use of <a href=\"/cairo/commands.md\">commands</a>. Commands are a design pattern that helps to reduce boilerplate code, resulting in cleaner and more maintainable applications. They achieve this by encapsulating specific actions or operations within self-contained, reusable units.</p>\n<p>Developers can write commands freely within Systems, and the Cairo compiler takes care of inlining the appropriate functions.</p>\n","isPage":true,"text":"\nCairo is an open-source, Turing-complete smart contract language developed by Starkware, designed to power the Validity Rollup Starknet. The language enables highly expressive and verifiable computation, making it well-suited for building scalable and secure applications, including decentralized finance (DeFi) projects.\nDojo builds on Cairo to create a robust framework for developing Autonomous Worlds (AWs). By leveraging the capabilities of Cairo, Dojo aims to streamline the development process, improve maintainability, and enhance the performance of AWs.\nA key feature of the Dojo framework is its use of commands. Commands are a design pattern that helps to reduce boilerplate code, resulting in cleaner and more maintainable applications. They achieve this by encapsulating specific actions or operations within self-contained, reusable units.\nDevelopers can write commands freely within Systems, and the Cairo compiler takes care of inlining the appropriate functions.\n","title":"Cairo","titles":[]},"106":{"href":"/theory/cairo#essential-reading","html":"\n<ul>\n<li><a href=\"https://github.com/cairo-book/cairo-book\">Cairo book</a></li>\n<li><a href=\"https://github.com/auditless/awesome-cairo\">Awesome Cairo</a></li>\n<li><a href=\"https://book.starknet.io/\">Starknet Book</a></li>\n</ul>\n","isPage":false,"text":"\n\nCairo book\nAwesome Cairo\nStarknet Book\n\n","title":"Essential Reading","titles":["Cairo",null,null]},"107":{"href":"/theory/cairo#starknet-as-an-l2","html":"\n<p>Starknet is a Validity Rollup Layer 2 (L2) solution designed to scale Ethereum. It operates by offering high transaction throughput and low gas costs while maintaining the same level of security as Ethereum Layer 1 (L1). The strategy it uses is akin to solving a sudoku puzzle: verifying a solution is easier than finding the solution from scratch. Similarly, Starknet replaces heavy and costly L1 computation with cheaper L1 verification through the use of STARK proofs computed off-chain.</p>\n<p>In more technical terms, Starknet is a permissionless Validity-Rollup (also known as a &quot;ZK-Rollup&quot;) that supports general computation and currently runs as an L2 network over Ethereum. The network&#x27;s L1 security is guaranteed by its utilization of the STARK cryptographic proof system, which is considered one of the safest and most scalable.</p>\n","isPage":false,"text":"\nStarknet is a Validity Rollup Layer 2 (L2) solution designed to scale Ethereum. It operates by offering high transaction throughput and low gas costs while maintaining the same level of security as Ethereum Layer 1 (L1). The strategy it uses is akin to solving a sudoku puzzle: verifying a solution is easier than finding the solution from scratch. Similarly, Starknet replaces heavy and costly L1 computation with cheaper L1 verification through the use of STARK proofs computed off-chain.\nIn more technical terms, Starknet is a permissionless Validity-Rollup (also known as a &quot;ZK-Rollup&quot;) that supports general computation and currently runs as an L2 network over Ethereum. The network&#x27;s L1 security is guaranteed by its utilization of the STARK cryptographic proof system, which is considered one of the safest and most scalable.\n","title":"Starknet as an L2","titles":["Cairo",null]},"108":{"href":"/theory/cairo#starknet-as-an-appchain","html":"\n<p>Cairo is an isomorphic, general-purpose language, optimized for Zero-Knowledge (ZK) proofs. It&#x27;s the driving force behind Starknet, Starkex, and appchains. Remarkably, you can also run it in WebAssembly (WASM) to generate proofs on the client-side! Within the dojo toolchain exists <a href=\"/toolchain/katana/overview.md\">Katana</a> which is a gaming specific sequencer, which is perfectly suited to run a Dojo appchain.</p>\n<p>The Dojo team is also working closely with the <a href=\"https://github.com/keep-starknet-strange/madara\">Madara</a> team to enable Starknet appchains to seamlessly run Dojo worlds.</p>","isPage":false,"text":"\nCairo is an isomorphic, general-purpose language, optimized for Zero-Knowledge (ZK) proofs. It&#x27;s the driving force behind Starknet, Starkex, and appchains. Remarkably, you can also run it in WebAssembly (WASM) to generate proofs on the client-side! Within the dojo toolchain exists Katana which is a gaming specific sequencer, which is perfectly suited to run a Dojo appchain.\nThe Dojo team is also working closely with the Madara team to enable Starknet appchains to seamlessly run Dojo worlds.","title":"Starknet as an Appchain","titles":["Cairo",null]},"109":{"href":"/theory/faqs#faqs","html":"</header>\n","isPage":true,"text":"\n","title":"FAQs","titles":[]},"110":{"href":"/theory/faqs#who-owns-dojo","html":"\n<p>Dojo is strictly open-source and uses the Apache 2.0 license. Anyone can use Dojo for free, and anyone can contribute to the project.</p>\n","isPage":false,"text":"\nDojo is strictly open-source and uses the Apache 2.0 license. Anyone can use Dojo for free, and anyone can contribute to the project.\n","title":"Who owns Dojo?","titles":["FAQs",null,null]},"111":{"href":"/theory/faqs#why-dojo","html":"\n<p>Dojo was created to solve problems the founders faced when building onchain games. It standardizes the process of building such games and provides a suite of tools to make it easier.</p>\n","isPage":false,"text":"\nDojo was created to solve problems the founders faced when building onchain games. It standardizes the process of building such games and provides a suite of tools to make it easier.\n","title":"Why Dojo?","titles":["FAQs",null,null]},"112":{"href":"/theory/faqs#what-is-the-dojo-roadmap","html":"\n<p>Dojo is rapidly evolving. You can find open issues on the <a href=\"https://github.com/dojoengine/dojo/issues\">Dojo Github</a> and join the <a href=\"https://discord.gg/vUN4Xq9Qv6\">Discord</a> to get involved. If you have ideas for the project, please open an issue.</p>\n","isPage":false,"text":"\nDojo is rapidly evolving. You can find open issues on the Dojo Github and join the Discord to get involved. If you have ideas for the project, please open an issue.\n","title":"What is the Dojo roadmap?","titles":["FAQs",null,null]},"113":{"href":"/theory/faqs#what-is-an-onchain-game","html":"\n<p>Onchain games are games that exist entirely on a public blockchain network; all states and logic are onchain. Clients (like web browsers) do not exist on the chain but exist purely to interact with and interpret the onchain state.</p>\n","isPage":false,"text":"\nOnchain games are games that exist entirely on a public blockchain network; all states and logic are onchain. Clients (like web browsers) do not exist on the chain but exist purely to interact with and interpret the onchain state.\n","title":"What is an onchain game?","titles":["FAQs",null,null]},"114":{"href":"/theory/faqs#what-is-an-autonomous-world","html":"\n<p>An autonomous world is one that exists entirely onchain. It&#x27;s not controlled by any single entity but is instead governed by the rules set within that world. Dive deeper into the topic here: <a href=\"/theory/autonomous-worlds.md\">Autonomous Worlds</a>.</p>\n","isPage":false,"text":"\nAn autonomous world is one that exists entirely onchain. It&#x27;s not controlled by any single entity but is instead governed by the rules set within that world. Dive deeper into the topic here: Autonomous Worlds.\n","title":"What is an autonomous world?","titles":["FAQs",null,null]},"115":{"href":"/theory/faqs#what-is-cairo","html":"\n<p>Cairo is an opensource programming language invented by Starkware. It&#x27;s a Turing-complete language meant for general-purpose computation. It&#x27;s a low-level language designed to compile to the Cairo Virtual Machine. Learn more about it here: <a href=\"/theory/cairo.md\">Cairo</a>.</p>\n","isPage":false,"text":"\nCairo is an opensource programming language invented by Starkware. It&#x27;s a Turing-complete language meant for general-purpose computation. It&#x27;s a low-level language designed to compile to the Cairo Virtual Machine. Learn more about it here: Cairo.\n","title":"What is Cairo?","titles":["FAQs",null,null]},"116":{"href":"/theory/faqs#what-is-a-provable-game","html":"\n<p>Thanks to the magic of zero-knowledge proofs, we can ensure a game is fair by verifying a zk proof created off-chain. But what does that entail? Consider a game of chess. We aim for an experience where players trust each other&#x27;s moves. In a straightforward approach — and given the simple rules of chess — if this were in a blockchain environment, every move would be a transaction on the blockchain. This is costly. We just want to know the winner, not every move.</p>\n<p>With zk proofs and client communications, players can establish a state channel, sharing moves off-chain and ensuring their validity. At the end, a zk proof can be submitted to the blockchain to confirm the game&#x27;s fairness. This constitutes a provable game.</p>\n","isPage":false,"text":"\nThanks to the magic of zero-knowledge proofs, we can ensure a game is fair by verifying a zk proof created off-chain. But what does that entail? Consider a game of chess. We aim for an experience where players trust each other&#x27;s moves. In a straightforward approach — and given the simple rules of chess — if this were in a blockchain environment, every move would be a transaction on the blockchain. This is costly. We just want to know the winner, not every move.\nWith zk proofs and client communications, players can establish a state channel, sharing moves off-chain and ensuring their validity. At the end, a zk proof can be submitted to the blockchain to confirm the game&#x27;s fairness. This constitutes a provable game.\n","title":"What is a provable game?","titles":["FAQs",null,null]},"117":{"href":"/theory/faqs#can-dojo-implement-client-side-proofs","html":"\n<p>The ability to execute Dojo programs in the browser is entirely plausible and is on our roadmap. Expect q1/q2 in 2024, or if you are a specalist in this jump into the code and help out!</p>\n","isPage":false,"text":"\nThe ability to execute Dojo programs in the browser is entirely plausible and is on our roadmap. Expect q1/q2 in 2024, or if you are a specalist in this jump into the code and help out!\n","title":"Can dojo implement client side proofs?","titles":["FAQs",null,null]},"118":{"href":"/theory/faqs#can-i-deploy-dojo-on-starknet","html":"\n<p>Yes! Dojo can run on any StarknetVM including the public blockchains. Within the dojo toolchain exists <a href=\"/toolchain/katana/overview.md\">Katana</a> which is a gaming specific sequencer, which is perfectly suited to Dojo games.</p>","isPage":false,"text":"\nYes! Dojo can run on any StarknetVM including the public blockchains. Within the dojo toolchain exists Katana which is a gaming specific sequencer, which is perfectly suited to Dojo games.","title":"Can I deploy dojo on Starknet?","titles":["FAQs",null,null]},"119":{"href":"/toolchain/dojoup#dojoup","html":"</header>\n<p>Update or revert to a specific Dojo branch with ease.</p>\n","isPage":true,"text":"\nUpdate or revert to a specific Dojo branch with ease.\n","title":"dojoup","titles":[]},"120":{"href":"/toolchain/dojoup#installing","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> -L</span><span style=\"color:#96D0FF\"> https://install.dojoengine.org </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> bash</span></span></code></pre></figure>\n","isPage":false,"text":"\ncurl -L https://install.dojoengine.org | bash\n","title":"Installing","titles":["dojoup"]},"121":{"href":"/toolchain/dojoup#usage","html":"\n<p>To install latest <strong>stable</strong> version:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span></span></code></pre></figure>\n<blockquote>\n<p>Note: You may have to install <code>jq</code> to use <code>dojoup</code>. You can do so with the following commands:</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Debian</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sudo</span><span style=\"color:#96D0FF\"> apt-get install jq</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># Mac</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">brew</span><span style=\"color:#96D0FF\"> install jq</span></span></code></pre></figure>\n<p>To install a specific <strong>version</strong> (in this case the <code>nightly</code> version):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --version</span><span style=\"color:#96D0FF\"> nightly</span></span></code></pre></figure>\n<p>To install a specific <strong>branch</strong> (in this case the <code>release/0.1.0</code> branch&#x27;s latest commit):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --branch</span><span style=\"color:#96D0FF\"> release/0.1.0</span></span></code></pre></figure>\n<p>To install a <strong>fork&#x27;s main branch</strong> (in this case <code>tarrencev/dojo</code>&#x27;s main branch):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --repo</span><span style=\"color:#96D0FF\"> tarrencev/dojo</span></span></code></pre></figure>\n<p>To install a <strong>specific branch in a fork</strong> (in this case the <code>patch-10</code> branch&#x27;s latest commit in <code>tarrencev/dojo</code>):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --repo</span><span style=\"color:#96D0FF\"> tarrencev/dojo --branch patch-10</span></span></code></pre></figure>\n<p>To install from a <strong>specific Pull Request</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --pr</span><span style=\"color:#6CB6FF\"> 1071</span></span></code></pre></figure>\n<p>To install from a <strong>specific commit</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> -c</span><span style=\"color:#6CB6FF\"> 94</span><span style=\"color:#96D0FF\">bfdb2</span></span></code></pre></figure>\n<p>To install a local directory or repository (e.g. one located at <code>~/git/dojo</code>, assuming you&#x27;re in the home directory)</p>\n","isPage":false,"text":"\nTo install latest stable version:\ndojoup\n\nNote: You may have to install jq to use dojoup. You can do so with the following commands:\n\n# Debian\nsudo apt-get install jq\n \n# Mac\nbrew install jq\nTo install a specific version (in this case the nightly version):\ndojoup --version nightly\nTo install a specific branch (in this case the release/0.1.0 branch&#x27;s latest commit):\ndojoup --branch release/0.1.0\nTo install a fork&#x27;s main branch (in this case tarrencev/dojo&#x27;s main branch):\ndojoup --repo tarrencev/dojo\nTo install a specific branch in a fork (in this case the patch-10 branch&#x27;s latest commit in tarrencev/dojo):\ndojoup --repo tarrencev/dojo --branch patch-10\nTo install from a specific Pull Request:\ndojoup --pr 1071\nTo install from a specific commit:\ndojoup -c 94bfdb2\nTo install a local directory or repository (e.g. one located at ~/git/dojo, assuming you&#x27;re in the home directory)\n","title":"Usage","titles":["dojoup"]},"122":{"href":"/toolchain/dojoup#note---branch---repo-and---version-flags-are-ignored-during-local-installations","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --path</span><span style=\"color:#96D0FF\"> ./git/dojo</span></span></code></pre></figure>\n<hr/>\n<p><strong>Tip</strong>: All flags have a single character shorthand equivalent! You can use <code>-v</code> instead of <code>--version</code>, etc.</p>\n<hr/>\n","isPage":false,"text":"\ndojoup --path ./git/dojo\n\nTip: All flags have a single character shorthand equivalent! You can use -v instead of --version, etc.\n\n","title":"Note: --branch, --repo, and --version flags are ignored during local installations.","titles":["dojoup","Usage",null,null]},"123":{"href":"/toolchain/dojoup#precompiled-binaries","html":"\n<p>Precompiled binaries are available from the <a href=\"https://github.com/dojoengine/dojo/releases\">GitHub releases page</a>.\nThese are better managed by using <a href=\"#using-dojoup\">Dojoup</a>.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>If you&#x27;re on Windows, you will need to install and use <a href=\"https://gitforwindows.org/\">Git BASH</a> or <a href=\"https://learn.microsoft.com/en-us/windows/wsl/install\">WSL</a>,\nas your terminal, since Dojoup currently does not support Powershell or Cmd.</p>\n</blockquote>","isPage":false,"text":"\nPrecompiled binaries are available from the GitHub releases page.\nThese are better managed by using Dojoup.\n\nℹ️ Note\nIf you&#x27;re on Windows, you will need to install and use Git BASH or WSL,\nas your terminal, since Dojoup currently does not support Powershell or Cmd.\n","title":"Precompiled binaries","titles":["dojoup","Usage"]},"124":{"href":"/cairo/migration/0#migration-guide-to-030","html":"\n<p>0.3.0 introduced some breaking changes to Systems and Models which requires reworking of your worlds.</p>\n<ul>\n<li><a href=\"#components-to-models\">Components</a></li>\n<li><a href=\"#systems-update\">Systems</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#npm\">Npm</a></li>\n</ul>\n","isPage":true,"text":"\n0.3.0 introduced some breaking changes to Systems and Models which requires reworking of your worlds.\n\nComponents\nSystems\nEvents\nNpm\n\n","title":"Migration Guide to 0.3.0","titles":[null]},"125":{"href":"/cairo/migration/0#components-to-models","html":"\n<p>In version 0.3.0, &quot;components&quot; have been renamed to &quot;models&quot;. This has been done due to Cairo introducing the concept of Components natively.</p>\n<p>You must:</p>\n<ul>\n<li>Replace <code>#[component]</code> with <code>#[model]</code>.</li>\n<li>Update <code>#[derive(Component)]</code> to <code>#[derive(Model)]</code> throughout your code.</li>\n</ul>\n<p><strong>Note</strong>: Ensure all related files and imports are updated accordingly.</p>\n","isPage":false,"text":"\nIn version 0.3.0, &quot;components&quot; have been renamed to &quot;models&quot;. This has been done due to Cairo introducing the concept of Components natively.\nYou must:\n\nReplace #[component] with #[model].\nUpdate #[derive(Component)] to #[derive(Model)] throughout your code.\n\nNote: Ensure all related files and imports are updated accordingly.\n","title":"Components to Models","titles":[null,"Migration Guide to 0.3.0"]},"126":{"href":"/cairo/migration/0#changes-in-model-implementation","html":"\n<p>The trait <code>SerdeLen</code> is no longer implemented for models. If you relied on this previously, you should now use <code>SchemaIntrospection</code>.</p>\n","isPage":false,"text":"\nThe trait SerdeLen is no longer implemented for models. If you relied on this previously, you should now use SchemaIntrospection.\n","title":"Changes in Model Implementation","titles":[null,"Migration Guide to 0.3.0"]},"127":{"href":"/cairo/migration/0#schema-introduction","html":"\n<p>For models containing complex types, it&#x27;s crucial to implement the <code>SchemaIntrospection</code> trait.</p>\n<p>Consider the model below:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Card</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    token_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> u256,</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// The card&#x27;s designated role.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    role</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Roles</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>For complex types, like <code>Roles</code> in the above example, you need to implement <code>SchemaIntrospection</code>. Here&#x27;s how:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">impl</span><span style=\"color:#F69D50\"> RolesSchemaIntrospectionImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">SchemaIntrospection</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">Roles</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[inline(always)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> size</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> usize</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        1</span><span style=\"color:#768390\"> // Represents the byte size of the enum.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[inline(always)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> layout</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#ADBAC7\"> layout</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Array</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">&gt;) {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        layout</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">append</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">8</span><span style=\"color:#ADBAC7\">);</span><span style=\"color:#768390\"> // Specifies the layout byte size;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[inline(always)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> ty</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> Ty</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Enum</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            Enum</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                name</span><span style=\"color:#F47067\">:</span><span style=\"color:#96D0FF\"> &#x27;Roles&#x27;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                attrs</span><span style=\"color:#F47067\">:</span><span style=\"color:#DCBDFB\"> array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                children</span><span style=\"color:#F47067\">:</span><span style=\"color:#DCBDFB\"> array!</span><span style=\"color:#ADBAC7\">[</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Goalkeeper&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Defender&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Midfielder&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    (</span><span style=\"color:#96D0FF\">&#x27;Attacker&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">serialize_member_type</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">@</span><span style=\"color:#F69D50\">Ty</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">Tuple</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()))),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                ]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                .</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p><strong>Key Takeaways from custom types</strong>:</p>\n<ul>\n<li><strong>size</strong>: Defines the byte size of the type.</li>\n<li><strong>layout</strong>: Outlines the byte structure/layout for the type. Validate and adjust as necessary.</li>\n<li><strong>ty</strong>: Details the specific type, attributes, and subcomponents. For enums, like <code>Roles</code>, you need to specify each member and its type.</li>\n</ul>\n","isPage":false,"text":"\nFor models containing complex types, it&#x27;s crucial to implement the SchemaIntrospection trait.\nConsider the model below:\nstruct Card {\n \n    #[key]\n    token_id: u256,\n    /// The card&#x27;s designated role.\n    role: Roles,\n}\nFor complex types, like Roles in the above example, you need to implement SchemaIntrospection. Here&#x27;s how:\nimpl RolesSchemaIntrospectionImpl of SchemaIntrospection&lt;Roles&gt; {\n    #[inline(always)]\n    fn size() -&gt; usize {\n        1 // Represents the byte size of the enum.\n    }\n \n    #[inline(always)]\n    fn layout(ref layout: Array&lt;u8&gt;) {\n        layout.append(8); // Specifies the layout byte size;\n    }\n \n    #[inline(always)]\n    fn ty() -&gt; Ty {\n        Ty::Enum(\n            Enum {\n                name: &#x27;Roles&#x27;,\n                attrs: array![].span(),\n                children: array![\n                    (&#x27;Goalkeeper&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Defender&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Midfielder&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Attacker&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                ]\n                .span()\n            }\n        )\n    }\n}\nKey Takeaways from custom types:\n\nsize: Defines the byte size of the type.\nlayout: Outlines the byte structure/layout for the type. Validate and adjust as necessary.\nty: Details the specific type, attributes, and subcomponents. For enums, like Roles, you need to specify each member and its type.\n\n","title":"Schema Introduction","titles":[null,"Migration Guide to 0.3.0"]},"128":{"href":"/cairo/migration/0#systems-update","html":"\n<p>Systems in 0.3.0 are very similar now to Cairo Contracts. You can write your systems just like regular contracts, and each dojo contract can contain mulitple systems.</p>\n<p>Important high level changes:</p>\n<ul>\n<li>Systems are now starknet contracts</li>\n<li>Define <a href=\"#interface-creation\">Interfaces</a> for each system contract</li>\n<li>New optional <code>#[dojo::contract]</code> decorator defining systems</li>\n<li>Multiple systems per dojo contract, rather than singular</li>\n<li><code>execute</code> is no longer required system selector name</li>\n</ul>\n","isPage":false,"text":"\nSystems in 0.3.0 are very similar now to Cairo Contracts. You can write your systems just like regular contracts, and each dojo contract can contain mulitple systems.\nImportant high level changes:\n\nSystems are now starknet contracts\nDefine Interfaces for each system contract\nNew optional #[dojo::contract] decorator defining systems\nMultiple systems per dojo contract, rather than singular\nexecute is no longer required system selector name\n\n","title":"Systems Update","titles":[null,"Migration Guide to 0.3.0"]},"129":{"href":"/cairo/migration/0#interface-creation","html":"\n<p>System management has been revamped. Start by defining an interface for each system, which specifies its implementation:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">interface]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> ICreateCard</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">TContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> create_card</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">TContractState</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        world</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> IWorldDispatcher</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        token_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> u256,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        dribble</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        defense</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        cost</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        role</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Roles</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        is_captain</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> bool</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Ensure the trait is typed with <code>TContractState</code>.</p>\n<p><strong>Note</strong>: Earlier versions required functions within the system to be named <code>execute</code>. This is no longer the case.</p>\n","isPage":false,"text":"\nSystem management has been revamped. Start by defining an interface for each system, which specifies its implementation:\n#[starknet::interface]\ntrait ICreateCard&lt;TContractState&gt; {\n    fn create_card(\n        self: @TContractState,\n        world: IWorldDispatcher,\n        token_id: u256,\n        dribble: u8,\n        defense: u8,\n        cost: u8,\n        role: Roles,\n        is_captain: bool\n    );\n}\nEnsure the trait is typed with TContractState.\nNote: Earlier versions required functions within the system to be named execute. This is no longer the case.\n","title":"Interface Creation","titles":[null,"Migration Guide to 0.3.0","Systems Update"]},"130":{"href":"/cairo/migration/0#interface-implementation","html":"\n<p>To implement the interface:</p>\n<ol>\n<li>Add <code>#[abi(embed_v0)]</code> before each method.</li>\n<li>Ensure to reference the created interface in the module with <code>use super::ICreateCard;</code>.</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">impl</span><span style=\"color:#F69D50\"> CreateCardImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">ICreateCard</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> create_card</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        world</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> IWorldDispatcher</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        token_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> u256,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        dribble</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        defense</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        cost</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        role</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Roles</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        is_captain</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> bool</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    ) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // your logic here</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>This then allows the <code>create_card</code> to be called just like a regular starknet function.</p>\n","isPage":false,"text":"\nTo implement the interface:\n\nAdd #[abi(embed_v0)] before each method.\nEnsure to reference the created interface in the module with use super::ICreateCard;.\n\n#[abi(embed_v0)]\nimpl CreateCardImpl of ICreateCard&lt;ContractState&gt; {\n    fn create_card(\n        self: @ContractState,\n        world: IWorldDispatcher,\n        token_id: u256,\n        dribble: u8,\n        defense: u8,\n        cost: u8,\n        role: Roles,\n        is_captain: bool\n    ) {\n        // your logic here\n    }\n}\nThis then allows the create_card to be called just like a regular starknet function.\n","title":"Interface Implementation","titles":[null,"Migration Guide to 0.3.0","Systems Update"]},"131":{"href":"/cairo/migration/0#dojocontract-decorator","html":"\n<p>0.3.0 introduces a new optional decorator <code>#[dojo::contract]</code> which indicates to the compiler to inject imports and the world dispatcher. This allows for minimal boilerplate.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> move</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">....</span><span style=\"color:#ADBAC7\">code </span><span style=\"color:#6CB6FF\">TODO</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\n0.3.0 introduces a new optional decorator #[dojo::contract] which indicates to the compiler to inject imports and the world dispatcher. This allows for minimal boilerplate.\n#[dojo::contract]\nmod move {\n....code TODO\n}\n","title":"#[dojo::contract] decorator","titles":[null,"Migration Guide to 0.3.0","Systems Update"]},"132":{"href":"/cairo/migration/0#events","html":"\n<p>Events should now reside within the models. Here&#x27;s an example of how to migrate your events:</p>\n<p><strong>Previous Format</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> DeckCreated</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    token_list</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;u256&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p><strong>New Format</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[event]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">enum</span><span style=\"color:#F69D50\"> Event</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    DeckCreated</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> DeckCreated</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> DeckCreated</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    token_list</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Span</span><span style=\"color:#ADBAC7\">&lt;u256&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nEvents should now reside within the models. Here&#x27;s an example of how to migrate your events:\nPrevious Format:\n#[derive(Drop, starknet::Event, Copy)]\nstruct DeckCreated {\n    player: ContractAddress,\n    token_list: Span&lt;u256&gt;,\n}\nNew Format:\n#[event]\n#[derive(Drop, starknet::Event)]\nenum Event {\n    DeckCreated: DeckCreated\n}\n \n#[derive(Drop, starknet::Event)]\nstruct DeckCreated {\n    player: ContractAddress,\n    token_list: Span&lt;u256&gt;,\n}\n","title":"Events","titles":[null,"Migration Guide to 0.3.0"]},"133":{"href":"/cairo/migration/0#testing-changes","html":"\n","isPage":false,"text":"\n","title":"Testing Changes","titles":[null,"Migration Guide to 0.3.0"]},"134":{"href":"/cairo/migration/0#setup","html":"\n<p>Testing has seen significant changes with the change to systems as Contracts. Instead of using <code>world.execute</code>, use the dispatcher.</p>\n<ol>\n<li>Import necessary modules and traits:</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">test_utils</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">deploy_contract;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> tsubasa</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">systems</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">ICreateCardDispatcher</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">ICreateCardDispatcherTrait</span><span style=\"color:#ADBAC7\">};</span></span></code></pre></figure>\n<ol start=\"2\">\n<li>Deploy the contract and instantiate the dispatcher:</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> contract_create_card </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> deploy_contract</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    create_card_system</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#DCBDFB\">array!</span><span style=\"color:#ADBAC7\">[]</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">span</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> create_card_system </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> ICreateCardDispatcher</span><span style=\"color:#ADBAC7\"> { contract_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> contract_create_card };</span></span></code></pre></figure>\n","isPage":false,"text":"\nTesting has seen significant changes with the change to systems as Contracts. Instead of using world.execute, use the dispatcher.\n\nImport necessary modules and traits:\n\nuse dojo::test_utils::deploy_contract;\nuse tsubasa::systems::{ICreateCardDispatcher, ICreateCardDispatcherTrait};\n\nDeploy the contract and instantiate the dispatcher:\n\nlet contract_create_card = deploy_contract(\n    create_card_system::TEST_CLASS_HASH, array![].span()\n);\nlet create_card_system = ICreateCardDispatcher { contract_address: contract_create_card };\n","title":"Setup","titles":[null,"Migration Guide to 0.3.0","Testing Changes"]},"135":{"href":"/cairo/migration/0#function-testing","html":"\n<p>With the contract deployed and the dispatcher instantiated, proceed to test your functions:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// ... (previous setup code)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">let</span><span style=\"color:#ADBAC7\"> result </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> create_card_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">create_card</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    // ... provide necessary parameters here</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Assert or validate the &#x27;result&#x27; as per your test conditions</span></span></code></pre></figure>","isPage":false,"text":"\nWith the contract deployed and the dispatcher instantiated, proceed to test your functions:\n// ... (previous setup code)\n \nlet result = create_card_system.create_card(\n    // ... provide necessary parameters here\n);\n \n// Assert or validate the &#x27;result&#x27; as per your test conditions","title":"Function Testing","titles":[null,"Migration Guide to 0.3.0","Testing Changes"]},"136":{"href":"/cairo/migration/0#migration-guide-to-040","html":"\n<p>[todo]</p>","isPage":true,"text":"\n[todo]","title":"Migration Guide to 0.4.0","titles":[null]},"137":{"href":"/client/sdk/c#dojo-c","html":"</header>\n<p><a href=\"https://github.com/dojoengine/dojo.c\">c bindings</a></p>","isPage":true,"text":"\nc bindings","title":"Dojo c","titles":[]},"138":{"href":"/toolchain/katana/cli-reference#cli-references","html":"</header>\n","isPage":true,"text":"\n","title":"CLI References","titles":[]},"139":{"href":"/toolchain/katana/cli-reference#name","html":"\n<p><code>katana</code> - Create a local Starknet sequencer for deploying and developing Starknet smart contracts.</p>\n","isPage":false,"text":"\nkatana - Create a local Starknet sequencer for deploying and developing Starknet smart contracts.\n","title":"NAME","titles":["CLI References"]},"140":{"href":"/toolchain/katana/cli-reference#usage","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#ADBAC7\"> [OPTIONS] [COMMAND]</span></span></code></pre></figure>\n","isPage":false,"text":"\nkatana [OPTIONS] [COMMAND]\n","title":"USAGE","titles":["CLI References"]},"141":{"href":"/toolchain/katana/cli-reference#options","html":"\n","isPage":false,"text":"\n","title":"OPTIONS","titles":["CLI References"]},"142":{"href":"/toolchain/katana/cli-reference#general-options","html":"\n<p><code>--silent</code><br/>\n     Don&#x27;t print anything on startup.</p>\n<p><code>--no-mining</code><br/>\n     Disable auto and interval mining, and mine on demand instead.</p>\n<p><code>-b, --block-time &lt;MILLISECONDS&gt;</code><br/>\n     Block time in milliseconds for interval mining.</p>\n<p><code>--db-dir &lt;PATH&gt;</code><br/>\n     Directory path of the database to initialize from. The path must either be an empty directory or a directory which already contains a previously initialized Katana database.</p>\n<p><code>--json-log</code><br/>\n     Output logs in JSON format.</p>\n<p><code>--rpc-url &lt;URL&gt;</code><br/>\n     The Starknet RPC provider to fork the network from.</p>\n<p><code>--fork-block-number &lt;BLOCK_NUMBER&gt;</code><br/>\n     Fork the network at a specific block.</p>\n<p><code>--messaging &lt;PATH&gt;</code><br/>\n     Configure the messaging service to allow Katana to listen/send messages on a settlement chain that can be either Ethereum or another Starknet sequencer (experimental).</p>\n<p><code>-h, --help</code><br/>\n     Print help (see a summary with &#x27;-h&#x27;).</p>\n<p><code>-V, --version</code><br/>\n     Print version information.</p>\n","isPage":false,"text":"\n--silent\n     Don&#x27;t print anything on startup.\n--no-mining\n     Disable auto and interval mining, and mine on demand instead.\n-b, --block-time &lt;MILLISECONDS&gt;\n     Block time in milliseconds for interval mining.\n--db-dir &lt;PATH&gt;\n     Directory path of the database to initialize from. The path must either be an empty directory or a directory which already contains a previously initialized Katana database.\n--json-log\n     Output logs in JSON format.\n--rpc-url &lt;URL&gt;\n     The Starknet RPC provider to fork the network from.\n--fork-block-number &lt;BLOCK_NUMBER&gt;\n     Fork the network at a specific block.\n--messaging &lt;PATH&gt;\n     Configure the messaging service to allow Katana to listen/send messages on a settlement chain that can be either Ethereum or another Starknet sequencer (experimental).\n-h, --help\n     Print help (see a summary with &#x27;-h&#x27;).\n-V, --version\n     Print version information.\n","title":"General Options","titles":["CLI References","OPTIONS"]},"143":{"href":"/toolchain/katana/cli-reference#server-options","html":"\n<p><code>-p, --port &lt;PORT&gt;</code><br/>\n     Port number to listen on. [default: 5050]</p>\n<p><code>--host &lt;HOST&gt;</code><br/>\n     The IP address the server will listen on.</p>\n<p><code>--max-connections &lt;MAX_CONNECTIONS&gt;</code><br/>\n     Maximum number of concurrent connections allowed. [default: 100]</p>\n","isPage":false,"text":"\n-p, --port &lt;PORT&gt;\n     Port number to listen on. [default: 5050]\n--host &lt;HOST&gt;\n     The IP address the server will listen on.\n--max-connections &lt;MAX_CONNECTIONS&gt;\n     Maximum number of concurrent connections allowed. [default: 100]\n","title":"Server Options","titles":["CLI References","OPTIONS"]},"144":{"href":"/toolchain/katana/cli-reference#starknet-options","html":"\n<p><code>--seed &lt;SEED&gt;</code><br/>\n     Specify the seed for randomness of accounts to be predeployed.</p>\n<p><code>--accounts &lt;NUM&gt;</code><br/>\n     Number of pre-funded accounts to generate. [default: 10]</p>\n<p><code>--disable-fee</code><br/>\n     Disable charging fee for transactions.</p>\n<p><code>--disable-validate</code><br/>\n     Disable validation when executing transactions. Allowing transaction to be executed even with invalid signature.</p>\n","isPage":false,"text":"\n--seed &lt;SEED&gt;\n     Specify the seed for randomness of accounts to be predeployed.\n--accounts &lt;NUM&gt;\n     Number of pre-funded accounts to generate. [default: 10]\n--disable-fee\n     Disable charging fee for transactions.\n--disable-validate\n     Disable validation when executing transactions. Allowing transaction to be executed even with invalid signature.\n","title":"Starknet Options","titles":["CLI References","OPTIONS"]},"145":{"href":"/toolchain/katana/cli-reference#environment-options","html":"\n<p><code>--chain-id &lt;CHAIN_ID&gt;</code><br/>\n     The chain ID. [default: KATANA]</p>\n<p><code>--gas-price &lt;GAS_PRICE&gt;</code><br/>\n     The gas price.</p>\n<p><code>--validate-max-steps &lt;VALIDATE_MAX_STEPS&gt;</code><br/>\n     The maximum number of steps available for the account validation logic.</p>\n<p><code>--invoke-max-steps &lt;INVOKE_MAX_STEPS&gt;</code><br/>\n     The maximum number of steps available for the account execution logic.</p>\n<p><code>--genesis &lt;GENESIS&gt;</code><br/>\n     The genesis configuration file.</p>\n","isPage":false,"text":"\n--chain-id &lt;CHAIN_ID&gt;\n     The chain ID. [default: KATANA]\n--gas-price &lt;GAS_PRICE&gt;\n     The gas price.\n--validate-max-steps &lt;VALIDATE_MAX_STEPS&gt;\n     The maximum number of steps available for the account validation logic.\n--invoke-max-steps &lt;INVOKE_MAX_STEPS&gt;\n     The maximum number of steps available for the account execution logic.\n--genesis &lt;GENESIS&gt;\n     The genesis configuration file.\n","title":"Environment Options","titles":["CLI References","OPTIONS","Starknet Options"]},"146":{"href":"/toolchain/katana/cli-reference#subcommands","html":"\n","isPage":false,"text":"\n","title":"SUBCOMMANDS","titles":["CLI References"]},"147":{"href":"/toolchain/katana/cli-reference#completions","html":"\n<p>Generates a shell completions script for the given supported shells:</p>\n<ul>\n<li>bash</li>\n<li>elvish</li>\n<li>fish</li>\n<li>powershell</li>\n<li>zsh</li>\n</ul>\n","isPage":false,"text":"\nGenerates a shell completions script for the given supported shells:\n\nbash\nelvish\nfish\npowershell\nzsh\n\n","title":"completions","titles":["CLI References","SUBCOMMANDS"]},"148":{"href":"/toolchain/katana/cli-reference#examples","html":"\n<p>Generate shell completions script for <code>bash</code> and appends it to a <code>.bashrc</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#96D0FF\"> completions bash</span><span style=\"color:#F47067\"> &gt;&gt;</span><span style=\"color:#96D0FF\"> ~/.bashrc</span></span></code></pre></figure>","isPage":false,"text":"\nGenerate shell completions script for bash and appends it to a .bashrc file:\nkatana completions bash &gt;&gt; ~/.bashrc","title":"EXAMPLES","titles":["CLI References","SUBCOMMANDS","completions"]},"149":{"href":"/toolchain/katana/execution#execution-engines","html":"</header>\n<p>Execution engine is the transaction-executing component in the Katana sequencer. It is responsible for processing transactions and updating the state of the Starknet contracts. Currently, Katana supports two execution engines: <code>blockifier</code> and <code>starknet_in_rust</code>.</p>\n<p>By default, the <code>blockfier</code> execution engine is used. It is the official implementation of the Starknet execution logic developed by StarkWare. Blockifier is also what Katana is shipped with when it is installed using <code>dojoup</code>. For now, the only way to use the <code>starknet_in_rust</code> engine is to build the Katana binary directly from source.</p>\n","isPage":true,"text":"\nExecution engine is the transaction-executing component in the Katana sequencer. It is responsible for processing transactions and updating the state of the Starknet contracts. Currently, Katana supports two execution engines: blockifier and starknet_in_rust.\nBy default, the blockfier execution engine is used. It is the official implementation of the Starknet execution logic developed by StarkWare. Blockifier is also what Katana is shipped with when it is installed using dojoup. For now, the only way to use the starknet_in_rust engine is to build the Katana binary directly from source.\n","title":"Execution Engines","titles":[]},"150":{"href":"/toolchain/katana/execution#using-starknet_in_rust-engine","html":"\n<p><code>starknet_in_rust</code> is a Starknet execution logic developed and maintained by the awesome team at LambdaClass. It is meant to be an alternative to <code>blockifier</code>.\nAs mentioned earlier, the <code>starknet_in_rust</code> engine is not the default execution engine in Katana. For now, the only way to use it is to build the Katana binary directly from source with the <code>sir</code> feature enabled.</p>\n<p>If you want to install Katana with the <code>starknet_in_rust</code> engine, you can do so by running the following command, without having to clone the Dojo repository locally (provided that you have <code>rustc</code> and <code>cargo</code> already installed):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">cargo install --git https://github.com/dojoengine/dojo katana --no-default-features --features sir --locked --force </span></span></code></pre></figure>\n<aside data-callout=\"note\"><p>💡 <strong>NOTE</strong><br/>\nAlthough <code>starknet_in_rust</code> and <code>blockifier</code> are different implementations of the Starknet logic, under the hood they both are running on the same <code>cairo-vm</code> implementation. As such, there is not much performance to be gained by switching to the <code>starknet_in_rust</code> as is. For that, you would need to use the <code>cairo-native</code> execution engine.</p></aside>\n","isPage":false,"text":"\nstarknet_in_rust is a Starknet execution logic developed and maintained by the awesome team at LambdaClass. It is meant to be an alternative to blockifier.\nAs mentioned earlier, the starknet_in_rust engine is not the default execution engine in Katana. For now, the only way to use it is to build the Katana binary directly from source with the sir feature enabled.\nIf you want to install Katana with the starknet_in_rust engine, you can do so by running the following command, without having to clone the Dojo repository locally (provided that you have rustc and cargo already installed):\ncargo install --git https://github.com/dojoengine/dojo katana --no-default-features --features sir --locked --force \n💡 NOTE\nAlthough starknet_in_rust and blockifier are different implementations of the Starknet logic, under the hood they both are running on the same cairo-vm implementation. As such, there is not much performance to be gained by switching to the starknet_in_rust as is. For that, you would need to use the cairo-native execution engine.\n","title":"Using starknet_in_rust Engine","titles":["Execution Engines"]},"151":{"href":"/toolchain/katana/execution#cairo-native","html":"\n<p>TODO: Add more information about Cairo Native and how to build it</p>\n","isPage":false,"text":"\nTODO: Add more information about Cairo Native and how to build it\n","title":"Cairo Native","titles":["Execution Engines"]},"152":{"href":"/toolchain/katana/execution#benchmarks","html":"\n<p>TODO: Add benchmarks for the different execution engines</p>","isPage":false,"text":"\nTODO: Add benchmarks for the different execution engines","title":"Benchmarks","titles":["Execution Engines"]},"153":{"href":"/toolchain/katana/forking#forking","html":"</header>\n","isPage":true,"text":"\n","title":"Forking","titles":[]},"154":{"href":"/toolchain/katana/forking#state-forking","html":"\n<p>Katana offers a powerful feature called &quot;<em>forking</em>,&quot; which allows you to interact with the state of another Starknet network as if it were a local network. This feature enables developers to test and interact with smart contracts deployed on live networks without the need to deploy their own contracts or set up test accounts on those networks.</p>\n<p>To enable the forking feature, you can configure your Katana node by providing a valid RPC provider using the <code>--rpc-url &lt;URL&gt;</code> flag. By default, Katana will fork the latest block of the specified network. However, if you wish to fork from a specific block, you can use the <code>--fork-block-number &lt;BLOCK_NUMBER&gt;</code> flag to specify the desired block number.</p>\n<p>Once the forking feature is enabled, you can interact with the forked network through Katana as if it were a separate, isolated environment. You can deploy your own smart contracts to the local Katana node and have them interact with the contracts that exist on the forked network. You can then use the accounts predeployed by Katana to simulate interactions with the external network, making it convenient for testing and development purposes.</p>\n<p>The forking feature is particularly useful for smart contract developers who want to perform end-to-end tests against contracts already deployed on mainnet or testnet. It eliminates the need to deploy your own contracts on those networks and avoids the hassle of setting up test accounts and funding them, especially when working with the mainnet. By forking the state of the desired network, you can create a local testing environment that closely mimics the live network, allowing you to test your contracts and interactions with confidence.</p>\n<p>With Katana&#x27;s forking feature, developers can streamline their testing and development process, saving time and resources while ensuring the integrity and compatibility of their smart contracts with existing networks.</p>\n<aside data-callout=\"note\"><p>💡 <strong>NOTE</strong><br/>\nCurrently, the forking feature is limited to only the blockchain states (ie, storage, class definitions, nonces, etc). Support for fetching non-state data (eg., block, transaction, receipt, events) of the forked network through the RPC will be added in the future.</p></aside>\n","isPage":false,"text":"\nKatana offers a powerful feature called &quot;forking,&quot; which allows you to interact with the state of another Starknet network as if it were a local network. This feature enables developers to test and interact with smart contracts deployed on live networks without the need to deploy their own contracts or set up test accounts on those networks.\nTo enable the forking feature, you can configure your Katana node by providing a valid RPC provider using the --rpc-url &lt;URL&gt; flag. By default, Katana will fork the latest block of the specified network. However, if you wish to fork from a specific block, you can use the --fork-block-number &lt;BLOCK_NUMBER&gt; flag to specify the desired block number.\nOnce the forking feature is enabled, you can interact with the forked network through Katana as if it were a separate, isolated environment. You can deploy your own smart contracts to the local Katana node and have them interact with the contracts that exist on the forked network. You can then use the accounts predeployed by Katana to simulate interactions with the external network, making it convenient for testing and development purposes.\nThe forking feature is particularly useful for smart contract developers who want to perform end-to-end tests against contracts already deployed on mainnet or testnet. It eliminates the need to deploy your own contracts on those networks and avoids the hassle of setting up test accounts and funding them, especially when working with the mainnet. By forking the state of the desired network, you can create a local testing environment that closely mimics the live network, allowing you to test your contracts and interactions with confidence.\nWith Katana&#x27;s forking feature, developers can streamline their testing and development process, saving time and resources while ensuring the integrity and compatibility of their smart contracts with existing networks.\n💡 NOTE\nCurrently, the forking feature is limited to only the blockchain states (ie, storage, class definitions, nonces, etc). Support for fetching non-state data (eg., block, transaction, receipt, events) of the forked network through the RPC will be added in the future.\n","title":"State Forking","titles":["Forking"]},"155":{"href":"/toolchain/katana/forking#examples","html":"\n<p>The following command forks the Starknet mainnet at exactly the 1200th block. All the states of the mainnet up until block 1200 will be accessible on your local Katana node. It will then start producing new blocks starting from block 1201.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Forks the network at block 1200</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --rpc-url</span><span style=\"color:#96D0FF\"> https://starknet-mainnet.infura.io/v3/</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">YOUR_API_KE</span><span style=\"color:#ADBAC7\">Y</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> --fork-block-number</span><span style=\"color:#6CB6FF\"> 1200</span></span></code></pre></figure>","isPage":false,"text":"\nThe following command forks the Starknet mainnet at exactly the 1200th block. All the states of the mainnet up until block 1200 will be accessible on your local Katana node. It will then start producing new blocks starting from block 1201.\n# Forks the network at block 1200\nkatana --rpc-url https://starknet-mainnet.infura.io/v3/&lt;YOUR_API_KEY&gt; --fork-block-number 1200","title":"Examples","titles":["Forking","State Forking"]},"156":{"href":"/toolchain/katana/interact#interact-with-katana-on-starknet-deploy-a-cairo-smart-contract-using-katana","html":"</header>\n<p>Welcome to this tutorial where we&#x27;ll guide you through deploying a raw cairo smart using katana as a local devnet. In order to accomplish this, we have to install the following tools.</p>\n","isPage":true,"text":"\nWelcome to this tutorial where we&#x27;ll guide you through deploying a raw cairo smart using katana as a local devnet. In order to accomplish this, we have to install the following tools.\n","title":"Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","titles":[]},"157":{"href":"/toolchain/katana/interact#install-starkli-scarb-and-katana","html":"\n<p>To install <code>Starkli</code>, open a new terminal.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#96D0FF\"> https://get.starkli.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> sh</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">starkliup</span></span></code></pre></figure>\n<p>You can check your installation by running <code>starkli --version</code>, then you will get the starkli version.</p>\n<p>To install <code>Scarb</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> --proto</span><span style=\"color:#96D0FF\"> &#x27;=https&#x27;</span><span style=\"color:#6CB6FF\"> --tlsv1.2</span><span style=\"color:#6CB6FF\"> -sSf</span><span style=\"color:#96D0FF\"> https://docs.swmansion.com/scarb/install.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> sh</span></span></code></pre></figure>\n<p>You can check your installation by running <code>scarb --version</code>, then you will get the starkli version.</p>\n<p>To install <code>Katana</code>, use the <code>dojoup</code> installer from the command line:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> -L</span><span style=\"color:#96D0FF\"> https://install.dojoengine.org </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> bash</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> -v</span><span style=\"color:#6CB6FF\"> 0.6</span><span style=\"color:#96D0FF\">.0-alpha.6</span></span></code></pre></figure>\n<p>You can check your installation by running <code>katana --version</code>, then you will get the katana version.</p>\n","isPage":false,"text":"\nTo install Starkli, open a new terminal.\ncurl https://get.starkli.sh | sh\nstarkliup\nYou can check your installation by running starkli --version, then you will get the starkli version.\nTo install Scarb\ncurl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh\nYou can check your installation by running scarb --version, then you will get the starkli version.\nTo install Katana, use the dojoup installer from the command line:\ncurl -L https://install.dojoengine.org | bash\ndojoup -v 0.6.0-alpha.6\nYou can check your installation by running katana --version, then you will get the katana version.\n","title":"Install Starkli, Scarb and Katana","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana"]},"158":{"href":"/toolchain/katana/interact#basics-of-katana-and-starkli","html":"\n","isPage":false,"text":"\n","title":"Basics of Katana and Starkli","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana"]},"159":{"href":"/toolchain/katana/interact#katana-sequencer","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">katana --disable-fee</span></span></code></pre></figure>\n<p>After starting Katana, a list of accounts will be automatically generated and deployed.</p>\n","isPage":false,"text":"\nkatana --disable-fee\nAfter starting Katana, a list of accounts will be automatically generated and deployed.\n","title":"katana sequencer","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Basics of Katana and Starkli"]},"160":{"href":"/toolchain/katana/interact#starkli-built-in-accounts-and-configuration","html":"\n<p>Starkli supports a list of built-in accounts for katana. These built-in accounts are for local development and no one should be using them for anything serious anyways. For example the address of the <code>Katana-0</code> built-in account is <code>0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03</code>. You can check the full list of account addresses <a href=\"https://github.com/xJonathanLEI/starkli/blob/e9a28f1b6e37bcc9fc53b7b7130e935894856739/src/account.rs#L76\">here</a>.</p>\n<p>We will need this <code>katana-0</code> built-in account later when we define our <code>STARKNET_ACCOUNT</code>. For more details about accounts, please refer to the <a href=\"https://book.starkli.rs/accounts\">accounts</a> section on the starkli book.</p>\n","isPage":false,"text":"\nStarkli supports a list of built-in accounts for katana. These built-in accounts are for local development and no one should be using them for anything serious anyways. For example the address of the Katana-0 built-in account is 0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03. You can check the full list of account addresses here.\nWe will need this katana-0 built-in account later when we define our STARKNET_ACCOUNT. For more details about accounts, please refer to the accounts section on the starkli book.\n","title":"Starkli built-in accounts and configuration","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Basics of Katana and Starkli"]},"161":{"href":"/toolchain/katana/interact#contract-deployment-and-interaction","html":"\n","isPage":false,"text":"\n","title":"Contract Deployment and Interaction","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana"]},"162":{"href":"/toolchain/katana/interact#create-a-simple-storage-project","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">scarb</span><span style=\"color:#96D0FF\"> new simple_storage</span></span></code></pre></figure>\n<p>Add contract dependencies to scarb.toml</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">starknet = </span><span style=\"color:#96D0FF\">&quot;2.5.4&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[[</span><span style=\"color:#F69D50\">target</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">starknet-contract</span><span style=\"color:#ADBAC7\">]]</span></span></code></pre></figure>\n<p>Copy the simple storage contract to lib.cairo</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">interface]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> ISimpleStorage</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">TContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> set</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> TContractState</span><span style=\"color:#ADBAC7\">, x</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u128</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> get</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">TContractState</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> u128</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> SimpleStorage</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">get_caller_address;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[storage]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    struct</span><span style=\"color:#F69D50\"> Storage</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        stored_data</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u128</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> SimpleStorage</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#6CB6FF\">super</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ISimpleStorage</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> set</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractState</span><span style=\"color:#ADBAC7\">, x</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u128</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">stored_data</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(x);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> get</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> u128</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">stored_data</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nscarb new simple_storage\nAdd contract dependencies to scarb.toml\n[dependencies]\nstarknet = &quot;2.5.4&quot;\n \n[[target.starknet-contract]]\nCopy the simple storage contract to lib.cairo\n#[starknet::interface]\ntrait ISimpleStorage&lt;TContractState&gt; {\n    fn set(ref self: TContractState, x: u128);\n    fn get(self: @TContractState) -&gt; u128;\n}\n \n#[starknet::contract]\nmod SimpleStorage {\n    use starknet::get_caller_address;\n    use starknet::ContractAddress;\n \n    #[storage]\n    struct Storage {\n        stored_data: u128\n    }\n \n    #[abi(embed_v0)]\n    impl SimpleStorage of super::ISimpleStorage&lt;ContractState&gt; {\n        fn set(ref self: ContractState, x: u128) {\n            self.stored_data.write(x);\n        }\n        fn get(self: @ContractState) -&gt; u128 {\n            self.stored_data.read()\n        }\n    }\n}\n","title":"Create a Simple Storage project","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Contract Deployment and Interaction"]},"163":{"href":"/toolchain/katana/interact#compile-contract-and-add-environment-variables","html":"\n<p>Compile your contract using scarb</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">scarb</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>Having compiled the smart contract, it&#x27;s time to declare it with Starkli and katana. For clean enviroment management, place the following environment variables in a .env file within the <code>src/</code> directory.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> STARKNET_ACCOUNT</span><span style=\"color:#F47067\">=</span><span style=\"color:#96D0FF\">katana-0        #A pre-funded account on the local development network.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> STARKNET_RPC</span><span style=\"color:#F47067\">=</span><span style=\"color:#96D0FF\">http://0.0.0.0:5050 #To specify the network, targeting the local katana devnet.</span></span></code></pre></figure>\n<p>Then, ensure your project acknowledges the environment variables:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">source</span><span style=\"color:#96D0FF\"> .env</span></span></code></pre></figure>\n<p>These settings significantly streamline <code>Starkli</code> command operations, ensuring a smoother and more efficient workflow.</p>\n","isPage":false,"text":"\nCompile your contract using scarb\nscarb build\nHaving compiled the smart contract, it&#x27;s time to declare it with Starkli and katana. For clean enviroment management, place the following environment variables in a .env file within the src/ directory.\nexport STARKNET_ACCOUNT=katana-0        #A pre-funded account on the local development network.\nexport STARKNET_RPC=http://0.0.0.0:5050 #To specify the network, targeting the local katana devnet.\nThen, ensure your project acknowledges the environment variables:\nsource .env\nThese settings significantly streamline Starkli command operations, ensuring a smoother and more efficient workflow.\n","title":"Compile contract and add environment variables","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Contract Deployment and Interaction"]},"164":{"href":"/toolchain/katana/interact#declare-contract","html":"\n<p>Make sure <code>Katana</code> is already running in separate terminal. Otherwise launch katana</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --disable-fee</span></span></code></pre></figure>\n<p>To declare your contract, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> declare target/dev/simple_storage_SimpleStorage.contract_class.json</span></span></code></pre></figure>\n<p>Upon successful command execution, you&#x27;ll obtain a contract class hash: This unique hash serves as the identifier for your contract class within <code>Starknet</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"has-highlighted\" tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">Sierra compiler version not specified. Attempting to automatically decide version to use...</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Unknown network. Falling back to the default compiler version 2.5.4. Use the --compiler-version flag to choose a different version.</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Declaring Cairo 1 class: 0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Compiling Sierra class to CASM with compiler version 2.5.4...</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">CASM class hash: 0x016052cc70f7462306aa149bdf0e0df3aecb1876a9b05283d60c493c92aa03f4</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Contract declaration transaction: 0x0555ba421c2aef3113f1a2d3866955b762191280092bb73956147f24a2d66aa6</span></span>\n<span class=\"highlighted\" data-line=\"\"><span style=\"color:#6CB6FF\">Class hash declared:</span></span>\n<span class=\"highlighted\" data-line=\"\"><span style=\"color:#6CB6FF\">0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306</span></span></code></pre></figure>\n","isPage":false,"text":"\nMake sure Katana is already running in separate terminal. Otherwise launch katana\nkatana --disable-fee\nTo declare your contract, execute:\nstarkli declare target/dev/simple_storage_SimpleStorage.contract_class.json\nUpon successful command execution, you&#x27;ll obtain a contract class hash: This unique hash serves as the identifier for your contract class within Starknet.\nSierra compiler version not specified. Attempting to automatically decide version to use...\nUnknown network. Falling back to the default compiler version 2.5.4. Use the --compiler-version flag to choose a different version.\nDeclaring Cairo 1 class: 0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306\nCompiling Sierra class to CASM with compiler version 2.5.4...\nCASM class hash: 0x016052cc70f7462306aa149bdf0e0df3aecb1876a9b05283d60c493c92aa03f4\nContract declaration transaction: 0x0555ba421c2aef3113f1a2d3866955b762191280092bb73956147f24a2d66aa6\nClass hash declared:\n0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306\n","title":"Declare contract","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Contract Deployment and Interaction"]},"165":{"href":"/toolchain/katana/interact#deploy-contract","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> deploy </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">class_hash_of_the_contract_to_be_deploye</span><span style=\"color:#ADBAC7\">d</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<p>For this contract we did not specified a <code>constructor</code> function, thus we don&#x27;t need to pass any constructor argument</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> deploy </span><span style=\"color:#6CB6FF\">0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306</span></span></code></pre></figure>\n<p>After running, expect an output similar to:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">Deploying class 0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306 with salt 0x02c93ad00ce6f894729baeafd1fd0456c5a5c540c1caa053ab5392f27ea8f130...</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">The contract will be deployed at address 0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Contract deployment transaction: 0x06817bc837ce4df879fe903ca4700a860ce8165742bd74bdadf379618e89cccd</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Contract deployed:</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e</span></span></code></pre></figure>\n","isPage":false,"text":"\nstarkli deploy &lt;class_hash_of_the_contract_to_be_deployed&gt;\nFor this contract we did not specified a constructor function, thus we don&#x27;t need to pass any constructor argument\nstarkli deploy 0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306\nAfter running, expect an output similar to:\nDeploying class 0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306 with salt 0x02c93ad00ce6f894729baeafd1fd0456c5a5c540c1caa053ab5392f27ea8f130...\nThe contract will be deployed at address 0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e\nContract deployment transaction: 0x06817bc837ce4df879fe903ca4700a860ce8165742bd74bdadf379618e89cccd\nContract deployed:\n0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e\n","title":"Deploy contract","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Contract Deployment and Interaction"]},"166":{"href":"/toolchain/katana/interact#call-contract-only-read-state","html":"\n<p>The first parameter is the contract address, the second parameter is the function to be called.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> call </span><span style=\"color:#6CB6FF\">0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e</span><span style=\"color:#96D0FF\"> get</span></span></code></pre></figure>\n<p>After running, expect an output similar to:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">[</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">]</span></span></code></pre></figure>\n<p>It means the vale of <code>stored_data</code> is zero.</p>\n","isPage":false,"text":"\nThe first parameter is the contract address, the second parameter is the function to be called.\nstarkli call 0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e get\nAfter running, expect an output similar to:\n[\n    &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;\n]\nIt means the vale of stored_data is zero.\n","title":"Call contract [only read state]","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Contract Deployment and Interaction"]},"167":{"href":"/toolchain/katana/interact#invoke-contract-can-write-state","html":"\n<p>The first parameter is the contract address, the second parameter is the function to be invoked, and the third parameter is the function parameter. Let&#x27;s set the value of <code>stored_data</code> to 42.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> invoke </span><span style=\"color:#6CB6FF\">0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e</span><span style=\"color:#96D0FF\"> set </span><span style=\"color:#6CB6FF\">42</span></span></code></pre></figure>\n<p>Let&#x27;s retrieve the new value of <code>stored_data</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> call </span><span style=\"color:#6CB6FF\">0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e</span><span style=\"color:#96D0FF\"> get</span></span></code></pre></figure>\n<p>After running, expect an output similar to:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">[</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    &quot;0x000000000000000000000000000000000000000000000000000000000000002a&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">]</span></span></code></pre></figure>\n<p>Awesome you interacted a deployed a raw Cairo smart contract using katana! You can now build more complex smart contracts and interact with them using the same process.</p>","isPage":false,"text":"\nThe first parameter is the contract address, the second parameter is the function to be invoked, and the third parameter is the function parameter. Let&#x27;s set the value of stored_data to 42.\nstarkli invoke 0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e set 42\nLet&#x27;s retrieve the new value of stored_data\nstarkli call 0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e get\nAfter running, expect an output similar to:\n[\n    &quot;0x000000000000000000000000000000000000000000000000000000000000002a&quot;\n]\nAwesome you interacted a deployed a raw Cairo smart contract using katana! You can now build more complex smart contracts and interact with them using the same process.","title":"Invoke contract [can write state]","titles":["Interact with Katana on Starknet. Deploy a Cairo smart contract using Katana","Contract Deployment and Interaction"]},"168":{"href":"/toolchain/katana/mining#mining-modes","html":"</header>\n<p>In Katana, mining modes determine how frequent blocks are produced. By default, a new block is automatically created as soon as a transaction is received.</p>\n","isPage":true,"text":"\nIn Katana, mining modes determine how frequent blocks are produced. By default, a new block is automatically created as soon as a transaction is received.\n","title":"Mining Modes","titles":[]},"169":{"href":"/toolchain/katana/mining#interval-mining","html":"\n<p>You can switch from the default mining behaviour to interval mining, where a new block is created at a fixed time interval selected by the user. To enable this mode of mining, use the <code>--block-time &lt;MILLISECONDS&gt;</code> flag, as demonstrated in the following example.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Produces a new block for every 10 seconds</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --block-time</span><span style=\"color:#6CB6FF\"> 10000</span></span></code></pre></figure>\n","isPage":false,"text":"\nYou can switch from the default mining behaviour to interval mining, where a new block is created at a fixed time interval selected by the user. To enable this mode of mining, use the --block-time &lt;MILLISECONDS&gt; flag, as demonstrated in the following example.\n# Produces a new block for every 10 seconds\nkatana --block-time 10000\n","title":"Interval Mining","titles":["Mining Modes"]},"170":{"href":"/toolchain/katana/mining#on-demand-mining","html":"\n<p>On-demand mining is another mode of mining that allows users to manually create a new block. This mode is useful for testing purposes or when you want to create a block at a specific time. New blocks can only be created by calling the <a href=\"/toolchain/katana/rpc/overview.md\"><code>generateBlock</code></a> RPC method of the <code>dev</code> namespace.</p>\n<p>In on-demand mining mode, transactions will be executed after receiving them but blocks will not be mined until you have called the <code>generateBlock</code> RPC method. Upon calling it, a new block will be created and all the pending transactions will be included in it.</p>\n<p>To enable on-demand mining, use the <code>--no-mining</code> flag.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --no-mining</span></span></code></pre></figure>","isPage":false,"text":"\nOn-demand mining is another mode of mining that allows users to manually create a new block. This mode is useful for testing purposes or when you want to create a block at a specific time. New blocks can only be created by calling the generateBlock RPC method of the dev namespace.\nIn on-demand mining mode, transactions will be executed after receiving them but blocks will not be mined until you have called the generateBlock RPC method. Upon calling it, a new block will be created and all the pending transactions will be included in it.\nTo enable on-demand mining, use the --no-mining flag.\nkatana --no-mining","title":"On-demand Mining","titles":["Mining Modes"]},"171":{"href":"/toolchain/katana/settlement#settlement","html":"\n<p><em>Coming soon</em></p>","isPage":true,"text":"\nComing soon","title":"Settlement","titles":[null]},"172":{"href":"/toolchain/katana/storage#storage-modes","html":"</header>\n<p>Katana offers different storage modes to cater to various use cases and requirements. There are two primary storage modes: <strong>in-memory</strong> storage and <strong>persistent</strong> storage.</p>\n<p>By default, Katana operates in an <strong>ephemeral mode</strong>, where all data is stored in memory and is not persisted when the process is terminated. Running Katana using in-memory storage offers the fastest performance, as it eliminates the overhead of performing disk I/O operations. Ephemeral mode is suitable for quick testing and experimentation of your Dojo game.</p>\n<p>However, Katana also supports persistent storage, allowing the state of the chain to be saved and restored across process restarts. This is particularly useful for scenarios where maintaining the state of the chain is crucial, such as in production environments or performing long-running playtests.</p>\n","isPage":true,"text":"\nKatana offers different storage modes to cater to various use cases and requirements. There are two primary storage modes: in-memory storage and persistent storage.\nBy default, Katana operates in an ephemeral mode, where all data is stored in memory and is not persisted when the process is terminated. Running Katana using in-memory storage offers the fastest performance, as it eliminates the overhead of performing disk I/O operations. Ephemeral mode is suitable for quick testing and experimentation of your Dojo game.\nHowever, Katana also supports persistent storage, allowing the state of the chain to be saved and restored across process restarts. This is particularly useful for scenarios where maintaining the state of the chain is crucial, such as in production environments or performing long-running playtests.\n","title":"Storage Modes","titles":[]},"173":{"href":"/toolchain/katana/storage#persistent-storage","html":"\n<p>To enable persistent storage, you can use the <code>--db-dir &lt;PATH&gt;</code> command-line flag when running Katana. This flag specifies the directory where the database files will be stored. If the specified path points to an empty directory, Katana will create a new database. On the other hand, if the path points to a directory with a previously initialized Katana database, Katana will use the existing database, allowing you to resume from the previous state.</p>\n<aside data-callout=\"note\"><p>💡 <strong>NOTE</strong><br/>\nWhen Katana is running in &quot;forked&quot; mode, the storage mode currently defaults to in-memory. Persistent storage support for forked mode is not yet available.</p></aside>\n","isPage":false,"text":"\nTo enable persistent storage, you can use the --db-dir &lt;PATH&gt; command-line flag when running Katana. This flag specifies the directory where the database files will be stored. If the specified path points to an empty directory, Katana will create a new database. On the other hand, if the path points to a directory with a previously initialized Katana database, Katana will use the existing database, allowing you to resume from the previous state.\n💡 NOTE\nWhen Katana is running in &quot;forked&quot; mode, the storage mode currently defaults to in-memory. Persistent storage support for forked mode is not yet available.\n","title":"Persistent Storage","titles":["Storage Modes"]},"174":{"href":"/toolchain/katana/storage#usage-examples","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Initialize a new database in the specified directory</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --db-dir</span><span style=\"color:#96D0FF\"> ./katana-db</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Resume from a previously saved state</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --db-dir</span><span style=\"color:#96D0FF\"> ./existing-katana-db</span></span></code></pre></figure>","isPage":false,"text":"\n# Initialize a new database in the specified directory\nkatana --db-dir ./katana-db\n# Resume from a previously saved state\nkatana --db-dir ./existing-katana-db","title":"Usage Examples","titles":["Storage Modes","Persistent Storage"]},"175":{"href":"/toolchain/katana/transactions#supported-transaction-types","html":"\n<p>Katana aims to follow the Starknet specifications as closely as possible, and mimics the features that is currently supported on the mainnet. As such, Katana currently supports the following Starknet transaction types:</p>\n<table><thead><tr><th>Type</th><th>Version</th></tr></thead><tbody><tr><td>INVOKE</td><td>1, 3</td></tr><tr><td>DECLARE</td><td>1, 2, 3</td></tr><tr><td>DEPLOY_ACCOUNT</td><td>1, 3</td></tr></tbody></table>\n<p>To learn more about the different transaction types, you can refer to the <a href=\"https://docs.starknet.io/documentation/architecture_and_concepts/Network_Architecture/transactions\">Starknet documentation</a>.</p>","isPage":true,"text":"\nKatana aims to follow the Starknet specifications as closely as possible, and mimics the features that is currently supported on the mainnet. As such, Katana currently supports the following Starknet transaction types:\nTypeVersionINVOKE1, 3DECLARE1, 2, 3DEPLOY_ACCOUNT1, 3\nTo learn more about the different transaction types, you can refer to the Starknet documentation.","title":"Supported Transaction Types","titles":[null]},"176":{"href":"/toolchain/slot/overview#slot","html":"</header>\n<p>Slot is a toolchain developed by <a href=\"https://github.com/cartridge-gg/slot\">Cartrige.gg</a> for rapidly spinning up Katana and Torii instances. Play test your game in seconds.</p>\n","isPage":true,"text":"\nSlot is a toolchain developed by Cartrige.gg for rapidly spinning up Katana and Torii instances. Play test your game in seconds.\n","title":"Slot","titles":[]},"177":{"href":"/toolchain/slot/overview#installation","html":"\n<p>Run the following command to install slot:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> -L</span><span style=\"color:#96D0FF\"> https://slot.cartridge.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> bash</span></span></code></pre></figure>\n<p>Once finished, run <code>slotup</code> to manage slot installations and follow the outputted directions.</p>\n","isPage":false,"text":"\nRun the following command to install slot:\ncurl -L https://slot.cartridge.sh | bash\nOnce finished, run slotup to manage slot installations and follow the outputted directions.\n","title":"Installation","titles":["Slot"]},"178":{"href":"/toolchain/slot/overview#deploy-using-slot","html":"\n<p>To deploy your projects using slot, check out the tutorial <a href=\"/tutorial/deploy-using-slot/main.md\">Deploy using Slot</a>.</p>\n<blockquote>\n<p>📚 <strong>Reference</strong></p>\n<p>See the <a href=\"/toolchain/slot/reference.md\"><code>slot</code> Reference</a> for a complete overview of all the available subcommands.</p>\n</blockquote>","isPage":false,"text":"\nTo deploy your projects using slot, check out the tutorial Deploy using Slot.\n\n📚 Reference\nSee the slot Reference for a complete overview of all the available subcommands.\n","title":"Deploy using Slot","titles":["Slot"]},"179":{"href":"/toolchain/slot/reference#slot-reference","html":"\n","isPage":true,"text":"\n","title":"slot reference","titles":[null]},"180":{"href":"/toolchain/slot/reference#name","html":"\n<p>slot - a toolchain developed for rapidly spinning up Katana and Torii instances.</p>\n","isPage":false,"text":"\nslot - a toolchain developed for rapidly spinning up Katana and Torii instances.\n","title":"Name","titles":[null,"slot reference"]},"181":{"href":"/toolchain/slot/reference#usage","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#ADBAC7\"> [COMMANDS] [OPTIONS]</span></span></code></pre></figure>\n","isPage":false,"text":"\nslot [COMMANDS] [OPTIONS]\n","title":"Usage","titles":[null,"slot reference"]},"182":{"href":"/toolchain/slot/reference#commands","html":"\n<p><code>auth</code><br/>\n     Manage auth credentials for the Slot CLI.</p>\n<p><a href=\"/toolchain/slot/deployments-commands/deployments.md\"><code>deployments</code></a></p>\n<p>     Manage Slot deployments.</p>\n<p><code>help</code><br/>\n     Print this message or the help of the given subcommand(s)</p>","isPage":false,"text":"\nauth\n     Manage auth credentials for the Slot CLI.\ndeployments\n     Manage Slot deployments.\nhelp\n     Print this message or the help of the given subcommand(s)","title":"Commands","titles":[null,"slot reference"]},"183":{"href":"/toolchain/sozo/development#development","html":"</header>","isPage":true,"text":"","title":"Development","titles":[]},"184":{"href":"/toolchain/sozo/overview#sozo","html":"\n<p><code>sozo</code> is a powerful all-in-one tool for managing your Dojo projects. It helps with everything from scaffolding a new project, all the way to deploying and interacting with your Dojo Worlds. It includes a migration planning tool, designed to streamline the updating and deployment of AWs. It provides a robust command-line interface (CLI) that simplifies World management tasks, enabling you to focus on the creative aspects of World-building. In the future, it may include a GUI.</p>\n","isPage":true,"text":"\nsozo is a powerful all-in-one tool for managing your Dojo projects. It helps with everything from scaffolding a new project, all the way to deploying and interacting with your Dojo Worlds. It includes a migration planning tool, designed to streamline the updating and deployment of AWs. It provides a robust command-line interface (CLI) that simplifies World management tasks, enabling you to focus on the creative aspects of World-building. In the future, it may include a GUI.\n","title":"Sozo","titles":[null]},"185":{"href":"/toolchain/sozo/overview#features","html":"\n<ul>\n<li><strong>Binary CLI</strong>: Sozo provides an intuitive binary CLI, ensuring easy management of your Worlds, whether you&#x27;re updating existing ones or deploying new ones.</li>\n</ul>\n","isPage":false,"text":"\n\nBinary CLI: Sozo provides an intuitive binary CLI, ensuring easy management of your Worlds, whether you&#x27;re updating existing ones or deploying new ones.\n\n","title":"Features","titles":[null]},"186":{"href":"/toolchain/sozo/overview#installation","html":"\n<p><code>sozo</code> binary can be installed via <a href=\"/getting-started/quick-start.md\"><code>dojoup</code></a>, our dedicated installation package manager.</p>\n","isPage":false,"text":"\nsozo binary can be installed via dojoup, our dedicated installation package manager.\n","title":"Installation","titles":[null]},"187":{"href":"/toolchain/sozo/overview#installing-from-source","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">git</span><span style=\"color:#96D0FF\"> clone https://github.com/dojoengine/dojo</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">cd</span><span style=\"color:#96D0FF\"> dojo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./bin/sozo --locked --force</span></span></code></pre></figure>\n<p>This will install Sozo and the required dependencies on your local system.</p>\n<blockquote>\n<p>📚 <strong>Reference</strong></p>\n<p>See the <a href=\"/toolchain/sozo/reference.md\"><code>sozo</code> Reference</a> for a complete overview of all the available subcommands.</p>\n</blockquote>","isPage":false,"text":"\ngit clone https://github.com/dojoengine/dojo\ncd dojo\ncargo install --path ./bin/sozo --locked --force\nThis will install Sozo and the required dependencies on your local system.\n\n📚 Reference\nSee the sozo Reference for a complete overview of all the available subcommands.\n","title":"Installing from Source","titles":[null,"Installation"]},"188":{"href":"/toolchain/sozo/reference#sozo-reference","html":"\n","isPage":true,"text":"\n","title":"sozo reference","titles":[null]},"189":{"href":"/toolchain/sozo/reference#common-options","html":"\n<ul>\n<li><a href=\"/toolchain/sozo/common-options/profile.md\">profile</a></li>\n<li><a href=\"/toolchain/sozo/common-options/offline.md\">offline</a></li>\n</ul>\n","isPage":false,"text":"\n\nprofile\noffline\n\n","title":"Common options","titles":[null,"sozo reference"]},"190":{"href":"/toolchain/sozo/reference#project-commands","html":"\n<ul>\n<li><a href=\"/toolchain/sozo/project-commands/init.md\">init</a></li>\n<li><a href=\"/toolchain/sozo/project-commands/build.md\">build</a></li>\n<li><a href=\"/toolchain/sozo/project-commands/test.md\">test</a></li>\n<li><a href=\"/toolchain/sozo/project-commands/migrate.mdx\">migrate</a></li>\n</ul>\n","isPage":false,"text":"\n\ninit\nbuild\ntest\nmigrate\n\n","title":"Project Commands","titles":[null,"sozo reference"]},"191":{"href":"/toolchain/sozo/reference#world-commands","html":"\n<ul>\n<li><a href=\"/toolchain/sozo/world-commands/execute.mdx\">execute</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/register.md\">register</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/system.mdx\">system</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/model.mdx\">model</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/events.md\">events</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/auth.md\">auth</a></li>\n</ul>","isPage":false,"text":"\n\nexecute\nregister\nsystem\nmodel\nevents\nauth\n","title":"World Commands","titles":[null,"sozo reference"]},"192":{"href":"/toolchain/torii/graphql#torii---graphql","html":"\n","isPage":true,"text":"\n","title":"Torii - GraphQL","titles":[null]},"193":{"href":"/toolchain/torii/graphql#name","html":"\n<p>In Dojo, you have access to custom queries and subscriptions that are specifically designed to work with the <code>caller</code> for client applications. GraphQL is the technology that makes this possible.</p>\n<p>GraphQL is the rising star of backend technologies. It replaces REST as an API design paradigm and is becoming the new standard for exposing the data and functionality of a web server. It allows you to specify exactly what data you want to retrieve, and it delivers that data in a structured JSON format. This flexibility in data retrieval ensures that you get the information you need efficiently and in a format that&#x27;s easy to work with.</p>\n","isPage":false,"text":"\nIn Dojo, you have access to custom queries and subscriptions that are specifically designed to work with the caller for client applications. GraphQL is the technology that makes this possible.\nGraphQL is the rising star of backend technologies. It replaces REST as an API design paradigm and is becoming the new standard for exposing the data and functionality of a web server. It allows you to specify exactly what data you want to retrieve, and it delivers that data in a structured JSON format. This flexibility in data retrieval ensures that you get the information you need efficiently and in a format that&#x27;s easy to work with.\n","title":"Name","titles":[null,"Torii - GraphQL"]},"194":{"href":"/toolchain/torii/graphql#graphql-playground","html":"\n<p>GraphQL Playground is a <code>GraphQL IDE</code> that allows you to interactively explore the functionality of a GraphQL API by sending queries and mutations to it. It’s somewhat similar to Postman which offers comparable functionality for REST APIs.</p>\n","isPage":false,"text":"\nGraphQL Playground is a GraphQL IDE that allows you to interactively explore the functionality of a GraphQL API by sending queries and mutations to it. It’s somewhat similar to Postman which offers comparable functionality for REST APIs.\n","title":"GraphQL Playground","titles":[null,"Torii - GraphQL","Name"]},"195":{"href":"/toolchain/torii/graphql#usage","html":"\n","isPage":false,"text":"\n","title":"USAGE","titles":[null,"Torii - GraphQL"]},"196":{"href":"/toolchain/torii/graphql#pre-requisites","html":"\n<p>Make sure torii is running in your local terminal.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">WORLD_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<p>It starts GraphQL server at <code>http://0.0.0.0:8080/graphql</code></p>\n<p>After the torii server starts on your local machine, you&#x27;re ready to make query and subscription operations.</p>\n","isPage":false,"text":"\nMake sure torii is running in your local terminal.\ntorii --world &lt;WORLD_ADDRESS&gt;\nIt starts GraphQL server at http://0.0.0.0:8080/graphql\nAfter the torii server starts on your local machine, you&#x27;re ready to make query and subscription operations.\n","title":"Pre-requisites","titles":[null,"Torii - GraphQL","USAGE"]},"197":{"href":"/toolchain/torii/graphql#schema-and-query-defintions","html":"\n<p>Torii generates both the schema and queries at runtime specific to your world. There are mainly two groups of queries, predefined queries and dynamically generated custom queries.</p>\n<p>Predefined queries like <code>entities</code> provide a generic entry point to the entities data of the world. Custom queries on the other hand are built according to the models of the world. Each model has a correpsonding <code>{name}Models</code> query and retrieves the associated model data. For example: <code>positionModels</code>.</p>\n<p>The benefit of custom queries becomes apparent when filtering and sorting is needed. They allow much more finer control of the returned dataset.</p>\n","isPage":false,"text":"\nTorii generates both the schema and queries at runtime specific to your world. There are mainly two groups of queries, predefined queries and dynamically generated custom queries.\nPredefined queries like entities provide a generic entry point to the entities data of the world. Custom queries on the other hand are built according to the models of the world. Each model has a correpsonding {name}Models query and retrieves the associated model data. For example: positionModels.\nThe benefit of custom queries becomes apparent when filtering and sorting is needed. They allow much more finer control of the returned dataset.\n","title":"Schema and query defintions","titles":[null,"Torii - GraphQL"]},"198":{"href":"/toolchain/torii/graphql#query-operation","html":"\n<p>In <a href=\"/cairo/hello-dojo.md#next-steps\"><code>hello-dojo</code></a> we fetched some data from the <code>Moves</code> model. This time let&#x27;s fetch only <code>id</code>, <code>name</code>, <code>classHash</code> fields from <code>Position</code> model .</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  model</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">id</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    name</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    classHash</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>After you run the query, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;model&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;name&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;classHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x6ffc643cbc4b2fb9c424242b18175a5e142269b45f4463d1cd4dddb7a2e5095&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Great! If you&#x27;re wondering about the number of fields a <code>Model</code> has or the details of a <code>Entities</code>, you can find all the information about the schema definition in the <code>Documentation Explorer</code> section of the GraphQL IDE. It&#x27;s your go-to place for exploring the rest of the documentation.</p>\n<p>Now lets retrieve more data from <code>Moves</code> model.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  movesModels</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    edges</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      node</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        player</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        remaining</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        last_direction</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>After you run the query, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;movesModels&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;edges&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;player&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;remaining&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;last_direction&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;None&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nIn hello-dojo we fetched some data from the Moves model. This time let&#x27;s fetch only id, name, classHash fields from Position model .\nquery {\n  model(id: &quot;Position&quot;) {\n    id\n    name\n    classHash\n  }\n}\nAfter you run the query, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;model&quot;: {\n      &quot;id&quot;: &quot;Position&quot;,\n      &quot;name&quot;: &quot;Position&quot;,\n      &quot;classHash&quot;: &quot;0x6ffc643cbc4b2fb9c424242b18175a5e142269b45f4463d1cd4dddb7a2e5095&quot;\n    }\n  }\n}\nGreat! If you&#x27;re wondering about the number of fields a Model has or the details of a Entities, you can find all the information about the schema definition in the Documentation Explorer section of the GraphQL IDE. It&#x27;s your go-to place for exploring the rest of the documentation.\nNow lets retrieve more data from Moves model.\nquery {\n  movesModels {\n    edges {\n      node {\n        player\n        remaining\n        last_direction\n      }\n    }\n  }\n}\nAfter you run the query, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;movesModels&quot;: {\n      &quot;edges&quot;: [\n        {\n          &quot;node&quot;: {\n            &quot;player&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;remaining&quot;: 10,\n            &quot;last_direction&quot;: &quot;None&quot;\n          }\n        }\n      ]\n    }\n  }\n}\n","title":"Query operation","titles":[null,"Torii - GraphQL"]},"199":{"href":"/toolchain/torii/graphql#transactions","html":"\n<p>GraphQL additionally offers an API to fetch transactions emitted from your <code>world</code>. Presently, you can retrieve <code>transaction data</code> with the potential for future support of <code>transaction receipt</code>. Current API includes pagination support, although filtering is not yet supported. Let&#x27;s explore an example.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  transactions</span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    edges</span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      node</span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        transactionHash</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        senderAddress</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        calldata</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    totalCount</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>If you execute this query after you applied <code>sozo migrate</code> in your <a href=\"/cairo/hello-dojo.md\"><code>hello-dojo</code></a> example. You will get an output similar to this.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;transactions&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;edges&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000a:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x2da3d65e223362c72906f97663a4e7dc81ab0bbd04bbde5532a230c1e97d93e&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;senderAddress&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;calldata&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2730079d734ee55315f4f141eaed376bddd8c2133523d223a344c5604e0f7f8&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x35ec9fd22092dc0c8fc9341e94d5f361924d921c128fa46a0648f2dac519ce4&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2ffecbe8de6c7c10c785a6eb964ee6489f8dcf139000adbe2c0f12d249be7d8&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000008:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x2aa02de0e3fa582b3cb6cf9e4371051f44ae2e0d6c94f5c936338ffc8c2ac12&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;senderAddress&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;calldata&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2e5174b54aef0b99d4685827ffa51488447e1f5607908293d5c715d6bd22433&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x6a11b5b3003a3aa0ae7f8f443e48314cc0bc51eaea7c3ed1c19beb909f5dda3&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000005:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x1f03fa7dc5a673f96d53b728785a98d6ff089c182a7bb32735b150e91817e5b&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;senderAddress&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;calldata&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1987cbd17808b9a23693d4de7e246a443cfe37e6e7fbaeabd7d7e6532b07c3d&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x6&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x6&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0xb3e374b8087dca92601afbb9881fed855ac0d568e3bf878a876fca5ffcb479&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x41d7f42bf7a362f0420aaae66d7a91df981100a039ac116a1d9cb632c74ad27&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;totalCount&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">3</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Now feel free to play around with the query by removing any fields from the selection set and observe the responses sent by the server. It is your turn to create any kind of query for entities and models!</p>\n","isPage":false,"text":"\nGraphQL additionally offers an API to fetch transactions emitted from your world. Presently, you can retrieve transaction data with the potential for future support of transaction receipt. Current API includes pagination support, although filtering is not yet supported. Let&#x27;s explore an example.\nquery{\n  transactions{\n    edges{\n      node{\n        id\n        transactionHash\n        senderAddress\n        calldata\n      }\n    }\n    totalCount\n  }\n}\nIf you execute this query after you applied sozo migrate in your hello-dojo example. You will get an output similar to this.\n{\n  &quot;data&quot;: {\n    &quot;transactions&quot;: {\n      &quot;edges&quot;: [\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000a:0x0000&quot;,\n            &quot;transactionHash&quot;: &quot;0x2da3d65e223362c72906f97663a4e7dc81ab0bbd04bbde5532a230c1e97d93e&quot;,\n            &quot;senderAddress&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;calldata&quot;: [\n              &quot;0x1&quot;,\n              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;,\n              &quot;0x2730079d734ee55315f4f141eaed376bddd8c2133523d223a344c5604e0f7f8&quot;,\n              &quot;0x0&quot;,\n              &quot;0x2&quot;,\n              &quot;0x2&quot;,\n              &quot;0x35ec9fd22092dc0c8fc9341e94d5f361924d921c128fa46a0648f2dac519ce4&quot;,\n              &quot;0x2ffecbe8de6c7c10c785a6eb964ee6489f8dcf139000adbe2c0f12d249be7d8&quot;\n            ]\n          }\n        },\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000008:0x0000&quot;,\n            &quot;transactionHash&quot;: &quot;0x2aa02de0e3fa582b3cb6cf9e4371051f44ae2e0d6c94f5c936338ffc8c2ac12&quot;,\n            &quot;senderAddress&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;calldata&quot;: [\n              &quot;0x2&quot;,\n              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;,\n              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;,\n              &quot;0x0&quot;,\n              &quot;0x1&quot;,\n              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;,\n              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;,\n              &quot;0x1&quot;,\n              &quot;0x1&quot;,\n              &quot;0x2&quot;,\n              &quot;0x2e5174b54aef0b99d4685827ffa51488447e1f5607908293d5c715d6bd22433&quot;,\n              &quot;0x6a11b5b3003a3aa0ae7f8f443e48314cc0bc51eaea7c3ed1c19beb909f5dda3&quot;\n            ]\n          }\n        },\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000005:0x0000&quot;,\n            &quot;transactionHash&quot;: &quot;0x1f03fa7dc5a673f96d53b728785a98d6ff089c182a7bb32735b150e91817e5b&quot;,\n            &quot;senderAddress&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;calldata&quot;: [\n              &quot;0x1&quot;,\n              &quot;0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf&quot;,\n              &quot;0x1987cbd17808b9a23693d4de7e246a443cfe37e6e7fbaeabd7d7e6532b07c3d&quot;,\n              &quot;0x0&quot;,\n              &quot;0x6&quot;,\n              &quot;0x6&quot;,\n              &quot;0xb3e374b8087dca92601afbb9881fed855ac0d568e3bf878a876fca5ffcb479&quot;,\n              &quot;0x41d7f42bf7a362f0420aaae66d7a91df981100a039ac116a1d9cb632c74ad27&quot;,\n              &quot;0x0&quot;,\n              &quot;0x2&quot;,\n              &quot;0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59&quot;,\n              &quot;0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f&quot;\n            ]\n          }\n        }\n      ],\n      &quot;totalCount&quot;: 3\n    }\n  }\n}\nNow feel free to play around with the query by removing any fields from the selection set and observe the responses sent by the server. It is your turn to create any kind of query for entities and models!\n","title":"Transactions","titles":[null,"Torii - GraphQL","Query operation"]},"200":{"href":"/toolchain/torii/graphql#pagination","html":"\n<p>As the entities in your world grows, fetching all of that data at once can become inefficient and slow.</p>\n<p>Torii provides two methods to address this - cursor or offset/limit based pagination. To keep the return type consistent, both methods will return a <a href=\"https://relay.dev/graphql/connections.htm#sec-Connection-Types\"><code>Connection</code></a> type.</p>\n<p>You can read more about graphql pagination <a href=\"https://graphql.org/learn/pagination\">here</a>.</p>\n","isPage":false,"text":"\nAs the entities in your world grows, fetching all of that data at once can become inefficient and slow.\nTorii provides two methods to address this - cursor or offset/limit based pagination. To keep the return type consistent, both methods will return a Connection type.\nYou can read more about graphql pagination here.\n","title":"Pagination","titles":[null,"Torii - GraphQL","Query operation"]},"201":{"href":"/toolchain/torii/graphql#cursor","html":"\n<p>Cursor based pagination is the most efficient, allowing us to query a subset or slice of the entire set of data. Both forward and backward pagination are supported using a combination of <code>first, last, before, after</code> input arguments.</p>\n<p>Forward pagination uses <code>first</code>/<code>after</code> and backward pagination uses <code>last</code>/<code>before</code>. <code>first</code>/<code>last</code> are integers representing the number of items to return. <code>after</code>/<code>before</code> are the cursors to paginate from.</p>\n<p>Query for first page of 2 entities</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entities</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">first</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    totalCount</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    edges</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      cursor</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      node</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        ...</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Result shows there are 5 entities and returns the first two</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;entities&quot;</span><span style=\"color:#FF938A;font-style:italic\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;totalCount&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">5</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;edges&quot;</span><span style=\"color:#FF938A;font-style:italic\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#FF938A;font-style:italic\">      {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;cursor&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Y3Vyc29yX29uZQ==&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;node&quot;</span><span style=\"color:#ADBAC7\"> : { }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;cursor&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Y3Vyc29yX3R3bw==&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;node&quot;</span><span style=\"color:#ADBAC7\"> : { }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Query 3 entities after the second node (last 3)</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entities</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">first</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">3</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">after</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Y3Vyc29yX3R3bw==&quot;</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ...</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nCursor based pagination is the most efficient, allowing us to query a subset or slice of the entire set of data. Both forward and backward pagination are supported using a combination of first, last, before, after input arguments.\nForward pagination uses first/after and backward pagination uses last/before. first/last are integers representing the number of items to return. after/before are the cursors to paginate from.\nQuery for first page of 2 entities\nquery {\n  entities (first: 2) {\n    totalCount\n    edges {\n      cursor\n      node {\n        ...\n      }\n    }\n  }\n}\nResult shows there are 5 entities and returns the first two\n{\n  &quot;entities&quot; {\n    &quot;totalCount&quot;: 5,\n    &quot;edges&quot; [\n      {\n        &quot;cursor&quot;: &quot;Y3Vyc29yX29uZQ==&quot;,\n        &quot;node&quot; : { }\n      },\n      {\n        &quot;cursor&quot;: &quot;Y3Vyc29yX3R3bw==&quot;,\n        &quot;node&quot; : { }\n      },\n    ]\n  }\n}\nQuery 3 entities after the second node (last 3)\nquery {\n  entities (first: 3, after: &quot;Y3Vyc29yX3R3bw==&quot;) {\n    ...\n  }\n}\n","title":"Cursor","titles":[null,"Torii - GraphQL","Query operation","Pagination"]},"202":{"href":"/toolchain/torii/graphql#offsetlimit","html":"\n<p>Offset/limit based pagination can be more intuitive and easier to use. However, for very, very large datasets they can be inefficient.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># essentially the same as the last query in cursor example</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entities</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">offset</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#ADBAC7\">, limit 3) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ...</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nOffset/limit based pagination can be more intuitive and easier to use. However, for very, very large datasets they can be inefficient.\n# essentially the same as the last query in cursor example\nquery {\n  entities (offset: 2, limit 3) {\n    ...\n  }\n}\n","title":"Offset/limit","titles":[null,"Torii - GraphQL","Query operation","Pagination"]},"203":{"href":"/toolchain/torii/graphql#subscription-operations","html":"\n<p>Subscriptions are a GraphQL feature that allows a server to send data to its clients when a specific event happens. Subscriptions are usually implemented with WebSockets. In that setup, the server maintains a steady connection to its subscribed client. This also breaks the “Request-Response-Cycle” that is used for with REST APIs.</p>\n<p>Instead, the client initially opens up a long-lived connection to the server by sending a subscription query that specifies which event it is interested in. Every time this particular event happens, the server uses the connection to push the event data to the subscribed client(s).</p>\n<p>In this example, you can listen when an <code>Model</code> is registered by executing this subscription</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#DCBDFB\"> modelRegistered</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  modelRegistered</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    name</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Graphql also supports subscription to a targeted entity or model, for this we have to pass its id as an argument</p>\n<p>In this example, our server provides a <code>entityUpdated</code> subscription, which should notify clients whenever an entity with id <code>0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20</code> is updated. On the same subscription we can get the model(components) values of the updated entity . A client can execute a subscription that looks like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entityUpdated</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  ) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    keys</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    eventId</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    createdAt</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    updatedAt</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    models</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      __typename</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">      ...</span><span style=\"color:#F47067\"> on</span><span style=\"color:#6CB6FF\"> Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        remaining</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        player</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">      ...</span><span style=\"color:#F47067\"> on</span><span style=\"color:#6CB6FF\"> Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        vec</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          x</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          y</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>According to your input, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;entityUpdated&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;eventId&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000013:0x0000:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-10-17 11:39:42&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;updatedAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-10-17 11:52:48&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;models&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;__typename&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;remaining&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;player&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;__typename&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;vec&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;x&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;y&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nSubscriptions are a GraphQL feature that allows a server to send data to its clients when a specific event happens. Subscriptions are usually implemented with WebSockets. In that setup, the server maintains a steady connection to its subscribed client. This also breaks the “Request-Response-Cycle” that is used for with REST APIs.\nInstead, the client initially opens up a long-lived connection to the server by sending a subscription query that specifies which event it is interested in. Every time this particular event happens, the server uses the connection to push the event data to the subscribed client(s).\nIn this example, you can listen when an Model is registered by executing this subscription\nsubscription modelRegistered {\n  modelRegistered {\n    id\n    name\n  }\n}\nGraphql also supports subscription to a targeted entity or model, for this we have to pass its id as an argument\nIn this example, our server provides a entityUpdated subscription, which should notify clients whenever an entity with id 0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20 is updated. On the same subscription we can get the model(components) values of the updated entity . A client can execute a subscription that looks like this:\nsubscription {\n  entityUpdated(\n    id: &quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;\n  ) {\n    id\n    keys\n    eventId\n    createdAt\n    updatedAt\n    models {\n      __typename\n      ... on Moves {\n        remaining\n        player\n      }\n      ... on Position {\n        vec {\n          x\n          y\n        }\n      }\n    }\n  }\n}\nAccording to your input, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;entityUpdated&quot;: {\n      &quot;id&quot;: &quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;,\n      &quot;keys&quot;: [\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\n      ],\n      &quot;eventId&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000013:0x0000:0x0000&quot;,\n      &quot;createdAt&quot;: &quot;2023-10-17 11:39:42&quot;,\n      &quot;updatedAt&quot;: &quot;2023-10-17 11:52:48&quot;,\n      &quot;models&quot;: [\n        {\n          &quot;__typename&quot;: &quot;Moves&quot;,\n          &quot;remaining&quot;: 10,\n          &quot;player&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\n        },\n        {\n          &quot;__typename&quot;: &quot;Position&quot;,\n          &quot;vec&quot;: {\n            &quot;x&quot;: 10,\n            &quot;y&quot;: 10\n          }\n        }\n      ]\n    }\n  }\n}\n","title":"Subscription operations","titles":[null,"Torii - GraphQL"]},"204":{"href":"/toolchain/torii/graphql#susbcription-to-events","html":"\n<p>A valuable approach for harnessing the power of GraphQL is by actively monitoring the events emitted throughout your game. This allows you to extract essential information such as key values, data, and transaction hashes. These events are customizable and can be filtered based on keys, much like <code>entities query</code>, and they seamlessly support pagination. In the subsequent example, we will demonstrate how to listen for any event emitted within your program.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  eventEmitted</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    keys</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    data</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    transactionHash</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>If you execute this suscription after you applied <code>sozo execute &lt;ACTION_CONTRACT_ADDRESS&gt; spawn</code> in your <a href=\"/cairo/hello-dojo.md\"><code>hello-dojo</code></a> example. You will get an output similar to this.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;eventEmitted&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;data&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x4d6f766573&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x64&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x0&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">-----------------------------------------------------------------------------------------------</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;eventEmitted&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0001&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;data&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x506f736974696f6e&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0xa&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0xa&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>","isPage":false,"text":"\nA valuable approach for harnessing the power of GraphQL is by actively monitoring the events emitted throughout your game. This allows you to extract essential information such as key values, data, and transaction hashes. These events are customizable and can be filtered based on keys, much like entities query, and they seamlessly support pagination. In the subsequent example, we will demonstrate how to listen for any event emitted within your program.\nsubscription {\n  eventEmitted {\n    id\n    keys\n    data\n    transactionHash\n  }\n}\nIf you execute this suscription after you applied sozo execute &lt;ACTION_CONTRACT_ADDRESS&gt; spawn in your hello-dojo example. You will get an output similar to this.\n{\n  &quot;data&quot;: {\n    &quot;eventEmitted&quot;: {\n      &quot;id&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0000&quot;,\n      &quot;keys&quot;: [\n        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;\n      ],\n      &quot;data&quot;: [\n        &quot;0x4d6f766573&quot;,\n        &quot;0x1&quot;,\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n        &quot;0x0&quot;,\n        &quot;0x2&quot;,\n        &quot;0x64&quot;,\n        &quot;0x0&quot;\n      ],\n      &quot;transactionHash&quot;: &quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;\n    }\n  }\n}\n-----------------------------------------------------------------------------------------------\n{\n  &quot;data&quot;: {\n    &quot;eventEmitted&quot;: {\n      &quot;id&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0001&quot;,\n      &quot;keys&quot;: [\n        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;\n      ],\n      &quot;data&quot;: [\n        &quot;0x506f736974696f6e&quot;,\n        &quot;0x1&quot;,\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n        &quot;0x0&quot;,\n        &quot;0x2&quot;,\n        &quot;0xa&quot;,\n        &quot;0xa&quot;\n      ],\n      &quot;transactionHash&quot;: &quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;\n    }\n  }\n}","title":"Susbcription to events","titles":[null,"Torii - GraphQL","Subscription operations"]},"205":{"href":"/toolchain/torii/grpc#grpc","html":"\n<p><em>TL;DR</em></p>\n<ul>\n<li>gRPC is an efficient way to fetch your data</li>\n<li>You can subscribe to entity and model events via the gRPC</li>\n<li>Read more - <a href=\"https://grpc.io/docs/what-is-grpc/introduction/\">gRPC</a></li>\n</ul>\n<p>You can use the gRPC directly or you can use it through a developed client. A great way to use it is via <a href=\"/client/sdk/js/dojojs.md\">dojo.js</a> torii-client package.</p>","isPage":true,"text":"\nTL;DR\n\ngRPC is an efficient way to fetch your data\nYou can subscribe to entity and model events via the gRPC\nRead more - gRPC\n\nYou can use the gRPC directly or you can use it through a developed client. A great way to use it is via dojo.js torii-client package.","title":"gRPC","titles":[null]},"206":{"href":"/toolchain/torii/reference#torii-reference","html":"\n","isPage":true,"text":"\n","title":"torii reference","titles":[null]},"207":{"href":"/toolchain/torii/reference#name","html":"\n<p>torii - An automatic indexer and networking layer for a world contract.</p>\n","isPage":false,"text":"\ntorii - An automatic indexer and networking layer for a world contract.\n","title":"Name","titles":[null,"torii reference"]},"208":{"href":"/toolchain/torii/reference#usage","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#ADBAC7\"> [OPTIONS]</span></span></code></pre></figure>\n","isPage":false,"text":"\ntorii [OPTIONS]\n","title":"USAGE","titles":[null,"torii reference"]},"209":{"href":"/toolchain/torii/reference#description","html":"\n<p><code>torii</code> starts the indexer and exposes GraphQL/gRPC API endpoints. The indexer queries the specified Starknet RPC endpoint for transaction blocks and listens for transactions related to the world contract. These transactions can include component/system registrations, entity state updates, system calls, and events. The parsed data is then stored in a local SQLite database.</p>\n<p>The GraphQL and gRPC API endpoints run in tandem with the indexer, providing custom queries specific to the world contract for client applications.</p>\n","isPage":false,"text":"\ntorii starts the indexer and exposes GraphQL/gRPC API endpoints. The indexer queries the specified Starknet RPC endpoint for transaction blocks and listens for transactions related to the world contract. These transactions can include component/system registrations, entity state updates, system calls, and events. The parsed data is then stored in a local SQLite database.\nThe GraphQL and gRPC API endpoints run in tandem with the indexer, providing custom queries specific to the world contract for client applications.\n","title":"DESCRIPTION","titles":[null,"torii reference"]},"210":{"href":"/toolchain/torii/reference#database-url","html":"\n<p><code>torii</code> uses a sqlite database to store indexed data. The database can be stored either in-memory or persistently on the filesystem.</p>\n<ul>\n<li>The in-memory database is ephemeral and only lasts as long as the indexer is running. This is a fast and simple option to start the indexer for development/testing.</li>\n<li>Persistent storage should be used in production. It relies on the local filesystem for storage.</li>\n</ul>\n<p>Note: If using in-memory db, the memory will be garbage collected after a period of inactivity, causing queries to result in errors. Workaround is to use a persistent database.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Persistent database storage using file indexer.db</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#6CB6FF\"> --database</span><span style=\"color:#96D0FF\"> indexer.db</span></span></code></pre></figure>\n","isPage":false,"text":"\ntorii uses a sqlite database to store indexed data. The database can be stored either in-memory or persistently on the filesystem.\n\nThe in-memory database is ephemeral and only lasts as long as the indexer is running. This is a fast and simple option to start the indexer for development/testing.\nPersistent storage should be used in production. It relies on the local filesystem for storage.\n\nNote: If using in-memory db, the memory will be garbage collected after a period of inactivity, causing queries to result in errors. Workaround is to use a persistent database.\n# Persistent database storage using file indexer.db\ntorii --database indexer.db\n","title":"Database URL","titles":[null,"torii reference","DESCRIPTION"]},"211":{"href":"/toolchain/torii/reference#options","html":"\n","isPage":false,"text":"\n","title":"OPTIONS","titles":[null,"torii reference"]},"212":{"href":"/toolchain/torii/reference#general-options","html":"\n<p><code>-w, --world</code><br/>\n     Address of the world contract to index</p>\n<p><code>--rpc</code><br/>\n     Starknet RPC endpoint to use [default: http//localhost:5050]</p>\n<p><code>-d, --database &lt;DATABASE&gt;</code><br/>\n     Database filepath (ex: indexer.db) [default: :memory:]</p>\n<p><code>-s, --start-block &lt;START_BLOCK&gt;</code><br/>\n     Specify a block to start indexing from, ignored if stored head exists [default: 0]</p>\n<p><code>--allowed-origins &lt;ALLOWED_ORIGINS&gt;</code><br/>\n     Specify allowed origins for api endpoints (comma-separated list of allowed origins, or &quot;*&quot; for all) [default: *]</p>\n<p><code>--external-url &lt;EXTERNAL_URL&gt;</code><br/>\n     The external url of the server, used for configuring the GraphQL Playground in a hosted environment</p>\n<p><code>-h, --help</code>\n     Print help</p>\n<p><code>-V, --version</code>\n     Print version</p>","isPage":false,"text":"\n-w, --world\n     Address of the world contract to index\n--rpc\n     Starknet RPC endpoint to use [default: http//localhost:5050]\n-d, --database &lt;DATABASE&gt;\n     Database filepath (ex: indexer.db) [default: :memory:]\n-s, --start-block &lt;START_BLOCK&gt;\n     Specify a block to start indexing from, ignored if stored head exists [default: 0]\n--allowed-origins &lt;ALLOWED_ORIGINS&gt;\n     Specify allowed origins for api endpoints (comma-separated list of allowed origins, or &quot;*&quot; for all) [default: *]\n--external-url &lt;EXTERNAL_URL&gt;\n     The external url of the server, used for configuring the GraphQL Playground in a hosted environment\n-h, --help\n     Print help\n-V, --version\n     Print version","title":"General Options","titles":[null,"torii reference","OPTIONS"]},"213":{"href":"/tutorial/deploy-using-slot/main#deploy-your-game-using-slot","html":"</header>\n<p>Welcome to this tutorial where we&#x27;ll guide you through deploying a project using the Slot.</p>\n<hr/>\n<p>Before we start, make sure you are using the latest dojo version. Run <code>dojoup</code> to have the latest version installed.</p>\n<p>Now, let&#x27;s create a new folder and initialize it with sozo.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">mkdir</span><span style=\"color:#96D0FF\"> dojo-starter </span><span style=\"color:#ADBAC7\">&amp;&amp; </span><span style=\"color:#6CB6FF\">cd</span><span style=\"color:#96D0FF\"> dojo-starter</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> init</span></span></code></pre></figure>\n<p>First, we need to set up our configuration, starting by authenticating with Cartridge. To do this, run the following command, which will then prompt a new screen where you will need to go through the authentication process.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> auth login</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># Slot Auth debug (if old auth credentials):</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">rm</span><span style=\"color:#96D0FF\"> ~/Library/Application</span><span style=\"color:#F47067\">\\ </span><span style=\"color:#96D0FF\">Support/slot/credentials.json</span></span></code></pre></figure>\n<p>Once successful, you can create a new deployment with a unique <code>DEPLOYMENT_NAME</code>. To do this, run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments create DEPLOYMENT_NAME katana</span></span></code></pre></figure>\n<p>After that, you should receive the RPC endpoint for the katana slot. Now, you can use that and update your <code>Scarb.toml</code> file with the new RPC endpoint as follows:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">env</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;YOUR_NEW_RPC_URL&quot;</span></span></code></pre></figure>\n<p>Now, you can stream katana in a new terminal. Open a new terminal and run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments logs DEPLOYMENT_NAME katana -f</span></span></code></pre></figure>\n<p>Then, copy the account address and the private key from the first account into the <code>Scarb.toml</code> file and replace the existing ones as follows:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;YOUR_NEW_ACCOUNT_ADDRESS&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;YOUR_NEW_PRIVATE_KEY&quot;</span></span></code></pre></figure>\n<p>Note: For each new Katana slot, a different account seed is used, making all the accounts unique!</p>\n<hr/>\n<p>Once finished with the new configurations, we are ready to build and migrate the project. To build the project, run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>Now, let&#x27;s migrate the project to our new katana slot:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate --name YOUR_PROJECT_NAME</span></span></code></pre></figure>\n<p>If the migrations have been successful, you will receive the <code>WORLD_ADDRESS</code>, which then you can use to interact with your world.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">🎉</span><span style=\"color:#96D0FF\"> Successfully migrated World at address WORLD_ADDRESS</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">✨</span><span style=\"color:#96D0FF\"> Updating manifest.json...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">✨</span><span style=\"color:#96D0FF\"> Done.</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>Congratulations! You have successfully deployed your project with a Katana slot.</p>\n","isPage":true,"text":"\nWelcome to this tutorial where we&#x27;ll guide you through deploying a project using the Slot.\n\nBefore we start, make sure you are using the latest dojo version. Run dojoup to have the latest version installed.\nNow, let&#x27;s create a new folder and initialize it with sozo.\nmkdir dojo-starter &amp;&amp; cd dojo-starter\nsozo init\nFirst, we need to set up our configuration, starting by authenticating with Cartridge. To do this, run the following command, which will then prompt a new screen where you will need to go through the authentication process.\nslot auth login\n \n# Slot Auth debug (if old auth credentials):\nrm ~/Library/Application\\ Support/slot/credentials.json\nOnce successful, you can create a new deployment with a unique DEPLOYMENT_NAME. To do this, run the following command:\nslot deployments create DEPLOYMENT_NAME katana\nAfter that, you should receive the RPC endpoint for the katana slot. Now, you can use that and update your Scarb.toml file with the new RPC endpoint as follows:\n[tool.dojo.env]\nrpc_url = &quot;YOUR_NEW_RPC_URL&quot;\nNow, you can stream katana in a new terminal. Open a new terminal and run the following command:\nslot deployments logs DEPLOYMENT_NAME katana -f\nThen, copy the account address and the private key from the first account into the Scarb.toml file and replace the existing ones as follows:\naccount_address = &quot;YOUR_NEW_ACCOUNT_ADDRESS&quot;\nprivate_key = &quot;YOUR_NEW_PRIVATE_KEY&quot;\nNote: For each new Katana slot, a different account seed is used, making all the accounts unique!\n\nOnce finished with the new configurations, we are ready to build and migrate the project. To build the project, run the following command:\nsozo build\nNow, let&#x27;s migrate the project to our new katana slot:\nsozo migrate --name YOUR_PROJECT_NAME\nIf the migrations have been successful, you will receive the WORLD_ADDRESS, which then you can use to interact with your world.\n🎉 Successfully migrated World at address WORLD_ADDRESS\n \n✨ Updating manifest.json...\n \n✨ Done.\n \nCongratulations! You have successfully deployed your project with a Katana slot.\n","title":"Deploy your game using Slot","titles":[]},"214":{"href":"/tutorial/deploy-using-slot/main#torii","html":"\n<p>To initiate a Torri indexer slot, execute the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments create DEPLOYMENT_NAME torii --world YOUR_WORLD_ADDRESS --rpc YOUR_NEW_RPC_URL --start-block </span><span style=\"color:#6CB6FF\">1</span></span></code></pre></figure>\n<p>Once deployment is successful, you should receive the endpoints for GraphQL and gRPC.</p>\n<p>If you wish to stream the logs, you can run the following command in a new terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments logs DEPLOYMENT_NAME torii -f</span></span></code></pre></figure>","isPage":false,"text":"\nTo initiate a Torri indexer slot, execute the following command:\nslot deployments create DEPLOYMENT_NAME torii --world YOUR_WORLD_ADDRESS --rpc YOUR_NEW_RPC_URL --start-block 1\nOnce deployment is successful, you should receive the endpoints for GraphQL and gRPC.\nIf you wish to stream the logs, you can run the following command in a new terminal:\nslot deployments logs DEPLOYMENT_NAME torii -f","title":"Torii","titles":["Deploy your game using Slot"]},"215":{"href":"/tutorial/katana-starkli-scarb/main#deploy-your-cairo-smart-contract-using-katana-advanced-tutorial","html":"</header>\n<p><em>Before starting recommend following the <a href=\"/toolchain/katana/interact.md\"><code>Interact with katana</code></a> chapter to gain a basic understanding of katana, starkli and scarb.</em></p>\n","isPage":true,"text":"\nBefore starting recommend following the Interact with katana chapter to gain a basic understanding of katana, starkli and scarb.\n","title":"Deploy your Cairo smart contract using Katana. Advanced Tutorial","titles":[]},"216":{"href":"/tutorial/katana-starkli-scarb/main#contract-deployment-and-interaction","html":"\n","isPage":false,"text":"\n","title":"Contract Deployment and Interaction","titles":["Deploy your Cairo smart contract using Katana. Advanced Tutorial"]},"217":{"href":"/tutorial/katana-starkli-scarb/main#create-a-vote-project","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">scarb</span><span style=\"color:#96D0FF\"> new vote</span></span></code></pre></figure>\n<p>Add contract dependencies to scarb.toml</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">starknet = </span><span style=\"color:#96D0FF\">&quot;2.5.4&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[[</span><span style=\"color:#F69D50\">target</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">starknet-contract</span><span style=\"color:#ADBAC7\">]]</span></span></code></pre></figure>\n<p>Copy the vote contract to lib.cairo</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">/// @dev Core Library Imports for the Traits outside the Starknet Contract</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">/// @dev Trait defining the functions that can be implemented or called by the Starknet Contract</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">interface]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> VoteTrait</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Function that returns the current vote status</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> get_vote_status</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Function that checks if the user at the specified address is allowed to vote</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> voter_can_vote</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, user_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Function that checks if the specified address is registered as a voter</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> is_voter_registered</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">T</span><span style=\"color:#ADBAC7\">, address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Function that allows a user to vote</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> vote</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> T</span><span style=\"color:#ADBAC7\">, vote</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">/// @dev Starknet Contract allowing three registered voters to vote on a proposal</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> Vote</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">get_caller_address;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    const</span><span style=\"color:#6CB6FF\"> YES</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> 1_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    const</span><span style=\"color:#6CB6FF\"> NO</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> 0_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Structure that stores vote counts and voter states</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[storage]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    struct</span><span style=\"color:#F69D50\"> Storage</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        yes_votes</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        no_votes</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        can_vote</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> LegacyMap</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">bool</span><span style=\"color:#ADBAC7\">&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        registered_voter</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> LegacyMap</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">bool</span><span style=\"color:#ADBAC7\">&gt;,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Contract constructor initializing the contract with a list of registered voters and 0 vote count</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[constructor]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> constructor</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractState</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        voter_1</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        voter_2</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        voter_3</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    ) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // Register all voters by calling the _register_voters function</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">_register_voters</span><span style=\"color:#ADBAC7\">(voter_1, voter_2, voter_3);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // Initialize the vote count to 0</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">yes_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">0_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">        self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">no_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">0_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Event that gets emitted when a vote is cast</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[event]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    enum</span><span style=\"color:#F69D50\"> Event</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        VoteCast</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> VoteCast</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        UnauthorizedAttempt</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> UnauthorizedAttempt</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Represents a vote that was cast</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    struct</span><span style=\"color:#F69D50\"> VoteCast</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        voter</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        vote</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Represents an unauthorized attempt to vote</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[derive(</span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Event</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    struct</span><span style=\"color:#F69D50\"> UnauthorizedAttempt</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        unauthorized_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Implementation of VoteTrait for ContractState</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> VoteImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#6CB6FF\">super</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">VoteTrait</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        /// @dev Returns the voting results</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> get_vote_status</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> (n_yes, n_no) </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">_get_voting_result</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> (yes_percentage, no_percentage) </span><span style=\"color:#F47067\">=</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">_get_voting_result_in_percentage</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            (n_yes, n_no, yes_percentage, no_percentage)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        /// @dev Check whether a voter is allowed to vote</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> voter_can_vote</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">, user_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">can_vote</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">(user_address)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        /// @dev Check whether an address is registered as a voter</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> is_voter_registered</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">, address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">registered_voter</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">(address)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        /// @dev Submit a vote</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> vote</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractState</span><span style=\"color:#ADBAC7\">, vote</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert!</span><span style=\"color:#ADBAC7\">(vote </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> NO</span><span style=\"color:#F47067\"> ||</span><span style=\"color:#ADBAC7\"> vote </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> YES</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;VOTE_0_OR_1&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> caller</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> get_caller_address</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">_assert_allowed</span><span style=\"color:#ADBAC7\">(caller);</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">can_vote</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(caller, </span><span style=\"color:#6CB6FF\">false</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">            if</span><span style=\"color:#ADBAC7\"> (vote </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> NO</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">                self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">no_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">no_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            if</span><span style=\"color:#ADBAC7\"> (vote </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> YES</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">                self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">yes_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">yes_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">emit</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">VoteCast</span><span style=\"color:#ADBAC7\"> { voter</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> caller, vote</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> vote, });</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Internal Functions implementation for the Vote contract</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[generate_trait]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> InternalFunctions</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">InternalFunctionsTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        /// @dev Registers the voters and initializes their voting status to true (can vote)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> _register_voters</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractState</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            voter_1</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            voter_2</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            voter_3</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ) {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">registered_voter</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(voter_1, </span><span style=\"color:#6CB6FF\">true</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">can_vote</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(voter_1, </span><span style=\"color:#6CB6FF\">true</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">registered_voter</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(voter_2, </span><span style=\"color:#6CB6FF\">true</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">can_vote</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(voter_2, </span><span style=\"color:#6CB6FF\">true</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">registered_voter</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(voter_3, </span><span style=\"color:#6CB6FF\">true</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">            self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">can_vote</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">write</span><span style=\"color:#ADBAC7\">(voter_3, </span><span style=\"color:#6CB6FF\">true</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Asserts implementation for the Vote contract</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[generate_trait]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> AssertsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">AssertsTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // @dev Internal function that checks if an address is allowed to vote</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> _assert_allowed</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractState</span><span style=\"color:#ADBAC7\">, address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> is_voter</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">registered_voter</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">((address));</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> can_vote</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">can_vote</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">((address));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">            if</span><span style=\"color:#ADBAC7\"> (can_vote </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> false</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">                self</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">emit</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">UnauthorizedAttempt</span><span style=\"color:#ADBAC7\"> { unauthorized_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> address, });</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert!</span><span style=\"color:#ADBAC7\">(is_voter </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> true</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;USER_NOT_REGISTERED&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert!</span><span style=\"color:#ADBAC7\">(can_vote </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> true</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;USER_ALREADY_VOTED&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    /// @dev Implement the VotingResultTrait for the Vote contract</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[generate_trait]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> VoteResultFunctionsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">VoteResultFunctionsTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // @dev Internal function to get the voting results (yes and no vote counts)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> _get_voting_result</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> n_yes</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">yes_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> n_no</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">no_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            (n_yes, n_no)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // @dev Internal function to calculate the voting results in percentage</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> _get_voting_result_in_percentage</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> n_yes</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">yes_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> n_no</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">no_votes</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> total_votes</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> n_yes </span><span style=\"color:#F47067\">+</span><span style=\"color:#ADBAC7\"> n_no;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">            if</span><span style=\"color:#ADBAC7\"> (total_votes </span><span style=\"color:#F47067\">==</span><span style=\"color:#6CB6FF\"> 0_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                return</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> yes_percentage</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> (n_yes </span><span style=\"color:#F47067\">*</span><span style=\"color:#6CB6FF\"> 100_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\"> (total_votes);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> no_percentage</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#F47067\"> =</span><span style=\"color:#ADBAC7\"> (n_no </span><span style=\"color:#F47067\">*</span><span style=\"color:#6CB6FF\"> 100_</span><span style=\"color:#F69D50\">u8</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\"> (total_votes);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            (yes_percentage, no_percentage)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nscarb new vote\nAdd contract dependencies to scarb.toml\n[dependencies]\nstarknet = &quot;2.5.4&quot;\n \n[[target.starknet-contract]]\nCopy the vote contract to lib.cairo\n/// @dev Core Library Imports for the Traits outside the Starknet Contract\nuse starknet::ContractAddress;\n \n/// @dev Trait defining the functions that can be implemented or called by the Starknet Contract\n#[starknet::interface]\ntrait VoteTrait&lt;T&gt; {\n    /// @dev Function that returns the current vote status\n    fn get_vote_status(self: @T) -&gt; (u8, u8, u8, u8);\n    /// @dev Function that checks if the user at the specified address is allowed to vote\n    fn voter_can_vote(self: @T, user_address: ContractAddress) -&gt; bool;\n    /// @dev Function that checks if the specified address is registered as a voter\n    fn is_voter_registered(self: @T, address: ContractAddress) -&gt; bool;\n    /// @dev Function that allows a user to vote\n    fn vote(ref self: T, vote: u8);\n}\n \n/// @dev Starknet Contract allowing three registered voters to vote on a proposal\n#[starknet::contract]\nmod Vote {\n    use starknet::ContractAddress;\n    use starknet::get_caller_address;\n \n    const YES: u8 = 1_u8;\n    const NO: u8 = 0_u8;\n \n    /// @dev Structure that stores vote counts and voter states\n    #[storage]\n    struct Storage {\n        yes_votes: u8,\n        no_votes: u8,\n        can_vote: LegacyMap::&lt;ContractAddress, bool&gt;,\n        registered_voter: LegacyMap::&lt;ContractAddress, bool&gt;,\n    }\n \n    /// @dev Contract constructor initializing the contract with a list of registered voters and 0 vote count\n    #[constructor]\n    fn constructor(\n        ref self: ContractState,\n        voter_1: ContractAddress,\n        voter_2: ContractAddress,\n        voter_3: ContractAddress\n    ) {\n        // Register all voters by calling the _register_voters function\n        self._register_voters(voter_1, voter_2, voter_3);\n \n        // Initialize the vote count to 0\n        self.yes_votes.write(0_u8);\n        self.no_votes.write(0_u8);\n    }\n \n    /// @dev Event that gets emitted when a vote is cast\n    #[event]\n    #[derive(Drop, starknet::Event)]\n    enum Event {\n        VoteCast: VoteCast,\n        UnauthorizedAttempt: UnauthorizedAttempt,\n    }\n \n    /// @dev Represents a vote that was cast\n    #[derive(Drop, starknet::Event)]\n    struct VoteCast {\n        voter: ContractAddress,\n        vote: u8,\n    }\n \n    /// @dev Represents an unauthorized attempt to vote\n    #[derive(Drop, starknet::Event)]\n    struct UnauthorizedAttempt {\n        unauthorized_address: ContractAddress,\n    }\n \n    /// @dev Implementation of VoteTrait for ContractState\n    #[abi(embed_v0)]\n    impl VoteImpl of super::VoteTrait&lt;ContractState&gt; {\n        /// @dev Returns the voting results\n        fn get_vote_status(self: @ContractState) -&gt; (u8, u8, u8, u8) {\n            let (n_yes, n_no) = self._get_voting_result();\n            let (yes_percentage, no_percentage) = self._get_voting_result_in_percentage();\n            (n_yes, n_no, yes_percentage, no_percentage)\n        }\n \n        /// @dev Check whether a voter is allowed to vote\n        fn voter_can_vote(self: @ContractState, user_address: ContractAddress) -&gt; bool {\n            self.can_vote.read(user_address)\n        }\n \n        /// @dev Check whether an address is registered as a voter\n        fn is_voter_registered(self: @ContractState, address: ContractAddress) -&gt; bool {\n            self.registered_voter.read(address)\n        }\n \n        /// @dev Submit a vote\n        fn vote(ref self: ContractState, vote: u8) {\n            assert!(vote == NO || vote == YES, &quot;VOTE_0_OR_1&quot;);\n            let caller: ContractAddress = get_caller_address();\n            self._assert_allowed(caller);\n            self.can_vote.write(caller, false);\n \n            if (vote == NO) {\n                self.no_votes.write(self.no_votes.read() + 1_u8);\n            }\n            if (vote == YES) {\n                self.yes_votes.write(self.yes_votes.read() + 1_u8);\n            }\n \n            self.emit(VoteCast { voter: caller, vote: vote, });\n        }\n    }\n \n    /// @dev Internal Functions implementation for the Vote contract\n    #[generate_trait]\n    impl InternalFunctions of InternalFunctionsTrait {\n        /// @dev Registers the voters and initializes their voting status to true (can vote)\n        fn _register_voters(\n            ref self: ContractState,\n            voter_1: ContractAddress,\n            voter_2: ContractAddress,\n            voter_3: ContractAddress\n        ) {\n            self.registered_voter.write(voter_1, true);\n            self.can_vote.write(voter_1, true);\n \n            self.registered_voter.write(voter_2, true);\n            self.can_vote.write(voter_2, true);\n \n            self.registered_voter.write(voter_3, true);\n            self.can_vote.write(voter_3, true);\n        }\n    }\n \n    /// @dev Asserts implementation for the Vote contract\n    #[generate_trait]\n    impl AssertsImpl of AssertsTrait {\n        // @dev Internal function that checks if an address is allowed to vote\n        fn _assert_allowed(ref self: ContractState, address: ContractAddress) {\n            let is_voter: bool = self.registered_voter.read((address));\n            let can_vote: bool = self.can_vote.read((address));\n \n            if (can_vote == false) {\n                self.emit(UnauthorizedAttempt { unauthorized_address: address, });\n            }\n \n            assert!(is_voter == true, &quot;USER_NOT_REGISTERED&quot;);\n            assert!(can_vote == true, &quot;USER_ALREADY_VOTED&quot;);\n        }\n    }\n \n    /// @dev Implement the VotingResultTrait for the Vote contract\n    #[generate_trait]\n    impl VoteResultFunctionsImpl of VoteResultFunctionsTrait {\n        // @dev Internal function to get the voting results (yes and no vote counts)\n        fn _get_voting_result(self: @ContractState) -&gt; (u8, u8) {\n            let n_yes: u8 = self.yes_votes.read();\n            let n_no: u8 = self.no_votes.read();\n \n            (n_yes, n_no)\n        }\n \n        // @dev Internal function to calculate the voting results in percentage\n        fn _get_voting_result_in_percentage(self: @ContractState) -&gt; (u8, u8) {\n            let n_yes: u8 = self.yes_votes.read();\n            let n_no: u8 = self.no_votes.read();\n \n            let total_votes: u8 = n_yes + n_no;\n \n            if (total_votes == 0_u8) {\n                return (0, 0);\n            }\n            let yes_percentage: u8 = (n_yes * 100_u8) / (total_votes);\n            let no_percentage: u8 = (n_no * 100_u8) / (total_votes);\n \n            (yes_percentage, no_percentage)\n        }\n    }\n}\n","title":"Create a Vote project","titles":["Deploy your Cairo smart contract using Katana. Advanced Tutorial","Contract Deployment and Interaction"]},"218":{"href":"/tutorial/katana-starkli-scarb/main#compile-contract-and-environment-variables-setup","html":"\n<p>Compile your contract using scarb</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">scarb</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>Place the following environment variables in a .env file within the <code>src/</code> directory.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> STARKNET_ACCOUNT</span><span style=\"color:#F47067\">=</span><span style=\"color:#96D0FF\">katana-0        #A pre-funded account on the local development network.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#ADBAC7\"> STARKNET_RPC</span><span style=\"color:#F47067\">=</span><span style=\"color:#96D0FF\">http://0.0.0.0:5050 #To specify the network, targeting the local katana devnet.</span></span></code></pre></figure>\n<p>Then, ensure your project acknowledges the environment variables:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">source</span><span style=\"color:#96D0FF\"> .env</span></span></code></pre></figure>\n","isPage":false,"text":"\nCompile your contract using scarb\nscarb build\nPlace the following environment variables in a .env file within the src/ directory.\nexport STARKNET_ACCOUNT=katana-0        #A pre-funded account on the local development network.\nexport STARKNET_RPC=http://0.0.0.0:5050 #To specify the network, targeting the local katana devnet.\nThen, ensure your project acknowledges the environment variables:\nsource .env\n","title":"Compile contract and Environment variables setup","titles":["Deploy your Cairo smart contract using Katana. Advanced Tutorial","Contract Deployment and Interaction"]},"219":{"href":"/tutorial/katana-starkli-scarb/main#declare-contract","html":"\n<p>Make sure Katana is already running in separate terminal. Otherwise launch katana</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --disable-fee</span></span></code></pre></figure>\n<p>To declare your contract, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> declare target/dev/vote_Vote.contract_class.json</span></span></code></pre></figure>\n<p>Upon successful command execution, you&#x27;ll obtain a contract class hash: This unique hash serves as the identifier for your contract class within Starknet. For example:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">Class hash declared: 0x071092406ababbba5573bbff0074b068aaeb48c9a67ec66abe982ab19bc6997b</span></span></code></pre></figure>\n","isPage":false,"text":"\nMake sure Katana is already running in separate terminal. Otherwise launch katana\nkatana --disable-fee\nTo declare your contract, execute:\nstarkli declare target/dev/vote_Vote.contract_class.json\nUpon successful command execution, you&#x27;ll obtain a contract class hash: This unique hash serves as the identifier for your contract class within Starknet. For example:\nClass hash declared: 0x071092406ababbba5573bbff0074b068aaeb48c9a67ec66abe982ab19bc6997b\n","title":"Declare contract","titles":["Deploy your Cairo smart contract using Katana. Advanced Tutorial","Contract Deployment and Interaction"]},"220":{"href":"/tutorial/katana-starkli-scarb/main#deploy-contract","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> deploy </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">class_hash_of_the_contract_to_be_deploye</span><span style=\"color:#ADBAC7\">d</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">voter_0_addres</span><span style=\"color:#ADBAC7\">s</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">voter_1_addres</span><span style=\"color:#ADBAC7\">s</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">voter_2_addres</span><span style=\"color:#ADBAC7\">s</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<p>The first hexadecimal input is the class_hash of the contract, and the next three are the vote account addresses. We can define that the first vote account address corresponds to the address of <code>katana-0</code>, while the second and third vote account addresses are associated with <code>katana-1</code> and <code>katana-2</code>, respectively. Check the list of built-in accounts <a href=\"https://github.com/xJonathanLEI/starkli/blob/e9a28f1b6e37bcc9fc53b7b7130e935894856739/src/account.rs#L76\">here</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> deploy </span><span style=\"color:#6CB6FF\">0x071092406ababbba5573bbff0074b068aaeb48c9a67ec66abe982ab19bc6997b</span><span style=\"color:#6CB6FF\"> 0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03</span><span style=\"color:#6CB6FF\"> 0x2d71e9c974539bb3ffb4b115e66a23d0f62a641ea66c4016e903454c8753bbc</span><span style=\"color:#6CB6FF\"> 0x6b86e40118f29ebe393a75469b4d926c7a44c2e2681b6d319520b7c1156d114</span></span></code></pre></figure>\n<p>After running, expect an output similar to:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">Deploying class 0x071092406ababbba5573bbff0074b068aaeb48c9a67ec66abe982ab19bc6997b with salt 0x04baae9a396c3ce27a45b201528ec13b366c25960d640a9a32a8736814d9d8c2...</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">The contract will be deployed at address 0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Contract deployment transaction: 0x071d6b51e52febfaf2e3ed7dbbf1416190f019d80c73b1bf707d375374ab7cc5</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Contract deployed:</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15</span></span></code></pre></figure>\n","isPage":false,"text":"\nstarkli deploy &lt;class_hash_of_the_contract_to_be_deployed&gt; &lt;voter_0_address&gt; &lt;voter_1_address&gt; &lt;voter_2_address&gt;\nThe first hexadecimal input is the class_hash of the contract, and the next three are the vote account addresses. We can define that the first vote account address corresponds to the address of katana-0, while the second and third vote account addresses are associated with katana-1 and katana-2, respectively. Check the list of built-in accounts here.\nstarkli deploy 0x071092406ababbba5573bbff0074b068aaeb48c9a67ec66abe982ab19bc6997b 0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03 0x2d71e9c974539bb3ffb4b115e66a23d0f62a641ea66c4016e903454c8753bbc 0x6b86e40118f29ebe393a75469b4d926c7a44c2e2681b6d319520b7c1156d114\nAfter running, expect an output similar to:\nDeploying class 0x071092406ababbba5573bbff0074b068aaeb48c9a67ec66abe982ab19bc6997b with salt 0x04baae9a396c3ce27a45b201528ec13b366c25960d640a9a32a8736814d9d8c2...\nThe contract will be deployed at address 0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15\nContract deployment transaction: 0x071d6b51e52febfaf2e3ed7dbbf1416190f019d80c73b1bf707d375374ab7cc5\nContract deployed:\n0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15\n","title":"Deploy contract","titles":["Deploy your Cairo smart contract using Katana. Advanced Tutorial","Contract Deployment and Interaction"]},"221":{"href":"/tutorial/katana-starkli-scarb/main#call-contract-only-read-state","html":"\n<p>The first parameter is the contract address, the second parameter is the function to be called, and the third parameter is the function parameter. Let&#x27;s pass the address of <code>Katana-0</code> account</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> call </span><span style=\"color:#6CB6FF\">0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15</span><span style=\"color:#96D0FF\"> voter_can_vote </span><span style=\"color:#6CB6FF\">0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03</span></span></code></pre></figure>\n<p>After running, expect an output similar to:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">[</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">    &quot;0x0000000000000000000000000000000000000000000000000000000000000001&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">]</span></span></code></pre></figure>\n<p><code>1</code> means this user address can vote.</p>\n","isPage":false,"text":"\nThe first parameter is the contract address, the second parameter is the function to be called, and the third parameter is the function parameter. Let&#x27;s pass the address of Katana-0 account\nstarkli call 0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15 voter_can_vote 0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03\nAfter running, expect an output similar to:\n[\n    &quot;0x0000000000000000000000000000000000000000000000000000000000000001&quot;\n]\n1 means this user address can vote.\n","title":"Call contract [only read state]","titles":["Deploy your Cairo smart contract using Katana. Advanced Tutorial","Contract Deployment and Interaction"]},"222":{"href":"/tutorial/katana-starkli-scarb/main#invoke-contract-can-write-state","html":"\n<p>The first parameter is the contract address, the second parameter is the function to be invoked, and the third parameter is the function parameter. Let&#x27;s vote <code>Yes</code> with <code>katana-0</code> user</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> invoke </span><span style=\"color:#6CB6FF\">0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15</span><span style=\"color:#96D0FF\"> vote </span><span style=\"color:#6CB6FF\">1</span></span></code></pre></figure>\n<p>Now let&#x27;s vote <code>No</code> with <code>katana-1</code> user</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> invoke </span><span style=\"color:#6CB6FF\">0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15</span><span style=\"color:#96D0FF\"> vote </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#96D0FF\"> --account katana-1</span></span></code></pre></figure>\n<p>Let&#x27;s try to vote again with <code>katana-0</code> user</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> invoke </span><span style=\"color:#6CB6FF\">0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15</span><span style=\"color:#96D0FF\"> vote </span><span style=\"color:#6CB6FF\">0</span></span></code></pre></figure>\n<p>Since the same user/signer cannot vote repeatedly, <code>Katana</code> will report an error.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">Transaction execution error: &quot;Error in the called contract (0x06162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03):</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Error at pc=0:4573:</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Got an exception while executing a hint: Hint Error: Execution failed. Failure reason: 0x555345525f414c52454144595f564f544544 (&#x27;USER_ALREADY_VOTED&#x27;).</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Cairo traceback (most recent call last):</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Unknown location (pc=0:67)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Unknown location (pc=0:1835)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Unknown location (pc=0:2478)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Unknown location (pc=0:3255)</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Unknown location (pc=0:3795)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Error in the called contract (0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15):</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">Execution failed. Failure reason: 0x555345525f414c52454144595f564f544544 (&#x27;USER_ALREADY_VOTED&#x27;).</span></span></code></pre></figure>\n<ol start=\"7\">\n<li>Query transaction</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">### starkli transaction &lt;TRANSACTION_HASH&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">starkli</span><span style=\"color:#96D0FF\"> transaction </span><span style=\"color:#6CB6FF\">0x071d6b51e52febfaf2e3ed7dbbf1416190f019d80c73b1bf707d375374ab7cc5</span></span></code></pre></figure>\n<p>All the above interaction processes can be seen on the katana client. Pay attention to the status changes of katana at each step.</p>","isPage":false,"text":"\nThe first parameter is the contract address, the second parameter is the function to be invoked, and the third parameter is the function parameter. Let&#x27;s vote Yes with katana-0 user\nstarkli invoke 0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15 vote 1\nNow let&#x27;s vote No with katana-1 user\nstarkli invoke 0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15 vote 0 --account katana-1\nLet&#x27;s try to vote again with katana-0 user\nstarkli invoke 0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15 vote 0\nSince the same user/signer cannot vote repeatedly, Katana will report an error.\nTransaction execution error: &quot;Error in the called contract (0x06162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03):\nError at pc=0:4573:\nGot an exception while executing a hint: Hint Error: Execution failed. Failure reason: 0x555345525f414c52454144595f564f544544 (&#x27;USER_ALREADY_VOTED&#x27;).\nCairo traceback (most recent call last):\nUnknown location (pc=0:67)\nUnknown location (pc=0:1835)\nUnknown location (pc=0:2478)\nUnknown location (pc=0:3255)\nUnknown location (pc=0:3795)\n \nError in the called contract (0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15):\nExecution failed. Failure reason: 0x555345525f414c52454144595f564f544544 (&#x27;USER_ALREADY_VOTED&#x27;).\n\nQuery transaction\n\n### starkli transaction &lt;TRANSACTION_HASH&gt;\nstarkli transaction 0x071d6b51e52febfaf2e3ed7dbbf1416190f019d80c73b1bf707d375374ab7cc5\nAll the above interaction processes can be seen on the katana client. Pay attention to the status changes of katana at each step.","title":"Invoke contract [can write state]","titles":["Deploy your Cairo smart contract using Katana. Advanced Tutorial","Contract Deployment and Interaction"]},"223":{"href":"/tutorial/onchain-chess/0-setup#0-setup","html":"</header>\n<p><em>Before starting recommend following the <a href=\"/cairo/hello-dojo.md\"><code>hello-dojo</code></a> chapter to gain a basic understanding of the Dojo game.</em></p>\n","isPage":true,"text":"\nBefore starting recommend following the hello-dojo chapter to gain a basic understanding of the Dojo game.\n","title":"0. Setup","titles":[]},"224":{"href":"/tutorial/onchain-chess/0-setup#initializing-the-project","html":"\n<p>Create and initialize a new Dojo project. You can name your project what you want.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> init chess</span></span></code></pre></figure>\n","isPage":false,"text":"\nCreate and initialize a new Dojo project. You can name your project what you want.\nsozo init chess\n","title":"Initializing the Project","titles":["0. Setup"]},"225":{"href":"/tutorial/onchain-chess/0-setup#cleaning-up-the-boilerplate","html":"\n<p>The project comes with a lot of boilerplate codes. Clear it all. Make sure your directory looks like this</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark-dimmed\"><code data-language=\"shell\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">├──</span><span style=\"color:#96D0FF\"> README.md</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">├──</span><span style=\"color:#96D0FF\"> Scarb.toml</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">└──</span><span style=\"color:#96D0FF\"> src</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> actions.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> lib.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> models</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   ├── game.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   ├── piece.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   └── player.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> models.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> tests</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   ├── integration.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   └── units.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    └──</span><span style=\"color:#96D0FF\"> tests.cairo</span></span></code></pre></figure>\n<p>Remodel your <code>lib.cairo</code>, to look like this :</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> actions</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> models</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> tests</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>Remodel your <code>models.cairo</code>, to look like this :</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> game</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> piece</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> player</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>Remodel your <code>tests.cairo</code>, to look like this :</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> integration</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> units</span><span style=\"color:#ADBAC7\">;</span></span></code></pre></figure>\n<p>Make sure your <code>Scarb.toml</code> looks like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">package</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cairo-version = </span><span style=\"color:#96D0FF\">&quot;2.5.4&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;chess&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">version = </span><span style=\"color:#96D0FF\">&quot;0.6.0-alpha.7&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">cairo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">sierra-replace-ids = </span><span style=\"color:#6CB6FF\">true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, tag = </span><span style=\"color:#96D0FF\">&quot;v0.6.0-alpha.7&quot;</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[[</span><span style=\"color:#F69D50\">target</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">initializer_class_hash = </span><span style=\"color:#96D0FF\">&quot;0xbeef&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">env</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;http://localhost:5050/&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Default account for katana with seed = 0</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;0x1800000000300000180000000000030000000000003006001800006600&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">world_address = </span><span style=\"color:#96D0FF\">&quot;0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8&quot;</span></span></code></pre></figure>\n<p>Compile your project with:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe project comes with a lot of boilerplate codes. Clear it all. Make sure your directory looks like this\n├── README.md\n├── Scarb.toml\n└── src\n    ├── actions.cairo\n    ├── lib.cairo\n    ├── models\n    │   ├── game.cairo\n    │   ├── piece.cairo\n    │   └── player.cairo\n    ├── models.cairo\n    ├── tests\n    │   ├── integration.cairo\n    │   └── units.cairo\n    └── tests.cairo\nRemodel your lib.cairo, to look like this :\nmod actions;\nmod models;\nmod tests;\nRemodel your models.cairo, to look like this :\nmod game;\nmod piece;\nmod player;\nRemodel your tests.cairo, to look like this :\nmod integration;\nmod units;\nMake sure your Scarb.toml looks like this:\n[package]\ncairo-version = &quot;2.5.4&quot;\nname = &quot;chess&quot;\nversion = &quot;0.6.0-alpha.7&quot;\n \n[cairo]\nsierra-replace-ids = true\n \n[dependencies]\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, tag = &quot;v0.6.0-alpha.7&quot; }\n \n[[target.dojo]]\n \n[tool.dojo]\ninitializer_class_hash = &quot;0xbeef&quot;\n \n[tool.dojo.env]\nrpc_url = &quot;http://localhost:5050/&quot;\n# Default account for katana with seed = 0\naccount_address = &quot;0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03&quot;\nprivate_key = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;\nworld_address = &quot;0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8&quot;\nCompile your project with:\nsozo build\n","title":"Cleaning Up the Boilerplate","titles":["0. Setup"]},"226":{"href":"/tutorial/onchain-chess/0-setup#basic-models","html":"\n<p>While there are many ways to design a chess game using the ECS model, we&#x27;ll follow this approach:</p>\n<blockquote>\n<p>Every square of the chess board (e.g., A1) will be treated as an entity. If a piece exists on a square position, that position will hold that piece.</p>\n</blockquote>\n<p>First, add this basic <code>player</code> model to <code>models/player.cairo</code> file. If you are not familar with model syntax in Dojo engine, go back to this <a href=\"/cairo/models.md\">chapter</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Player</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    game_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    color</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Color</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">PartialEq</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Introspect</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">enum</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    White</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Black</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    None</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Second, we do the same for <code>game</code> model. Edit your <code>models/game.cairo</code> file and add this content.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">player</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Color</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Game</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    game_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    winner</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    white</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    black</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> GameTurn</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    game_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player_color</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Color</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Lastly we create <code>piece</code> model in our <code>models/piece.cairo</code> file.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">player</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Color</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Piece</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    game_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    position</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    color</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    piece_type</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Introspect</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    x</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    y</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">PartialEq</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Introspect</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">enum</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Pawn</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Knight</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Bishop</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Rook</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Queen</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    King</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    None</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nWhile there are many ways to design a chess game using the ECS model, we&#x27;ll follow this approach:\n\nEvery square of the chess board (e.g., A1) will be treated as an entity. If a piece exists on a square position, that position will hold that piece.\n\nFirst, add this basic player model to models/player.cairo file. If you are not familar with model syntax in Dojo engine, go back to this chapter.\nuse starknet::ContractAddress;\n \n#[derive(Model, Drop, Serde)]\nstruct Player {\n    #[key]\n    game_id: u32,\n    #[key]\n    address: ContractAddress,\n    color: Color\n}\n \n#[derive(Serde, Drop, Copy, PartialEq, Introspect)]\nenum Color {\n    White,\n    Black,\n    None,\n}\nSecond, we do the same for game model. Edit your models/game.cairo file and add this content.\nuse chess::models::player::Color;\nuse starknet::ContractAddress;\n \n#[derive(Model, Drop, Serde)]\nstruct Game {\n    #[key]\n    game_id: u32,\n    winner: Color,\n    white: ContractAddress,\n    black: ContractAddress\n}\n \n#[derive(Model, Drop, Serde)]\nstruct GameTurn {\n    #[key]\n    game_id: u32,\n    player_color: Color\n}\nLastly we create piece model in our models/piece.cairo file.\nuse chess::models::player::Color;\nuse starknet::ContractAddress;\n \n#[derive(Model, Drop, Serde)]\nstruct Piece {\n    #[key]\n    game_id: u32,\n    #[key]\n    position: Vec2,\n    color: Color,\n    piece_type: PieceType,\n}\n \n#[derive(Copy, Drop, Serde, Introspect)]\nstruct Vec2 {\n    x: u32,\n    y: u32\n}\n \n#[derive(Serde, Drop, Copy, PartialEq, Introspect)]\nenum PieceType {\n    Pawn,\n    Knight,\n    Bishop,\n    Rook,\n    Queen,\n    King,\n    None,\n}\n","title":"Basic Models","titles":["0. Setup"]},"227":{"href":"/tutorial/onchain-chess/0-setup#basic-systems","html":"\n<p>Starting from the next chapter, you will implement the <code>actions.cairo</code> file. This is where our game logic/contract will reside.</p>\n<p>For now, <code>actions.cairo</code> should look like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">contract]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> actions</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>It should be noted that Systems function are contract methods, by implication, rather than implementing the game logic in systems, we are implementing it in a contract.</p>\n","isPage":false,"text":"\nStarting from the next chapter, you will implement the actions.cairo file. This is where our game logic/contract will reside.\nFor now, actions.cairo should look like this:\n#[dojo::contract]\nmod actions {\n}\nIt should be noted that Systems function are contract methods, by implication, rather than implementing the game logic in systems, we are implementing it in a contract.\n","title":"Basic systems","titles":["0. Setup"]},"228":{"href":"/tutorial/onchain-chess/0-setup#compile-your-project","html":"\n<p>Now try <code>sozo build</code> to build.</p>\n<p>Complied? Great! then let&#x27;s move on. If not fix the issues, so that you can run the <code>sozo build</code> command successfully.</p>\n","isPage":false,"text":"\nNow try sozo build to build.\nComplied? Great! then let&#x27;s move on. If not fix the issues, so that you can run the sozo build command successfully.\n","title":"Compile your project","titles":["0. Setup"]},"229":{"href":"/tutorial/onchain-chess/0-setup#implement-traits-for-models","html":"\n<p>Before you move on, implement traits for models so we can use them in the next chapter when creating the action contract.</p>\n","isPage":false,"text":"\nBefore you move on, implement traits for models so we can use them in the next chapter when creating the action contract.\n","title":"Implement Traits for models","titles":["0. Setup"]},"230":{"href":"/tutorial/onchain-chess/0-setup#requirements","html":"\n<p>Firt we have to define the following traits for <code>Game</code>, <code>Player</code>, <code>Piece</code> models respectively.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> GameTurnTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> next_turn</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">GameTurn</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> PlayerTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">fn</span><span style=\"color:#DCBDFB\"> is_not_my_piece</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">Player</span><span style=\"color:#ADBAC7\">, piece_color</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> PieceTrait</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">fn</span><span style=\"color:#DCBDFB\"> is_out_of_board</span><span style=\"color:#ADBAC7\">(next_position</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">fn</span><span style=\"color:#DCBDFB\"> is_right_piece_move</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F47067\"> @</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">, next_position</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Try to implement this code by yourself, Otherwise</p>\n<details><summary>Click to see full <code>models.cairo</code> code</summary><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\"><code data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// code for player.cairo file, paste it below the code you already have</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">trait PlayerTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_not_my_piece</span><span style=\"color:#ADBAC7\">(self: @Player, piece_color: Color) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">impl PalyerImpl of PlayerTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_not_my_piece</span><span style=\"color:#ADBAC7\">(self: @Player, piece_color: Color) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        *</span><span style=\"color:#ADBAC7\">self.color </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> piece_color</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// code for game.cairo file, paste it below the code you already have</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">trait GameTurnTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">next_turn</span><span style=\"color:#ADBAC7\">(self: @GameTurn) -&gt; Color;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">impl GameTurnImpl of GameTurnTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">next_turn</span><span style=\"color:#ADBAC7\">(self: @GameTurn) -&gt; Color {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        match self.player_color {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            Color::White </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> Color::Black,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            Color::Black </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> Color::White,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            Color::None </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#DCBDFB\"> panic</span><span style=\"color:#ADBAC7\">(array</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">[</span><span style=\"color:#96D0FF\">&#x27;Illegal turn&#x27;</span><span style=\"color:#ADBAC7\">])</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// code for piece.cairo file, paste it below the code you already have</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">trait PieceTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_out_of_board</span><span style=\"color:#ADBAC7\">(next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_right_piece_move</span><span style=\"color:#ADBAC7\">(self: @Piece, next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">impl PieceImpl of PieceTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_out_of_board</span><span style=\"color:#ADBAC7\">(next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        next_position.x </span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> 7</span><span style=\"color:#F47067\"> ||</span><span style=\"color:#ADBAC7\"> next_position.y </span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> 7</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_right_piece_move</span><span style=\"color:#ADBAC7\">(self: @Piece, next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let n_x </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_position.x;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let n_y </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_position.y;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        assert</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            !</span><span style=\"color:#ADBAC7\">(n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y), </span><span style=\"color:#96D0FF\">&quot;Cannot move same position &quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        );        match self.piece_type {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Pawn </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                match self.color {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    Color::White </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    Color::Black </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    Color::None </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#DCBDFB\"> panic</span><span style=\"color:#ADBAC7\">(array</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">[</span><span style=\"color:#96D0FF\">&#x27;Should not move empty piece&#x27;</span><span style=\"color:#ADBAC7\">]),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Knight </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> { n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Bishop </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Rook </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Queen </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::King </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::None </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#DCBDFB\"> panic</span><span style=\"color:#ADBAC7\">(array</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">[</span><span style=\"color:#96D0FF\">&#x27;Should not move empty piece&#x27;</span><span style=\"color:#ADBAC7\">]),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></details>\n<p>This tutorial is extracted from <a href=\"https://github.com/dojoengine/origami/tree/main/examples/chess\">here</a></p>\n<p>Congratulations! You&#x27;ve completed the basic setup for building an on-chain chess game 🎉</p>","isPage":false,"text":"\nFirt we have to define the following traits for Game, Player, Piece models respectively.\ntrait GameTurnTrait {\n    fn next_turn(self: @GameTurn) -&gt; Color;\n}\n \ntrait PlayerTrait {\nfn is_not_my_piece(self: @Player, piece_color: Color) -&gt; bool;\n}\n \ntrait PieceTrait {\nfn is_out_of_board(next_position: Vec2) -&gt; bool;\nfn is_right_piece_move(self: @Piece, next_position: Vec2) -&gt; bool;\n}\nTry to implement this code by yourself, Otherwise\nClick to see full models.cairo code// code for player.cairo file, paste it below the code you already have\ntrait PlayerTrait {\n    fn is_not_my_piece(self: @Player, piece_color: Color) -&gt; bool;\n}\n \nimpl PalyerImpl of PlayerTrait {\n    fn is_not_my_piece(self: @Player, piece_color: Color) -&gt; bool {\n        *self.color != piece_color\n    }\n}\n \n// code for game.cairo file, paste it below the code you already have\ntrait GameTurnTrait {\n    fn next_turn(self: @GameTurn) -&gt; Color;\n}\nimpl GameTurnImpl of GameTurnTrait {\n    fn next_turn(self: @GameTurn) -&gt; Color {\n        match self.player_color {\n            Color::White =&gt; Color::Black,\n            Color::Black =&gt; Color::White,\n            Color::None =&gt; panic(array![&#x27;Illegal turn&#x27;])\n        }\n    }\n}\n \n// code for piece.cairo file, paste it below the code you already have\ntrait PieceTrait {\n    fn is_out_of_board(next_position: Vec2) -&gt; bool;\n    fn is_right_piece_move(self: @Piece, next_position: Vec2) -&gt; bool;\n}\n \nimpl PieceImpl of PieceTrait {\n    fn is_out_of_board(next_position: Vec2) -&gt; bool {\n        next_position.x &gt; 7 || next_position.y &gt; 7\n    }\n \n    fn is_right_piece_move(self: @Piece, next_position: Vec2) -&gt; bool {\n        let n_x = next_position.x;\n        let n_y = next_position.y;\n        assert!(\n            !(n_x == *self.position.x &amp;&amp; n_y == *self.position.y), &quot;Cannot move same position &quot;\n        );        match self.piece_type {\n            PieceType::Pawn =&gt; {\n                match self.color {\n                    Color::White =&gt; {\n                        (n_x == *self.position.x &amp;&amp; n_y == *self.position.y + 1)\n                            || (n_x == *self.position.x &amp;&amp; n_y == *self.position.y + 2)\n                            || (n_x == *self.position.x + 1 &amp;&amp; n_y == *self.position.y + 1)\n                            || (n_x == *self.position.x - 1 &amp;&amp; n_y == *self.position.y + 1)\n                    },\n                    Color::Black =&gt; {\n                        (n_x == *self.position.x &amp;&amp; n_y == *self.position.y - 1)\n                            || (n_x == *self.position.x &amp;&amp; n_y == *self.position.y - 2)\n                            || (n_x == *self.position.x + 1 &amp;&amp; n_y == *self.position.y - 1)\n                            || (n_x == *self.position.x - 1 &amp;&amp; n_y == *self.position.y - 1)\n                    },\n                    Color::None =&gt; panic(array![&#x27;Should not move empty piece&#x27;]),\n                }\n            },\n            PieceType::Knight =&gt; { n_x == *self.position.x + 2 &amp;&amp; n_y == *self.position.y + 1 },\n            PieceType::Bishop =&gt; {\n                (n_x &lt;= *self.position.x &amp;&amp; n_y &lt;= *self.position.y &amp;&amp; *self.position.y\n                    - n_y == *self.position.x\n                    - n_x)\n                    || (n_x &lt;= *self.position.x &amp;&amp; n_y &gt;= *self.position.y &amp;&amp; *self.position.y\n                        - n_y == *self.position.x\n                        - n_x)\n                    || (n_x &gt;= *self.position.x &amp;&amp; n_y &lt;= *self.position.y &amp;&amp; *self.position.y\n                        - n_y == *self.position.x\n                        - n_x)\n                    || (n_x &gt;= *self.position.x &amp;&amp; n_y &gt;= *self.position.y &amp;&amp; *self.position.y\n                        - n_y == *self.position.x\n                        - n_x)\n            },\n            PieceType::Rook =&gt; {\n                (n_x == *self.position.x || n_y != *self.position.y)\n                    || (n_x != *self.position.x || n_y == *self.position.y)\n            },\n            PieceType::Queen =&gt; {\n                (n_x == *self.position.x || n_y != *self.position.y)\n                    || (n_x != *self.position.x || n_y == *self.position.y)\n                    || (n_x != *self.position.x || n_y != *self.position.y)\n            },\n            PieceType::King =&gt; {\n                (n_x &lt;= *self.position.x + 1 &amp;&amp; n_y &lt;= *self.position.y + 1)\n                    || (n_x &lt;= *self.position.x + 1 &amp;&amp; n_y &lt;= *self.position.y - 1)\n                    || (n_x &lt;= *self.position.x - 1 &amp;&amp; n_y &lt;= *self.position.y + 1)\n                    || (n_x &lt;= *self.position.x - 1 &amp;&amp; n_y &lt;= *self.position.y - 1)\n            },\n            PieceType::None =&gt; panic(array![&#x27;Should not move empty piece&#x27;]),\n        }\n    }\n}\nThis tutorial is extracted from here\nCongratulations! You&#x27;ve completed the basic setup for building an on-chain chess game 🎉","title":"Requirements","titles":["0. Setup","Implement Traits for models"]},"231":{"href":"/tutorial/onchain-chess/2-move#2-move-function","html":"</header>\n<ol>\n<li>Write a <code>move</code> function that accepts the <code>current position</code>, <code>next position</code>, <code>caller address</code>, and <code>game_id</code>. The <code>move</code> function should look like this:</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    impl</span><span style=\"color:#F69D50\"> IActionsImpl</span><span style=\"color:#ADBAC7\"> of </span><span style=\"color:#F69D50\">IActions</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">ContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> spawn</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            world</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> IWorldDispatcher</span><span style=\"color:#ADBAC7\">, white_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">, black_address</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F69D50\"> u32</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Rest of code</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        fn</span><span style=\"color:#DCBDFB\"> move</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            world</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> IWorldDispatcher</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            curr_position</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            next_position</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            caller</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span><span style=\"color:#768390\"> //player</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            game_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u32</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#F47067\"> mut</span><span style=\"color:#ADBAC7\"> current_piece </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_position), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // check if next_position is out of board or not</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert!</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">!</span><span style=\"color:#F69D50\">PieceTrait</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">is_out_of_board</span><span style=\"color:#ADBAC7\">(next_position), </span><span style=\"color:#96D0FF\">&quot;Should be inside board&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // check if this is the right move for this piece type</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                current_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">is_right_piece_move</span><span style=\"color:#ADBAC7\">(next_position), </span><span style=\"color:#96D0FF\">&quot;Illegal move for type of piece&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Get piece data from to next_position in the board</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#F47067\"> mut</span><span style=\"color:#ADBAC7\"> next_position_piece </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, next_position), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#ADBAC7\"> player </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, caller), (</span><span style=\"color:#F69D50\">Player</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // check if there is already a piece in next_position</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert!</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                next_position_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> player</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">is_not_my_piece</span><span style=\"color:#ADBAC7\">(next_position_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color),</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">                &quot;Already same color piece exist&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            next_position_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> current_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            next_position_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> player</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // make current_piece piece none</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            current_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            current_piece</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(world, (next_position_piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(world, (current_piece));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // change turn</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            let</span><span style=\"color:#F47067\"> mut</span><span style=\"color:#ADBAC7\"> game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, game_id, (</span><span style=\"color:#F69D50\">GameTurn</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            game_turn</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">player_color </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> game_turn</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">next_turn</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            set!</span><span style=\"color:#ADBAC7\">(world, (game_turn));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span></code></pre></figure>\n<ol start=\"2\">\n<li>\n<p>Run <code>sozo build</code> to compile the code.</p>\n<p>Great, Now we can start testing our functions</p>\n</li>\n</ol>\n","isPage":true,"text":"\n\nWrite a move function that accepts the current position, next position, caller address, and game_id. The move function should look like this:\n\n    #[abi(embed_v0)]\n    impl IActionsImpl of IActions&lt;ContractState&gt; {\n        fn spawn(\n            world: IWorldDispatcher, white_address: ContractAddress, black_address: ContractAddress\n        ) -&gt; u32 {\n            // Rest of code\n        }\n        fn move(\n            world: IWorldDispatcher,\n            curr_position: Vec2,\n            next_position: Vec2,\n            caller: ContractAddress, //player\n            game_id: u32\n        ) {\n            let mut current_piece = get!(world, (game_id, curr_position), (Piece));\n            // check if next_position is out of board or not\n            assert!(!PieceTrait::is_out_of_board(next_position), &quot;Should be inside board&quot;);\n \n            // check if this is the right move for this piece type\n            assert!(\n                current_piece.is_right_piece_move(next_position), &quot;Illegal move for type of piece&quot;\n            );\n            // Get piece data from to next_position in the board\n            let mut next_position_piece = get!(world, (game_id, next_position), (Piece));\n \n            let player = get!(world, (game_id, caller), (Player));\n            // check if there is already a piece in next_position\n            assert!(\n                next_position_piece.piece_type == PieceType::None\n                    || player.is_not_my_piece(next_position_piece.color),\n                &quot;Already same color piece exist&quot;\n            );\n \n            next_position_piece.piece_type = current_piece.piece_type;\n            next_position_piece.color = player.color;\n            // make current_piece piece none\n            current_piece.piece_type = PieceType::None;\n            current_piece.color = Color::None;\n            set!(world, (next_position_piece));\n            set!(world, (current_piece));\n \n            // change turn\n            let mut game_turn = get!(world, game_id, (GameTurn));\n            game_turn.player_color = game_turn.next_turn();\n            set!(world, (game_turn));\n        }\n    }\n\n\nRun sozo build to compile the code.\nGreat, Now we can start testing our functions\n\n\n","title":"2 Move function","titles":[]},"232":{"href":"/tutorial/onchain-chess/2-move#test-flow","html":"\n<ul>\n<li>Spawn the test world (<code>spawn_test_world</code>) that imports the models in testing.</li>\n<li>Deploy actions contract</li>\n<li>Interact with <code>spawn</code> function in the <code>actions</code> contract by providing white and black player&#x27;s wallet addresses as inputs.</li>\n<li>Retrieve the game entity and piece entity created in <code>actions</code> contract.</li>\n<li>Ensure the game has been correctly created.</li>\n<li>Verify that each <code>Piece</code> is located in the correct position.</li>\n</ul>\n","isPage":false,"text":"\n\nSpawn the test world (spawn_test_world) that imports the models in testing.\nDeploy actions contract\nInteract with spawn function in the actions contract by providing white and black player&#x27;s wallet addresses as inputs.\nRetrieve the game entity and piece entity created in actions contract.\nEnsure the game has been correctly created.\nVerify that each Piece is located in the correct position.\n\n","title":"Test Flow","titles":["2 Move function"]},"233":{"href":"/tutorial/onchain-chess/2-move#unit-tests","html":"\n<ul>\n<li>Copy the test below and add it to your <code>tests/units.cairo</code> file.</li>\n</ul>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[cfg(test)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> tests</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">ContractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">test_utils</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{spawn_test_world, deploy_contract};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">world</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">IWorldDispatcher</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">IWorldDispatcherTrait</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">player</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Player</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Color</span><span style=\"color:#ADBAC7\">, player};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">piece</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">PieceType</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\">, piece};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">game</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Game</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">GameTurn</span><span style=\"color:#ADBAC7\">, game, game_turn};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">actions</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{actions, </span><span style=\"color:#F69D50\">IActionsDispatcher</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">IActionsDispatcherTrait</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // helper setup function</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">IWorldDispatcher</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">IActionsDispatcher</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // models</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#F47067\"> mut</span><span style=\"color:#ADBAC7\"> models </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> array!</span><span style=\"color:#ADBAC7\">[</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            game</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            player</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            game_turn</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            piece</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ];</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // deploy world with models</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> world </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> spawn_test_world</span><span style=\"color:#ADBAC7\">(models);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // deploy systems contract</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> contract_address </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> world</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            .</span><span style=\"color:#DCBDFB\">deploy_contract</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;salt&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">actions</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">try_into</span><span style=\"color:#ADBAC7\">()</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">unwrap</span><span style=\"color:#ADBAC7\">());</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> actions_system </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> IActionsDispatcher</span><span style=\"color:#ADBAC7\"> { contract_address };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        (world, actions_system)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[available_gas(3000000000000000)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> test_spawn</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> white </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x01</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> black </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x02</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> (world, actions_system) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //system calls</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(white, black);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //get game</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> game </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, game_id, (</span><span style=\"color:#F69D50\">Game</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, game_id, (</span><span style=\"color:#F69D50\">GameTurn</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(game_turn</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">player_color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white turn&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(game</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">white </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> white, </span><span style=\"color:#96D0FF\">&quot;white address is incorrect&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(game</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">black </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> black, </span><span style=\"color:#96D0FF\">&quot;black address is incorrect&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //get a1 piece</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> a1 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a1</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Rook</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Rook&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a1</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a1</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[available_gas(3000000000000000)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> test_move</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> white </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x01</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> black </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x02</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> (world, actions_system) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(white, black);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> a2 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a2</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a2</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color piece 1&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a2</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> next_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, game_id, (</span><span style=\"color:#F69D50\">GameTurn</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(game_turn</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">player_color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white player turn&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(curr_pos, next_pos, white</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> c3 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(c3</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(c3</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color piece 2&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(c3</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, game_id, (</span><span style=\"color:#F69D50\">GameTurn</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(game_turn</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">player_color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Black</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be black player turn&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\n\nCopy the test below and add it to your tests/units.cairo file.\n\n#[cfg(test)]\nmod tests {\n    use starknet::ContractAddress;\n    use dojo::test_utils::{spawn_test_world, deploy_contract};\n    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};\n    use chess::models::player::{Player, Color, player};\n    use chess::models::piece::{Piece, PieceType, Vec2, piece};\n    use chess::models::game::{Game, GameTurn, game, game_turn};\n    use chess::actions::{actions, IActionsDispatcher, IActionsDispatcherTrait};\n \n    // helper setup function\n    fn setup_world() -&gt; (IWorldDispatcher, IActionsDispatcher) {\n        // models\n        let mut models = array![\n            game::TEST_CLASS_HASH,\n            player::TEST_CLASS_HASH,\n            game_turn::TEST_CLASS_HASH,\n            piece::TEST_CLASS_HASH\n        ];\n        // deploy world with models\n        let world = spawn_test_world(models);\n \n        // deploy systems contract\n        let contract_address = world\n            .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());\n        let actions_system = IActionsDispatcher { contract_address };\n \n        (world, actions_system)\n    }\n \n    #[test]\n    #[available_gas(3000000000000000)]\n    fn test_spawn() {\n        let white = starknet::contract_address_const::&lt;0x01&gt;();\n        let black = starknet::contract_address_const::&lt;0x02&gt;();\n        let (world, actions_system) = setup_world();\n \n        //system calls\n        let game_id = actions_system.spawn(white, black);\n \n        //get game\n        let game = get!(world, game_id, (Game));\n        let game_turn = get!(world, game_id, (GameTurn));\n        assert!(game_turn.player_color == Color::White, &quot;should be white turn&quot;);\n        assert!(game.white == white, &quot;white address is incorrect&quot;);\n        assert!(game.black == black, &quot;black address is incorrect&quot;);\n \n        //get a1 piece\n        let curr_pos = Vec2 { x: 0, y: 0 };\n        let a1 = get!(world, (game_id, curr_pos), (Piece));\n        assert!(a1.piece_type == PieceType::Rook, &quot;should be Rook&quot;);\n        assert!(a1.color == Color::White, &quot;should be white color&quot;);\n        assert!(a1.piece_type != PieceType::None, &quot;should have piece&quot;);\n    }\n \n    #[test]\n    #[available_gas(3000000000000000)]\n    fn test_move() {\n        let white = starknet::contract_address_const::&lt;0x01&gt;();\n        let black = starknet::contract_address_const::&lt;0x02&gt;();\n \n        let (world, actions_system) = setup_world();\n        let game_id = actions_system.spawn(white, black);\n        let curr_pos = Vec2 { x: 0, y: 1 };\n        let a2 = get!(world, (game_id, curr_pos), (Piece));\n        assert!(a2.piece_type == PieceType::Pawn, &quot;should be Pawn&quot;);\n        assert!(a2.color == Color::White, &quot;should be white color piece 1&quot;);\n        assert!(a2.piece_type != PieceType::None, &quot;should have piece&quot;);\n \n        let next_pos = Vec2 { x: 0, y: 2 };\n        let game_turn = get!(world, game_id, (GameTurn));\n        assert!(game_turn.player_color == Color::White, &quot;should be white player turn&quot;);\n        actions_system.move(curr_pos, next_pos, white.into(), game_id);\n \n        let curr_pos = next_pos;\n        let c3 = get!(world, (game_id, curr_pos), (Piece));\n        assert!(c3.piece_type == PieceType::Pawn, &quot;should be Pawn&quot;);\n        assert!(c3.color == Color::White, &quot;should be white color piece 2&quot;);\n        assert!(c3.piece_type != PieceType::None, &quot;should have piece&quot;);\n \n        let game_turn = get!(world, game_id, (GameTurn));\n        assert!(game_turn.player_color == Color::Black, &quot;should be black player turn&quot;);\n    }\n}\n","title":"Unit Tests","titles":["2 Move function"]},"234":{"href":"/tutorial/onchain-chess/2-move#diving-into-the-code","html":"\n","isPage":false,"text":"\n","title":"Diving into the Code","titles":["2 Move function"]},"235":{"href":"/tutorial/onchain-chess/2-move#setup_world","html":"\n<p>We should list all models with each having CLASS_HASH as elements and then we deploy world to models with <code>spawn_test_world</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">    //models</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#F47067\"> mut</span><span style=\"color:#ADBAC7\"> models </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> array!</span><span style=\"color:#ADBAC7\">[</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            game</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            player</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            game_turn</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            piece</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ];</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    // deploy world with models</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> world </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> spawn_test_world</span><span style=\"color:#ADBAC7\">(models);</span></span></code></pre></figure>\n<p>After that, we deploy our system contracts, then we return our <code>world</code> and <code>actions_systems</code> dispatchers.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> contract_address </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> world</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        .</span><span style=\"color:#DCBDFB\">deploy_contract</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;salt&#x27;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">actions</span><span style=\"color:#F47067\">::</span><span style=\"color:#6CB6FF\">TEST_CLASS_HASH</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">try_into</span><span style=\"color:#ADBAC7\">()</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">unwrap</span><span style=\"color:#ADBAC7\">());</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> actions_system </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> IActionsDispatcher</span><span style=\"color:#ADBAC7\"> { contract_address };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    (world, actions_system)</span></span></code></pre></figure>\n","isPage":false,"text":"\nWe should list all models with each having CLASS_HASH as elements and then we deploy world to models with spawn_test_world\n    //models\n    let mut models = array![\n            game::TEST_CLASS_HASH,\n            player::TEST_CLASS_HASH,\n            game_turn::TEST_CLASS_HASH,\n            piece::TEST_CLASS_HASH\n        ];\n    // deploy world with models\n    let world = spawn_test_world(models);\nAfter that, we deploy our system contracts, then we return our world and actions_systems dispatchers.\n    let contract_address = world\n        .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());\n    let actions_system = IActionsDispatcher { contract_address };\n \n    (world, actions_system)\n","title":"setup_world","titles":["2 Move function","Diving into the Code"]},"236":{"href":"/tutorial/onchain-chess/2-move#test_spawn","html":"\n<p>First, we&#x27;ll set up the players address and their colors.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> white </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x01</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> black </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x02</span><span style=\"color:#ADBAC7\">&gt;();</span></span></code></pre></figure>\n<p>We use <code>spawn</code> function in <code>actions.cairo</code> to put our pieces on the board. Each square position holds a piece. The system&#x27;s <code>spawn</code> function needs some input i.e the addresses of the players.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">    // spawn</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(white, black);</span></span></code></pre></figure>\n<p>Then we check if the players got their setup address. After that we check if a White rook is at (0,0). Remember, to get a piece that exists on the position, you need to use the keys of the <code>Piece</code> model, which are <code>game_id</code>, and <code>curr_pos</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">    //get a1 square</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> a1 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert!</span><span style=\"color:#ADBAC7\">(a1</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Rook</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Rook&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert!</span><span style=\"color:#ADBAC7\">(a1</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert!</span><span style=\"color:#ADBAC7\">(a1</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece&quot;</span><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure>\n","isPage":false,"text":"\nFirst, we&#x27;ll set up the players address and their colors.\n    let white = starknet::contract_address_const::&lt;0x01&gt;();\n    let black = starknet::contract_address_const::&lt;0x02&gt;();\nWe use spawn function in actions.cairo to put our pieces on the board. Each square position holds a piece. The system&#x27;s spawn function needs some input i.e the addresses of the players.\n    // spawn\n    let game_id = actions_system.spawn(white, black);\nThen we check if the players got their setup address. After that we check if a White rook is at (0,0). Remember, to get a piece that exists on the position, you need to use the keys of the Piece model, which are game_id, and curr_pos.\n    //get a1 square\n    let curr_pos = Vec2 { x: 0, y: 0 };\n    let a1 = get!(world, (game_id, curr_pos), (Piece));\n    assert!(a1.piece_type == PieceType::Rook, &quot;should be Rook&quot;);\n    assert!(a1.color == Color::White, &quot;should be white color&quot;);\n    assert!(a1.piece_type != PieceType::None, &quot;should have piece&quot;);\n","title":"test_spawn","titles":["2 Move function","Diving into the Code"]},"237":{"href":"/tutorial/onchain-chess/2-move#test_move","html":"\n<p>Here, after setting up the board, we use <code>move</code> function in the contract to make moves. Provide the current position, the next position, the player&#x27;s address, and the game id.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">    //Move White Pawn to (0,2)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(curr_pos, next_pos, white</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span></code></pre></figure>\n<p>Then we check if a White Pawn is at the new position.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    let</span><span style=\"color:#ADBAC7\"> c3 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert!</span><span style=\"color:#ADBAC7\">(c3</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert!</span><span style=\"color:#ADBAC7\">(c3</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color piece 2&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert!</span><span style=\"color:#ADBAC7\">(c3</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece&quot;</span><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure>\n","isPage":false,"text":"\nHere, after setting up the board, we use move function in the contract to make moves. Provide the current position, the next position, the player&#x27;s address, and the game id.\n    //Move White Pawn to (0,2)\n    actions_system.move(curr_pos, next_pos, white.into(), game_id);\nThen we check if a White Pawn is at the new position.\n    let curr_pos = next_pos;\n    let c3 = get!(world, (game_id, curr_pos), (Piece));\n    assert!(c3.piece_type == PieceType::Pawn, &quot;should be Pawn&quot;);\n    assert!(c3.color == Color::White, &quot;should be white color piece 2&quot;);\n    assert!(c3.piece_type != PieceType::None, &quot;should have piece&quot;);\n","title":"test_move","titles":["2 Move function","Diving into the Code"]},"238":{"href":"/tutorial/onchain-chess/2-move#need-help","html":"\n<p>If you&#x27;re stuck, don&#x27;t hesitate to ask questions at the <a href=\"https://discord.gg/akd2yfuRS3\">Dojo community</a>!</p>","isPage":false,"text":"\nIf you&#x27;re stuck, don&#x27;t hesitate to ask questions at the Dojo community!","title":"Need help?","titles":["2 Move function"]},"239":{"href":"/tutorial/onchain-chess/3-test#3-test-contract","html":"</header>\n<p>In this chapter, we&#x27;ll use everything we&#x27;ve learned to run a full chess game scenario.</p>\n<p>Here&#x27;s what we&#x27;ll do in our test:</p>\n<ol>\n<li>Call spawn to setup <code>white_pawn</code> to (0,1) and <code>black_pawn</code> to (1,6)</li>\n<li>Move <code>white_pawn</code> to (0,3)</li>\n<li>Move <code>black_pawn</code> to (1,4)</li>\n<li>Move <code>white_pawn</code> to (1,4)</li>\n<li>Capture <code>black_pawn</code></li>\n</ol>\n<p>To place the pieces, use our <code>spawn</code> function in our <code>actions</code> contract. For moving them, use the <code>move</code> contract. Remember to check if a piece can be captured when using <code>move</code>.</p>\n<p>Before we get to the code, set up your integration test like this:</p>\n<ul>\n<li>Copy the test below and add it to your <code>tests/integration.cairo</code> file.</li>\n</ul>\n","isPage":true,"text":"\nIn this chapter, we&#x27;ll use everything we&#x27;ve learned to run a full chess game scenario.\nHere&#x27;s what we&#x27;ll do in our test:\n\nCall spawn to setup white_pawn to (0,1) and black_pawn to (1,6)\nMove white_pawn to (0,3)\nMove black_pawn to (1,4)\nMove white_pawn to (1,4)\nCapture black_pawn\n\nTo place the pieces, use our spawn function in our actions contract. For moving them, use the move contract. Remember to check if a piece can be captured when using move.\nBefore we get to the code, set up your integration test like this:\n\nCopy the test below and add it to your tests/integration.cairo file.\n\n","title":"3 Test Contract","titles":[]},"240":{"href":"/tutorial/onchain-chess/3-test#full-code","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">mod</span><span style=\"color:#F69D50\"> tests</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">piece</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">PieceType</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Vec2</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">world</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">IWorldDispatcherTrait</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">tests</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">units</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">tests</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">setup_world;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">actions</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">IActionsDispatcher</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">IActionsDispatcherTrait</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    use</span><span style=\"color:#F69D50\"> chess</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">models</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">player</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F69D50\">Color</span><span style=\"color:#ADBAC7\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[available_gas(3000000000000000)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> integration</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> white </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x01</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> black </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#DCBDFB\">contract_address_const</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#6CB6FF\">0x02</span><span style=\"color:#ADBAC7\">&gt;();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> (world, actions_system) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //system calls</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(white, black);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //White pawn is setup in (0,1)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> wp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> a2 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, wp_curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a2</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn in (0,1)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a2</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a2</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece in (0,1)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Black pawn is setup in (1,6)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> bp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 6</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> b7 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, bp_curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b7</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn in (1,6)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b7</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Black</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be black color&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b7</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece in (1,6)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Move White Pawn to (0,3)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> wp_next_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 0</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 3</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(wp_curr_pos, wp_next_pos, white</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //White pawn is now in (0,3)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> wp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> wp_next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> a4 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, wp_curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a4</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn in (0,3)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a4</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(a4</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece in (0,3)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Move black Pawn to (1,4)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> bp_next_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#F69D50\"> Vec2</span><span style=\"color:#ADBAC7\"> { x</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">, y</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\"> 4</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(bp_curr_pos, bp_next_pos, black</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Black pawn is now in (1,4)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> bp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> bp_next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> b5 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, bp_curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b5</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn in (1,4)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b5</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Black</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be black color&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b5</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece in (1,4)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // Move White Pawn to (1,4) and capture black pawn</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(wp_curr_pos, bp_curr_pos, white</span><span style=\"color:#F47067\">.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> wp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> bp_curr_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        let</span><span style=\"color:#ADBAC7\"> b5 </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> get!</span><span style=\"color:#ADBAC7\">(world, (game_id, wp_curr_pos), (</span><span style=\"color:#F69D50\">Piece</span><span style=\"color:#ADBAC7\">));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b5</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">Pawn</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be Pawn in (1,4)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b5</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">color </span><span style=\"color:#F47067\">==</span><span style=\"color:#F69D50\"> Color</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">White</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should be white color&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert!</span><span style=\"color:#ADBAC7\">(b5</span><span style=\"color:#F47067\">.</span><span style=\"color:#ADBAC7\">piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F69D50\"> PieceType</span><span style=\"color:#F47067\">::</span><span style=\"color:#F69D50\">None</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;should have piece in (1,4)&quot;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Keep moving pieces and checking if they&#x27;re in the right places.</p>\n","isPage":false,"text":"\nmod tests {\n    use chess::models::piece::{Piece, PieceType, Vec2};\n    use dojo::world::IWorldDispatcherTrait;\n    use chess::tests::units::tests::setup_world;\n    use chess::actions::{IActionsDispatcher, IActionsDispatcherTrait};\n    use chess::models::player::{Color};\n \n    #[test]\n    #[available_gas(3000000000000000)]\n    fn integration() {\n        let white = starknet::contract_address_const::&lt;0x01&gt;();\n        let black = starknet::contract_address_const::&lt;0x02&gt;();\n \n        let (world, actions_system) = setup_world();\n \n        //system calls\n        let game_id = actions_system.spawn(white, black);\n \n        //White pawn is setup in (0,1)\n        let wp_curr_pos = Vec2 { x: 0, y: 1 };\n        let a2 = get!(world, (game_id, wp_curr_pos), (Piece));\n        assert!(a2.piece_type == PieceType::Pawn, &quot;should be Pawn in (0,1)&quot;);\n        assert!(a2.color == Color::White, &quot;should be white color&quot;);\n        assert!(a2.piece_type != PieceType::None, &quot;should have piece in (0,1)&quot;);\n \n        //Black pawn is setup in (1,6)\n        let bp_curr_pos = Vec2 { x: 1, y: 6 };\n        let b7 = get!(world, (game_id, bp_curr_pos), (Piece));\n        assert!(b7.piece_type == PieceType::Pawn, &quot;should be Pawn in (1,6)&quot;);\n        assert!(b7.color == Color::Black, &quot;should be black color&quot;);\n        assert!(b7.piece_type != PieceType::None, &quot;should have piece in (1,6)&quot;);\n \n        //Move White Pawn to (0,3)\n        let wp_next_pos = Vec2 { x: 0, y: 3 };\n        actions_system.move(wp_curr_pos, wp_next_pos, white.into(), game_id);\n \n        //White pawn is now in (0,3)\n        let wp_curr_pos = wp_next_pos;\n        let a4 = get!(world, (game_id, wp_curr_pos), (Piece));\n        assert!(a4.piece_type == PieceType::Pawn, &quot;should be Pawn in (0,3)&quot;);\n        assert!(a4.color == Color::White, &quot;should be white color&quot;);\n        assert!(a4.piece_type != PieceType::None, &quot;should have piece in (0,3)&quot;);\n \n        //Move black Pawn to (1,4)\n        let bp_next_pos = Vec2 { x: 1, y: 4 };\n        actions_system.move(bp_curr_pos, bp_next_pos, black.into(), game_id);\n \n        //Black pawn is now in (1,4)\n        let bp_curr_pos = bp_next_pos;\n        let b5 = get!(world, (game_id, bp_curr_pos), (Piece));\n        assert!(b5.piece_type == PieceType::Pawn, &quot;should be Pawn in (1,4)&quot;);\n        assert!(b5.color == Color::Black, &quot;should be black color&quot;);\n        assert!(b5.piece_type != PieceType::None, &quot;should have piece in (1,4)&quot;);\n \n        // Move White Pawn to (1,4) and capture black pawn\n        actions_system.move(wp_curr_pos, bp_curr_pos, white.into(), game_id);\n \n        let wp_curr_pos = bp_curr_pos;\n        let b5 = get!(world, (game_id, wp_curr_pos), (Piece));\n        assert!(b5.piece_type == PieceType::Pawn, &quot;should be Pawn in (1,4)&quot;);\n        assert!(b5.color == Color::White, &quot;should be white color&quot;);\n        assert!(b5.piece_type != PieceType::None, &quot;should have piece in (1,4)&quot;);\n    }\n}\nKeep moving pieces and checking if they&#x27;re in the right places.\n","title":"Full Code","titles":["3 Test Contract"]},"241":{"href":"/tutorial/onchain-chess/3-test#congratulations","html":"\n<p>You&#x27;ve made the basic contracts for a chess game using the Dojo engine! This tutorial was just the beginning. There are many ways to make the game better, like optimizing parts, adding checks, or considering special cases. If you want to do more with this chess game, try these challenges:</p>\n<ul>\n<li>Add a checkmate feature. Our game doesn&#x27;t end now, so decide when it should!</li>\n<li>Include special moves like castling, En Passant Capture, or Pawn Promotion.</li>\n<li>Make your own chess rules! You could even create your own version of the <a href=\"https://immortal.game/\">immortal game</a></li>\n</ul>\n<p>Lastly, share your project with others in the <a href=\"https://discord.gg/akd2yfuRS3\">Dojo community</a>!</p>","isPage":false,"text":"\nYou&#x27;ve made the basic contracts for a chess game using the Dojo engine! This tutorial was just the beginning. There are many ways to make the game better, like optimizing parts, adding checks, or considering special cases. If you want to do more with this chess game, try these challenges:\n\nAdd a checkmate feature. Our game doesn&#x27;t end now, so decide when it should!\nInclude special moves like castling, En Passant Capture, or Pawn Promotion.\nMake your own chess rules! You could even create your own version of the immortal game\n\nLastly, share your project with others in the Dojo community!","title":"Congratulations!","titles":["3 Test Contract"]},"242":{"href":"/tutorial/onchain-chess/README#building-a-chess-game","html":"</header>\n<p><em>&quot;I just finished reading The Dojo Book. What should I do next?&quot;</em></p>\n<p>The answers to this question are always &quot;Make something!&quot;, sometimes followed by a list of cool projects. This is a great answer for some people, but others might be looking for a little more direction.</p>\n<p>This guide is intended to fill the gap between heavily directed beginner tutorials and working on your projects. The primary goal here is to get you to write code. The secondary goal is to get you reading documentation.</p>\n<p>If you haven&#x27;t read the Dojo Book yet, it is highly encouraged for you to do so before starting this project.</p>\n","isPage":true,"text":"\n&quot;I just finished reading The Dojo Book. What should I do next?&quot;\nThe answers to this question are always &quot;Make something!&quot;, sometimes followed by a list of cool projects. This is a great answer for some people, but others might be looking for a little more direction.\nThis guide is intended to fill the gap between heavily directed beginner tutorials and working on your projects. The primary goal here is to get you to write code. The secondary goal is to get you reading documentation.\nIf you haven&#x27;t read the Dojo Book yet, it is highly encouraged for you to do so before starting this project.\n","title":"Building a Chess Game","titles":[]},"243":{"href":"/tutorial/onchain-chess/README#what-are-we-building","html":"\n<p>We&#x27;re building an on-chain chess game contract that lets you start a new game and play chess. This guide does not cover every rules of the chess game. You will build step by step as follows:</p>\n<ol>\n<li>A system contract to spawn all the chess pieces</li>\n<li>A system contract to make pieces move</li>\n<li>Add some functions to check a legal move</li>\n<li>Play chess ♟♙ - integration test!</li>\n</ol>\n<p>The full code of tutorial is based on <a href=\"https://github.com/dojoengine/origami/tree/main/examples/chess\">this repo</a>.</p>\n<p>If this seems too hard, don&#x27;t worry! This guide is for beginners. If you know some basics about Cairo and Dojo, you&#x27;re good. We won&#x27;t make a full chess game with all the rules. We&#x27;re keeping it simple.</p>\n","isPage":false,"text":"\nWe&#x27;re building an on-chain chess game contract that lets you start a new game and play chess. This guide does not cover every rules of the chess game. You will build step by step as follows:\n\nA system contract to spawn all the chess pieces\nA system contract to make pieces move\nAdd some functions to check a legal move\nPlay chess ♟♙ - integration test!\n\nThe full code of tutorial is based on this repo.\nIf this seems too hard, don&#x27;t worry! This guide is for beginners. If you know some basics about Cairo and Dojo, you&#x27;re good. We won&#x27;t make a full chess game with all the rules. We&#x27;re keeping it simple.\n","title":"What are we building?","titles":["Building a Chess Game"]},"244":{"href":"/tutorial/onchain-chess/README#what-after-this-guide","html":"\n<p>We&#x27;re making another guide to help design the frontend. This will make our chess game complete.</p>\n<p>After you finish all the four chapters, we can move on to the frontend guide.</p>","isPage":false,"text":"\nWe&#x27;re making another guide to help design the frontend. This will make our chess game complete.\nAfter you finish all the four chapters, we can move on to the frontend guide.","title":"What after this guide?","titles":["Building a Chess Game"]},"245":{"href":"/client/sdk/js/dojojs#dojojs","html":"</header>\n","isPage":true,"text":"\n","title":"dojo.js","titles":[]},"246":{"href":"/client/sdk/js/dojojs#prerequisites","html":"\n<p>Before getting started, there are a few steps you must follow in order to get the project up and running.</p>\n","isPage":false,"text":"\nBefore getting started, there are a few steps you must follow in order to get the project up and running.\n","title":"Prerequisites","titles":["dojo.js"]},"247":{"href":"/client/sdk/js/dojojs#dojo","html":"\n<p>Ensure that you&#x27;re using the latest supported Dojo <a href=\"https://github.com/dojoengine/dojo/releases\">version</a>.</p>\n","isPage":false,"text":"\nEnsure that you&#x27;re using the latest supported Dojo version.\n","title":"Dojo","titles":["dojo.js","Prerequisites"]},"248":{"href":"/client/sdk/js/dojojs#starter-projects","html":"\n<p>All start projets are based on the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a> project.</p>\n<p>There are currently 4 starter projects available:</p>\n<ul>\n<li>react-app: simple react app</li>\n<li>react-phaser-example: react app using Phaser.js</li>\n<li>react-pwa-app: React Progressive Web App</li>\n<li>react-treejs: react app using drei (Three.js)</li>\n</ul>\n<ol>\n<li>Run <code>npx @dojoengine/create-dojo</code></li>\n<li>Pick <code>react-app</code></li>\n<li><code>cd react-app</code></li>\n<li><code>bun install</code> to install dependencies</li>\n<li><code>bun dev</code> to run the project</li>\n<li>You need to start Katana, Torii and run the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a> project.</li>\n<li>Head to <a href=\"http://localhost:3000\">http://localhost:3000</a></li>\n</ol>\n","isPage":false,"text":"\nAll start projets are based on the dojo-starter project.\nThere are currently 4 starter projects available:\n\nreact-app: simple react app\nreact-phaser-example: react app using Phaser.js\nreact-pwa-app: React Progressive Web App\nreact-treejs: react app using drei (Three.js)\n\n\nRun npx @dojoengine/create-dojo\nPick react-app\ncd react-app\nbun install to install dependencies\nbun dev to run the project\nYou need to start Katana, Torii and run the dojo-starter project.\nHead to http://localhost:3000\n\n","title":"Starter Projects","titles":["dojo.js","Prerequisites"]},"249":{"href":"/client/sdk/js/dojojs#core-documentation","html":"\n<p>⚠️ WIP</p>\n","isPage":false,"text":"\n⚠️ WIP\n","title":"Core documentation","titles":["dojo.js"]},"250":{"href":"/client/sdk/js/dojojs#react-documentation","html":"\n<p>React hooks are used to manage the states. Whenever Torii receives a new entity, it will trigger the <code>useEntityQuery</code> hook.</p>\n","isPage":false,"text":"\nReact hooks are used to manage the states. Whenever Torii receives a new entity, it will trigger the useEntityQuery hook.\n","title":"React documentation","titles":["dojo.js"]},"251":{"href":"/client/sdk/js/dojojs#useentityquery-has-and-hasvalue","html":"\n<p>To retrieve entities, use the <code>useEntityQuery</code> hook. This returns an array of entity ids, not directly the entities themselves. See <code>useComponentValue</code> for more information.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> players</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> useEntityQuery</span><span style=\"color:#ADBAC7\">([</span><span style=\"color:#DCBDFB\">Has</span><span style=\"color:#ADBAC7\">(Player)])</span></span></code></pre></figure>\n<p>If you want to filter values, use <code>HasValue</code> with an object containing the fields to filter and the values for each filter.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> filteredPlayers</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> useEntityQuery</span><span style=\"color:#ADBAC7\">([</span><span style=\"color:#DCBDFB\">HasValue</span><span style=\"color:#ADBAC7\">(Player, { address: account.address })])</span></span></code></pre></figure>\n","isPage":false,"text":"\nTo retrieve entities, use the useEntityQuery hook. This returns an array of entity ids, not directly the entities themselves. See useComponentValue for more information.\nconst players = useEntityQuery([Has(Player)])\nIf you want to filter values, use HasValue with an object containing the fields to filter and the values for each filter.\nconst filteredPlayers = useEntityQuery([HasValue(Player, { address: account.address })])\n","title":"useEntityQuery, Has and HasValue","titles":["dojo.js","React documentation"]},"252":{"href":"/client/sdk/js/dojojs#usecomponentvalue","html":"\n<p>This hook is used to retrieve the value of a component. It returns the value of the component, or <code>undefined</code> if the component is not present.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// Retrieve the entity ids of all players model</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> players</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> useEntityQuery</span><span style=\"color:#ADBAC7\">([</span><span style=\"color:#DCBDFB\">Has</span><span style=\"color:#ADBAC7\">(Player)])</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Retrieve the player entity</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> player</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> useComponentValue</span><span style=\"color:#ADBAC7\">(players[</span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">], Player)</span></span></code></pre></figure>\n<p>If you need to use all the entities retrieved, you need to pass the entityId to another component and use <code>useComponentValue</code> to retrieve the value inside this component.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// Pseudo-code</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Players.tsx</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Retrieve the entity ids of all players model</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> players</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> useEntityQuery</span><span style=\"color:#ADBAC7\">([</span><span style=\"color:#DCBDFB\">Has</span><span style=\"color:#ADBAC7\">(Player)])</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">return</span><span style=\"color:#ADBAC7\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    &lt;&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">            players</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">map</span><span style=\"color:#ADBAC7\">((</span><span style=\"color:#F69D50\">player</span><span style=\"color:#ADBAC7\">) </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                &lt;</span><span style=\"color:#ADBAC7\">PlayerComponent key</span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\">{player.id} player</span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\">{player} </span><span style=\"color:#F47067\">/&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            ))</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    &lt;/&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// PlayerComponent.tsx</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// Retrieve the player entity</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> player</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> useComponentValue</span><span style=\"color:#ADBAC7\">(props.player, Player)</span></span></code></pre></figure>\n","isPage":false,"text":"\nThis hook is used to retrieve the value of a component. It returns the value of the component, or undefined if the component is not present.\n// Retrieve the entity ids of all players model\nconst players = useEntityQuery([Has(Player)])\n \n// Retrieve the player entity\nconst player = useComponentValue(players[0], Player)\nIf you need to use all the entities retrieved, you need to pass the entityId to another component and use useComponentValue to retrieve the value inside this component.\n// Pseudo-code\n \n// Players.tsx\n \n// Retrieve the entity ids of all players model\nconst players = useEntityQuery([Has(Player)])\n \nreturn (\n    &lt;&gt;\n        {\n            players.map((player) =&gt; (\n                &lt;PlayerComponent key={player.id} player={player} /&gt;\n            ))\n        }\n    &lt;/&gt;\n)\n \n// PlayerComponent.tsx\n \n// Retrieve the player entity\nconst player = useComponentValue(props.player, Player)\n","title":"useComponentValue","titles":["dojo.js","React documentation"]},"253":{"href":"/client/sdk/js/dojojs#torii-client","html":"\n<p>This library is used to sync all the entities that are already in the world on startup.</p>\n<p>We first initialize the torii client.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> toriiClient</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> await</span><span style=\"color:#ADBAC7\"> torii.</span><span style=\"color:#DCBDFB\">createClient</span><span style=\"color:#ADBAC7\">([], {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    rpcUrl: config.rpcUrl, </span><span style=\"color:#768390\">// Katana url</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    toriiUrl: config.toriiUrl, </span><span style=\"color:#768390\">// Torii url</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    worldAddress: config.manifest.world.address </span><span style=\"color:#F47067\">||</span><span style=\"color:#96D0FF\"> &quot;&quot;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#768390\">// World contract address</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">});</span></span></code></pre></figure>\n<p>We then fetch all the entities from the world. using the <code>getSyncEntities</code> function from the <code>state</code> library.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { getSyncEntities } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;@dojoengine/state&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// create contract components</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> contractComponents</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> defineContractComponents</span><span style=\"color:#ADBAC7\">(world);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// fetch all existing entities from torii</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">await</span><span style=\"color:#DCBDFB\"> getSyncEntities</span><span style=\"color:#ADBAC7\">(toriiClient, contractComponents </span><span style=\"color:#F47067\">as</span><span style=\"color:#6CB6FF\"> any</span><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure>\n","isPage":false,"text":"\nThis library is used to sync all the entities that are already in the world on startup.\nWe first initialize the torii client.\nconst toriiClient = await torii.createClient([], {\n    rpcUrl: config.rpcUrl, // Katana url\n    toriiUrl: config.toriiUrl, // Torii url\n    worldAddress: config.manifest.world.address || &quot;&quot;, // World contract address\n});\nWe then fetch all the entities from the world. using the getSyncEntities function from the state library.\nimport { getSyncEntities } from &quot;@dojoengine/state&quot;;\n \n// create contract components\nconst contractComponents = defineContractComponents(world);\n \n// fetch all existing entities from torii\nawait getSyncEntities(toriiClient, contractComponents as any);\n","title":"Torii-client","titles":["dojo.js"]},"254":{"href":"/client/sdk/js/dojojs#recs-state-library","html":"\n","isPage":false,"text":"\n","title":"Recs state library","titles":["dojo.js"]},"255":{"href":"/client/sdk/js/dojojs#overridablecomponent","html":"\n<p>To avoid waiting for the transaction to be validated before seeing the action, you can override components.</p>\n<p>You first need to define your components as overridable in <code>createClientComponents.tsx</code>. This will add an addOverride and removeOverride function that will be used to override the value when sending the transaction and remove the override when the transaction has ended.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { overridableComponent } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;@dojoengine/recs&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">import</span><span style=\"color:#ADBAC7\"> { SetupNetworkResult } </span><span style=\"color:#F47067\">from</span><span style=\"color:#96D0FF\"> &quot;./setupNetwork&quot;</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> type</span><span style=\"color:#F69D50\"> ClientComponents</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F69D50\"> ReturnType</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F47067\">typeof</span><span style=\"color:#ADBAC7\"> createClientComponents&gt;;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">export</span><span style=\"color:#F47067\"> function</span><span style=\"color:#DCBDFB\"> createClientComponents</span><span style=\"color:#ADBAC7\">({</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    contractComponents</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> SetupNetworkResult</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    return</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        ...</span><span style=\"color:#ADBAC7\">contractComponents,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        Position: </span><span style=\"color:#DCBDFB\">overridableComponent</span><span style=\"color:#ADBAC7\">(contractComponents.Position),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nTo avoid waiting for the transaction to be validated before seeing the action, you can override components.\nYou first need to define your components as overridable in createClientComponents.tsx. This will add an addOverride and removeOverride function that will be used to override the value when sending the transaction and remove the override when the transaction has ended.\nimport { overridableComponent } from &quot;@dojoengine/recs&quot;;\nimport { SetupNetworkResult } from &quot;./setupNetwork&quot;;\n \nexport type ClientComponents = ReturnType&lt;typeof createClientComponents&gt;;\n \nexport function createClientComponents({\n    contractComponents,\n}: SetupNetworkResult) {\n    return {\n        ...contractComponents,\n        Position: overridableComponent(contractComponents.Position),\n    };\n}\n","title":"overridableComponent","titles":["dojo.js","Recs state library"]},"256":{"href":"/client/sdk/js/dojojs#addoverride-and-removeoverride","html":"\n<p>You can add and remove overrides using the addOverride and removeOverride functions.</p>\n<p><code>addOverride</code> needs to be called with a new uuid (using the uuid function so that it is unique) and an object containing the entityId to override and the new value.</p>\n<p><code>removeOverride</code> needs to be called with the new uuid generated.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// Extract from createSystemCalls.tsx</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">const</span><span style=\"color:#6CB6FF\"> positionId</span><span style=\"color:#F47067\"> =</span><span style=\"color:#DCBDFB\"> uuid</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">Position.</span><span style=\"color:#DCBDFB\">addOverride</span><span style=\"color:#ADBAC7\">(positionId, {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    entity: entityId,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    value: {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        player: </span><span style=\"color:#DCBDFB\">BigInt</span><span style=\"color:#ADBAC7\">(entityId),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        vec: </span><span style=\"color:#DCBDFB\">updatePositionWithDirection</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            direction,</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            getComponentValue</span><span style=\"color:#ADBAC7\">(Position, entityId) </span><span style=\"color:#F47067\">as</span><span style=\"color:#6CB6FF\"> any</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ).vec,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// ...</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// Send transaction</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">// ...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">Position.</span><span style=\"color:#DCBDFB\">removeOverride</span><span style=\"color:#ADBAC7\">(positionId)</span></span></code></pre></figure>\n<p>You can check the <a href=\"%22https://github.com/dojoengine/dojo.js/blob/main/examples/react/react-app/src/dojo/createSystemCalls.ts%22\"><code>createSystemCalls</code></a> file to see this full example of the addOverride and removeOverride functions in action.</p>\n","isPage":false,"text":"\nYou can add and remove overrides using the addOverride and removeOverride functions.\naddOverride needs to be called with a new uuid (using the uuid function so that it is unique) and an object containing the entityId to override and the new value.\nremoveOverride needs to be called with the new uuid generated.\n// Extract from createSystemCalls.tsx\nconst positionId = uuid();\nPosition.addOverride(positionId, {\n    entity: entityId,\n    value: {\n        player: BigInt(entityId),\n        vec: updatePositionWithDirection(\n            direction,\n            getComponentValue(Position, entityId) as any\n        ).vec,\n    },\n});\n \n// ...\n// Send transaction\n// ...\n \nPosition.removeOverride(positionId)\nYou can check the createSystemCalls file to see this full example of the addOverride and removeOverride functions in action.\n","title":"addOverride and removeOverride","titles":["dojo.js","Recs state library"]},"257":{"href":"/client/sdk/js/dojojs#definecomponent","html":"\n<p>This function is currently used in the generated file <code>contractComponents.ts</code> and is used to register the models. Here is an example of how this function is used:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\"><code data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// Extract from contractComponents.ts</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Position</span><span style=\"color:#ADBAC7\">: (() </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    return</span><span style=\"color:#DCBDFB\"> defineComponent</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        world,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            player: RecsType.BigInt,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            vec: { x: RecsType.Number, y: RecsType.Number },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            metadata: {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                name: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                types: [</span><span style=\"color:#96D0FF\">&quot;contractaddress&quot;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;u32&quot;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#96D0FF\">&quot;u32&quot;</span><span style=\"color:#ADBAC7\">],</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                customTypes: [</span><span style=\"color:#96D0FF\">&quot;Vec2&quot;</span><span style=\"color:#ADBAC7\">],</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">})(),</span></span></code></pre></figure>\n","isPage":false,"text":"\nThis function is currently used in the generated file contractComponents.ts and is used to register the models. Here is an example of how this function is used:\n// Extract from contractComponents.ts\nPosition: (() =&gt; {\n    return defineComponent(\n        world,\n        {\n            player: RecsType.BigInt,\n            vec: { x: RecsType.Number, y: RecsType.Number },\n        },\n        {\n            metadata: {\n                name: &quot;Position&quot;,\n                types: [&quot;contractaddress&quot;, &quot;u32&quot;, &quot;u32&quot;],\n                customTypes: [&quot;Vec2&quot;],\n            },\n        }\n    );\n})(),\n","title":"defineComponent","titles":["dojo.js","Recs state library"]},"258":{"href":"/client/sdk/js/dojojs#contribute","html":"\n<p>To contribute to the project, check the <a href=\"https://github.com/dojoengine/dojo.js?tab=readme-ov-file#contributing-to-dojojs\">Contribute section</a> of the dojo.js repo.</p>","isPage":false,"text":"\nTo contribute to the project, check the Contribute section of the dojo.js repo.","title":"Contribute","titles":["dojo.js"]},"259":{"href":"/client/sdk/unity/common-problems#common-problems-and-solutions","html":"</header>\n","isPage":true,"text":"\n","title":"Common problems and solutions","titles":[]},"260":{"href":"/client/sdk/unity/common-problems#model-bindings","html":"\n<p>When modifying the bindings generated by Dojo, ensure that all fields in the model bindings are declared as public.</p>\n<blockquote>\n<p>⚠️ Failing to do so can result in the values of the fields not being loaded properly.</p>\n</blockquote>\n<p>For example:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">public</span><span style=\"color:#F47067\"> class</span><span style=\"color:#F69D50\"> RoomHero</span><span style=\"color:#ADBAC7\"> : </span><span style=\"color:#F69D50\">ModelInstance</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    [</span><span style=\"color:#F69D50\">ModelField</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;room_id&quot;</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    private</span><span style=\"color:#F47067\"> uint</span><span style=\"color:#F69D50\"> room_id</span><span style=\"color:#ADBAC7\">; ❌</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">public</span><span style=\"color:#F47067\"> class</span><span style=\"color:#F69D50\"> RoomHero</span><span style=\"color:#ADBAC7\"> : </span><span style=\"color:#F69D50\">ModelInstance</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    [</span><span style=\"color:#F69D50\">ModelField</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;room_id&quot;</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    public</span><span style=\"color:#F47067\"> uint</span><span style=\"color:#F69D50\"> room_id</span><span style=\"color:#ADBAC7\">; ✅</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<blockquote>\n<p>By declaring fields as <code>public</code>, you ensure proper loading and access to the values within the model bindings.</p>\n</blockquote>\n","isPage":false,"text":"\nWhen modifying the bindings generated by Dojo, ensure that all fields in the model bindings are declared as public.\n\n⚠️ Failing to do so can result in the values of the fields not being loaded properly.\n\nFor example:\npublic class RoomHero : ModelInstance {\n    [ModelField(&quot;room_id&quot;)]\n    private uint room_id; ❌\n}\npublic class RoomHero : ModelInstance {\n    [ModelField(&quot;room_id&quot;)]\n    public uint room_id; ✅\n}\n\nBy declaring fields as public, you ensure proper loading and access to the values within the model bindings.\n\n","title":"Model Bindings","titles":["Common problems and solutions"]},"261":{"href":"/client/sdk/unity/common-problems#slot-on-desktop","html":"\n<p>Currently, Slot functionality is not available on desktop platforms due to a server error preventing the initialization of the ToriiClient within the WorldManager component. This results in the following exception:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">Exception</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#F69D50\">status</span><span style=\"color:#ADBAC7\">: Unknown, </span><span style=\"color:#F69D50\">message</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;h2 protocol error: http2 error: connection error detected: frame with invalid size&quot;</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">details</span><span style=\"color:#ADBAC7\">: [], </span><span style=\"color:#F69D50\">metadata</span><span style=\"color:#ADBAC7\">: MetadataMap { </span><span style=\"color:#F69D50\">headers</span><span style=\"color:#ADBAC7\">: {} }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">Dojo.Torii.ToriiClient</span><span style=\"color:#F47067\">..</span><span style=\"color:#DCBDFB\">ctor</span><span style=\"color:#ADBAC7\"> (System.String toriiUrl, System.String rpcUrl, System.String world, dojo_bindings.dojo</span><span style=\"color:#F47067\">+</span><span style=\"color:#ADBAC7\">KeysClause[] entities) (at Assets</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">Dojo</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">Runtime</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">Torii</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">ToriiClient.cs</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\">40</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">Dojo.WorldManager.</span><span style=\"color:#DCBDFB\">Start</span><span style=\"color:#ADBAC7\"> () (at Assets</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">Dojo</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">Runtime</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">WorldManager.cs</span><span style=\"color:#F47067\">:</span><span style=\"color:#6CB6FF\">28</span><span style=\"color:#ADBAC7\">)</span></span></code></pre></figure>\n<p>💡 If you intend to use Slot, you must build the game for WebGL platform instead.</p>\n","isPage":false,"text":"\nCurrently, Slot functionality is not available on desktop platforms due to a server error preventing the initialization of the ToriiClient within the WorldManager component. This results in the following exception:\nException: status: Unknown, message: &quot;h2 protocol error: http2 error: connection error detected: frame with invalid size&quot;, details: [], metadata: MetadataMap { headers: {} }\nDojo.Torii.ToriiClient..ctor (System.String toriiUrl, System.String rpcUrl, System.String world, dojo_bindings.dojo+KeysClause[] entities) (at Assets/Dojo/Runtime/Torii/ToriiClient.cs:40)\nDojo.WorldManager.Start () (at Assets/Dojo/Runtime/WorldManager.cs:28)\n💡 If you intend to use Slot, you must build the game for WebGL platform instead.\n","title":"Slot on Desktop","titles":["Common problems and solutions"]},"262":{"href":"/client/sdk/unity/common-problems#webgl-build-errors","html":"\n<p>Encountering the following error during a WebGL build?\n<img src=\"/unity/webgl-error.png\" alt=\"webgl-error\"/></p>\n<p>Here are the steps to address it:</p>\n<ol>\n<li>\n<p><strong>Verify Dojo Template Selection</strong>:</p>\n<ul>\n<li>Navigate to <code>Edit &gt; Project Settings &gt; Player</code> (or directly through the Project Settings window).\n<img src=\"/unity/webgl-build-fail.png\" alt=\"webgl-error\"/></li>\n</ul>\n<blockquote>\n<p>Example without <code>Dojo</code> template selected</p>\n</blockquote>\n<ul>\n<li>Select the WebGL tab.</li>\n<li>Under <code>Resolution and Presentation</code>, ensure the <code>Dojo</code> Template is selected.</li>\n<li>If the Dojo template is missing, proceed to <code>step 2</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Download WebGL Templates Folder</strong>: If the Dojo template is unavailable in Player Settings, it&#x27;s likely missing from your project.</p>\n<ul>\n<li>Navigate to the <a href=\"https://github.com/dojoengine/dojo.unity\">Dojo Unity repository</a></li>\n<li>Download the <code>WebGL templates</code> folder.</li>\n<li>Add this folder to your project&#x27;s Assets directory.</li>\n</ul>\n</li>\n<li>\n<p><strong>Rebuild Your Project</strong>:\nAfter ensuring the Dojo template is selected or added, try rebuilding your project for WebGL.</p>\n</li>\n</ol>\n","isPage":false,"text":"\nEncountering the following error during a WebGL build?\n\nHere are the steps to address it:\n\n\nVerify Dojo Template Selection:\n\nNavigate to Edit &gt; Project Settings &gt; Player (or directly through the Project Settings window).\n\n\n\nExample without Dojo template selected\n\n\nSelect the WebGL tab.\nUnder Resolution and Presentation, ensure the Dojo Template is selected.\nIf the Dojo template is missing, proceed to step 2.\n\n\n\nDownload WebGL Templates Folder: If the Dojo template is unavailable in Player Settings, it&#x27;s likely missing from your project.\n\nNavigate to the Dojo Unity repository\nDownload the WebGL templates folder.\nAdd this folder to your project&#x27;s Assets directory.\n\n\n\nRebuild Your Project:\nAfter ensuring the Dojo template is selected or added, try rebuilding your project for WebGL.\n\n\n","title":"WebGL Build Errors","titles":["Common problems and solutions"]},"263":{"href":"/client/sdk/unity/common-problems#async-calls-not-working","html":"\n<p>If asynchronous calls to the Dojo systems are not functioning as expected, ensure that the <code>UnityMainThreadDispatcher</code> is present in your scene.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">return</span><span style=\"color:#F47067\"> await</span><span style=\"color:#ADBAC7\"> account.</span><span style=\"color:#DCBDFB\">ExecuteRaw</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">new</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Call</span><span style=\"color:#ADBAC7\">[] {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            new</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Call</span><span style=\"color:#ADBAC7\">{</span><span style=\"color:#F47067\">..</span><span style=\"color:#ADBAC7\">.}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span></code></pre></figure>\n<p>If you don&#x27;t have it, add it to your scene.</p>\n<blockquote>\n<p>The <code>UnityMainThreadDispatcher</code> can be found in <code>Assets/Dojo/Runtime directory</code>.</p>\n</blockquote>\n","isPage":false,"text":"\nIf asynchronous calls to the Dojo systems are not functioning as expected, ensure that the UnityMainThreadDispatcher is present in your scene.\nreturn await account.ExecuteRaw(new dojo.Call[] {\n            new dojo.Call{...}\n            }\nIf you don&#x27;t have it, add it to your scene.\n\nThe UnityMainThreadDispatcher can be found in Assets/Dojo/Runtime directory.\n\n","title":"Async calls not Working","titles":["Common problems and solutions"]},"264":{"href":"/client/sdk/unity/common-problems#bingen-plugin-error","html":"\n<p>When executing the command</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">Sozo</span><span style=\"color:#ADBAC7\"> build </span><span style=\"color:#F47067\">--</span><span style=\"color:#ADBAC7\">unity</span></span></code></pre></figure>\n<p>to generate the bingens for your Unity project, you might encounter the following error:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">thread</span><span style=\"color:#96D0FF\"> &#x27;main&#x27;</span><span style=\"color:#96D0FF\"> panicked at crates/dojo-bindgen/src/plugins/unity/mod.rs:188:50:</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">called</span><span style=\"color:#96D0FF\"> Result::unwrap</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#96D0FF\">on an Err value: ConversionFailed</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">&quot;Can&#x27;t convert token into composite, got CoreBasic(CoreBasic { type_path: </span><span style=\"color:#F47067\">\\&quot;</span><span style=\"color:#F69D50\">core::starknet::contract_address::ContractAddress</span><span style=\"color:#F47067\">\\&quot;</span><span style=\"color:#F69D50\"> })&quot;</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">note:</span><span style=\"color:#96D0FF\"> run with RUST_BACKTRACE=</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#96D0FF\"> environment variable to display a backtrace</span></span></code></pre></figure>\n<blockquote>\n<p>To resolve this issue, it&#x27;s recommended to upgrade your Dojo version to at least <code>v0.6.0-alpha</code>. You can achieve this by running the following command in your terminal:</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">dojoup </span><span style=\"color:#F47067\">--</span><span style=\"color:#ADBAC7\">version v0</span><span style=\"color:#F47067\">.</span><span style=\"color:#6CB6FF\">6.0</span><span style=\"color:#F47067\">-</span><span style=\"color:#ADBAC7\">alpha</span></span></code></pre></figure>\n","isPage":false,"text":"\nWhen executing the command\nSozo build --unity\nto generate the bingens for your Unity project, you might encounter the following error:\nthread &#x27;main&#x27; panicked at crates/dojo-bindgen/src/plugins/unity/mod.rs:188:50:\ncalled Result::unwrap() on an Err value: ConversionFailed(&quot;Can&#x27;t convert token into composite, got CoreBasic(CoreBasic { type_path: \\&quot;core::starknet::contract_address::ContractAddress\\&quot; })&quot;)\nnote: run with RUST_BACKTRACE=1 environment variable to display a backtrace\n\nTo resolve this issue, it&#x27;s recommended to upgrade your Dojo version to at least v0.6.0-alpha. You can achieve this by running the following command in your terminal:\n\ndojoup --version v0.6.0-alpha\n","title":"Bingen plugin error","titles":["Common problems and solutions"]},"265":{"href":"/client/sdk/unity/common-problems#torii-communication-error","html":"\n<p>Encountering the following error when running your Unity program?</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">Exception:</span><span style=\"color:#96D0FF\"> transport error</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Dojo.Torii.ToriiClient..ctor</span><span style=\"color:#ADBAC7\"> (System.String </span><span style=\"color:#96D0FF\">toriiUrl, System.String rpcUrl, System.String relayUrl, System.String world</span><span style=\"color:#ADBAC7\">) (</span><span style=\"color:#F69D50\">at</span><span style=\"color:#96D0FF\"> Assets/Dojo/Runtime/Torii/ToriiClient.cs:33</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">Dojo.WorldManager.Awake</span><span style=\"color:#ADBAC7\"> () (</span><span style=\"color:#F69D50\">at</span><span style=\"color:#96D0FF\"> Assets/Dojo/Runtime/WorldManager.cs:25</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">System.Runtime.CompilerServices.AsyncMethodBuilderCore+&lt;&gt;c.&lt;ThrowAsync&gt;b__7_0</span><span style=\"color:#ADBAC7\"> (System.Object </span><span style=\"color:#96D0FF\">state</span><span style=\"color:#ADBAC7\">) (</span><span style=\"color:#F69D50\">at</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">2ccb053bed3740ab940e67afec38ab3</span><span style=\"color:#F47067\">1&gt;</span><span style=\"color:#96D0FF\">:0</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">UnityEngine.UnitySynchronizationContext+WorkRequest.Invoke</span><span style=\"color:#ADBAC7\"> () (</span><span style=\"color:#F69D50\">at</span><span style=\"color:#96D0FF\"> /Users/bokken/build/output/unity/unity/Runtime/Export/Scripting/UnitySynchronizationContext.cs:153</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">UnityEngine.UnitySynchronizationContext.Exec</span><span style=\"color:#ADBAC7\"> () (</span><span style=\"color:#F69D50\">at</span><span style=\"color:#96D0FF\"> /Users/bokken/build/output/unity/unity/Runtime/Export/Scripting/UnitySynchronizationContext.cs:83</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">UnityEngine.UnitySynchronizationContext.ExecuteTasks</span><span style=\"color:#ADBAC7\"> () (</span><span style=\"color:#F69D50\">at</span><span style=\"color:#96D0FF\"> /Users/bokken/build/output/unity/unity/Runtime/Export/Scripting/UnitySynchronizationContext.cs:107</span><span style=\"color:#ADBAC7\">)</span></span></code></pre></figure>\n<p>This error message indicates that your Unity program cannot establish communication with the <code>Torii server</code>.</p>\n<p>Troubleshooting Steps:</p>\n<ol>\n<li>Verify Torii URL: Double-check the Torii URL configured in your Unity project settings.</li>\n<li>Confirm Torii Status: Make sure the Torii server is up and running.</li>\n</ol>\n","isPage":false,"text":"\nEncountering the following error when running your Unity program?\nException: transport error\nDojo.Torii.ToriiClient..ctor (System.String toriiUrl, System.String rpcUrl, System.String relayUrl, System.String world) (at Assets/Dojo/Runtime/Torii/ToriiClient.cs:33)\nDojo.WorldManager.Awake () (at Assets/Dojo/Runtime/WorldManager.cs:25)\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore+&lt;&gt;c.&lt;ThrowAsync&gt;b__7_0 (System.Object state) (at &lt;2ccb053bed3740ab940e67afec38ab31&gt;:0)\nUnityEngine.UnitySynchronizationContext+WorkRequest.Invoke () (at /Users/bokken/build/output/unity/unity/Runtime/Export/Scripting/UnitySynchronizationContext.cs:153)\nUnityEngine.UnitySynchronizationContext.Exec () (at /Users/bokken/build/output/unity/unity/Runtime/Export/Scripting/UnitySynchronizationContext.cs:83)\nUnityEngine.UnitySynchronizationContext.ExecuteTasks () (at /Users/bokken/build/output/unity/unity/Runtime/Export/Scripting/UnitySynchronizationContext.cs:107)\nThis error message indicates that your Unity program cannot establish communication with the Torii server.\nTroubleshooting Steps:\n\nVerify Torii URL: Double-check the Torii URL configured in your Unity project settings.\nConfirm Torii Status: Make sure the Torii server is up and running.\n\n","title":"Torii Communication Error","titles":["Common problems and solutions"]},"266":{"href":"/client/sdk/unity/common-problems#authentication-error-during-transaction-execution","html":"\n<p>While executing a transaction from your Unity project, you encounter the following error in the Katana terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">2024-03-19T18:05:46.841197Z</span><span style=\"color:#96D0FF\">  WARN executor: Transaction execution error: &quot;Error in the called contract (0x00280a3deba2004bbbdb3d60a619f3059305f2399ab1e1cd630ec20249abe5fa):</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Error at pc=0:4573:</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Got an exception while executing a hint.</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Cairo traceback (most recent call last):</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Unknown location (pc=0:67)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Unknown location (pc=0:1835)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Unknown location (pc=0:2478)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Unknown location (pc=0:3255)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Unknown location (pc=0:3795)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Error in the called contract (0x05024efa0bbd4ec33a2f56251a5d67d8ed2b1e88cbdba566cbce6d3d757db21f):</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Error at pc=0:1867:</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Got an exception while executing a hint: Hint Error: Execution failed. Failure reason: 0x6e6f7420777269746572 (&#x27;not writer&#x27;).</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Cairo traceback (most recent call last):</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Unknown location (pc=0:256)</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Unknown location (pc=0:634)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Error in the called contract (0x01bf3dfc0c2b66b3d4abb47e9c8e4c5552992dbc70bb2566b9f6d6ee9b707317):</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">Execution failed. Failure reason: 0x6e6f7420777269746572 (&#x27;not writer&#x27;).</span></span></code></pre></figure>\n<blockquote>\n<p>💡Solution:</p>\n</blockquote>\n<ul>\n<li><strong>Execute default_auth.sh</strong>: Navigate to the <code>src</code> directory within your Dojo project. Run the script <code>default_auth</code>.sh using your terminal.</li>\n</ul>\n<p><img src=\"/unity/auth.png\" alt=\"auth\"/></p>","isPage":false,"text":"\nWhile executing a transaction from your Unity project, you encounter the following error in the Katana terminal:\n2024-03-19T18:05:46.841197Z  WARN executor: Transaction execution error: &quot;Error in the called contract (0x00280a3deba2004bbbdb3d60a619f3059305f2399ab1e1cd630ec20249abe5fa):\nError at pc=0:4573:\nGot an exception while executing a hint.\nCairo traceback (most recent call last):\nUnknown location (pc=0:67)\nUnknown location (pc=0:1835)\nUnknown location (pc=0:2478)\nUnknown location (pc=0:3255)\nUnknown location (pc=0:3795)\n \nError in the called contract (0x05024efa0bbd4ec33a2f56251a5d67d8ed2b1e88cbdba566cbce6d3d757db21f):\nError at pc=0:1867:\nGot an exception while executing a hint: Hint Error: Execution failed. Failure reason: 0x6e6f7420777269746572 (&#x27;not writer&#x27;).\nCairo traceback (most recent call last):\nUnknown location (pc=0:256)\nUnknown location (pc=0:634)\n \nError in the called contract (0x01bf3dfc0c2b66b3d4abb47e9c8e4c5552992dbc70bb2566b9f6d6ee9b707317):\nExecution failed. Failure reason: 0x6e6f7420777269746572 (&#x27;not writer&#x27;).\n\n💡Solution:\n\n\nExecute default_auth.sh: Navigate to the src directory within your Dojo project. Run the script default_auth.sh using your terminal.\n\n","title":"Authentication Error During Transaction Execution","titles":["Common problems and solutions"]},"267":{"href":"/client/sdk/unity/example#example-with-dojo-starter-and-dojounity","html":"</header>\n<p>This section provides a walkthrough for running the example from the dojo.unity repository using the <code>Dojo Starter</code> repository.</p>\n<p><a href=\"https://youtu.be/25ocgPsHs4w\"><img src=\"https://markdown-videos-api.jorgenkh.no/url?url=https%3A%2F%2Fyoutu.be%2F25ocgPsHs4w\" alt=\"dojo.unity demo\"/></a></p>\n","isPage":true,"text":"\nThis section provides a walkthrough for running the example from the dojo.unity repository using the Dojo Starter repository.\n\n","title":"Example with Dojo Starter and dojo.unity","titles":[]},"268":{"href":"/client/sdk/unity/example#prerequisites","html":"\n<ul>\n<li>Clone the <a href=\"%22https://github.com/dojoengine/dojo.unity%22\">Dojo.unity</a> repository.</li>\n<li>Clone the <a href=\"%22https://github.com/dojoengine/dojo-starter%22\">Dojo Starter</a> repository.</li>\n</ul>\n","isPage":false,"text":"\n\nClone the Dojo.unity repository.\nClone the Dojo Starter repository.\n\n","title":"Prerequisites","titles":["Example with Dojo Starter and dojo.unity"]},"269":{"href":"/client/sdk/unity/example#setting-up-dojo-starter","html":"\n<p>Follow the steps outlined in the <a href=\"/cairo/hello-dojo.md\">Dojo Starter setup guide</a>:</p>\n<ol>\n<li>Launch Katana.</li>\n<li>Build with Sozo.</li>\n<li>Launch Torii.</li>\n</ol>\n","isPage":false,"text":"\nFollow the steps outlined in the Dojo Starter setup guide:\n\nLaunch Katana.\nBuild with Sozo.\nLaunch Torii.\n\n","title":"Setting up Dojo Starter","titles":["Example with Dojo Starter and dojo.unity"]},"270":{"href":"/client/sdk/unity/example#setting-up-dojounity","html":"\n<ol>\n<li>\n<p>Open the scene: In the <code>Project tab</code>, navigate to <code>Assets/Spawn And Move/Scenes/Sample scene</code></p>\n</li>\n<li>\n<p>Adjusting Scriptable Objects:</p>\n<ul>\n<li>Verify that the <code>player address</code> and <code>player private</code> key in <code>Assets/Spawn And Move/Dojo5.0Data</code> match the output of the Katana terminal.</li>\n<li>Verify that the <code>world address</code> in the Scriptable Object located at <code>Assets/Dojo/Runtime/Config/WorldManagerLocalConfig</code> matches the output of the Sozo migrate command.</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nOpen the scene: In the Project tab, navigate to Assets/Spawn And Move/Scenes/Sample scene\n\n\nAdjusting Scriptable Objects:\n\nVerify that the player address and player private key in Assets/Spawn And Move/Dojo5.0Data match the output of the Katana terminal.\nVerify that the world address in the Scriptable Object located at Assets/Dojo/Runtime/Config/WorldManagerLocalConfig matches the output of the Sozo migrate command.\n\n\n\n","title":"Setting up dojo.unity","titles":["Example with Dojo Starter and dojo.unity"]},"271":{"href":"/client/sdk/unity/example#running-the-example","html":"\n<ol>\n<li>Play the opened scene.</li>\n<li>To spawn an entity, press the <code>space key</code>.</li>\n<li>To move the entity, use the keys: <code>a (left)</code>, <code>w (forward)</code>, <code>s (backward)</code>, <code>d (right)</code>.</li>\n</ol>\n<blockquote>\n<p>You can create multiple entities by pressing the <code>space</code> key. To select an entity for movement, simply <code>right-click</code> on it.</p>\n</blockquote>","isPage":false,"text":"\n\nPlay the opened scene.\nTo spawn an entity, press the space key.\nTo move the entity, use the keys: a (left), w (forward), s (backward), d (right).\n\n\nYou can create multiple entities by pressing the space key. To select an entity for movement, simply right-click on it.\n","title":"Running the Example","titles":["Example with Dojo Starter and dojo.unity"]},"272":{"href":"/client/sdk/unity/get-started#getting-started","html":"</header>\n<p>This section guides you through:</p>\n<ul>\n<li>Dojo Unity SDK Setup: Learn how to integrate the Dojo.unity SDK into your Unity scene for seamless development.</li>\n<li>Calling Dojo Systems: Discover how to interact with various systems within your Dojo world directly from Unity.</li>\n<li>Building for Desktop &amp; WebGL: Master the steps for building your onchain game for both desktop and WebGL platforms(using the Slot framework).</li>\n</ul>\n","isPage":true,"text":"\nThis section guides you through:\n\nDojo Unity SDK Setup: Learn how to integrate the Dojo.unity SDK into your Unity scene for seamless development.\nCalling Dojo Systems: Discover how to interact with various systems within your Dojo world directly from Unity.\nBuilding for Desktop &amp; WebGL: Master the steps for building your onchain game for both desktop and WebGL platforms(using the Slot framework).\n\n","title":"Getting Started","titles":[]},"273":{"href":"/client/sdk/unity/get-started#setting-up-unity-scene","html":"\n<div data-vocs-steps=\"true\"><div data-depth=\"3\">","isPage":false,"text":"\n","title":"Setting up Unity Scene","titles":["Getting Started"]},"274":{"href":"/client/sdk/unity/get-started#add-essential-prefabs","html":"<p>In your Unity project, navigate to the scene where you want to integrate the Dojo SDK.</p><ul>\n<li>From the <code>Project</code> window, locate the <code>Assets/Dojo/Prefabs</code> folder.\nDrag the <code>WorldManager</code> prefab into your scene. This prefab acts as the central hub for managing entities in your Dojo world.</li>\n<li>Additionally, navigate to the <code>Assets/Dojo/Runtime</code> folder and drag the <code>UnityMainThreadDispatcher</code> prefab into your scene.</li>\n</ul></div><div data-depth=\"3\">","isPage":false,"text":"In your Unity project, navigate to the scene where you want to integrate the Dojo SDK.\nFrom the Project window, locate the Assets/Dojo/Prefabs folder.\nDrag the WorldManager prefab into your scene. This prefab acts as the central hub for managing entities in your Dojo world.\nAdditionally, navigate to the Assets/Dojo/Runtime folder and drag the UnityMainThreadDispatcher prefab into your scene.\n","title":"Add Essential Prefabs","titles":["Getting Started","Setting up Unity Scene"]},"275":{"href":"/client/sdk/unity/get-started#configuring-the-world-manager","html":"<p>Here&#x27;s how to tailor the World Manager&#x27;s settings to your specific needs:</p>","isPage":false,"text":"Here&#x27;s how to tailor the World Manager&#x27;s settings to your specific needs:","title":"Configuring the World Manager","titles":["Getting Started","Setting up Unity Scene"]},"276":{"href":"/client/sdk/unity/get-started#default-configuration","html":"<p>The World Manager operates with a default configuration called <code>WorldManagerDataLocalConfig</code>, residing in <code>Dojo/Runtime/Config</code>.</p><p><img src=\"/unity/world-manager-data.png\" alt=\"world-manager-data\"/>\nFeel free to modify this configuration directly if it suits your project&#x27;s requirements.</p>","isPage":false,"text":"The World Manager operates with a default configuration called WorldManagerDataLocalConfig, residing in Dojo/Runtime/Config.\nFeel free to modify this configuration directly if it suits your project&#x27;s requirements.","title":"Default Configuration","titles":["Getting Started","Setting up Unity Scene","Configuring the World Manager"]},"277":{"href":"/client/sdk/unity/get-started#creating-custom-configurations","html":"<p>To create separate configuration files for different environments (like Slot), follow these simple steps:</p><p>In the <code>Project</code> window, right-click and choose <code>Create &gt; ScriptableObjects &gt; WorldManagerData</code>.\nCustomize the configuration values within this new ScriptableObject instance.</p>","isPage":false,"text":"To create separate configuration files for different environments (like Slot), follow these simple steps:In the Project window, right-click and choose Create &gt; ScriptableObjects &gt; WorldManagerData.\nCustomize the configuration values within this new ScriptableObject instance.","title":"Creating Custom Configurations","titles":["Getting Started","Setting up Unity Scene","Configuring the World Manager"]},"278":{"href":"/client/sdk/unity/get-started#applying-a-configuration","html":"<p>To use a specific configuration, locate the <code>WorldManager</code> game object in your scene.\nDrag the desired ScriptableObject (either the default one or your custom configuration) onto the <code>DojoConfig</code> field within the <code>WorldManager</code> component.</p></div><div data-depth=\"3\">","isPage":false,"text":"To use a specific configuration, locate the WorldManager game object in your scene.\nDrag the desired ScriptableObject (either the default one or your custom configuration) onto the DojoConfig field within the WorldManager component.","title":"Applying a Configuration","titles":["Getting Started","Setting up Unity Scene","Configuring the World Manager"]},"279":{"href":"/client/sdk/unity/get-started#adding-binding-models","html":"<ul>\n<li>\n<p>Generate Models: If you haven&#x27;t already created your model bindings, please refer to the <a href=\"/client/sdk/unity/important-concepts#bingen\">Bingen section</a> for step-by-step instructions on how to do so.</p>\n</li>\n<li>\n<p>Import Models: Locate the <code>bindings/unity/Models</code> folder within your Dojo project. Simply drag the desired <code>model</code> files from this folder into your Unity project. The <code>Synchronization Master</code> will automatically detect and load these models for seamless data exchange.</p>\n</li>\n</ul><p><img src=\"/unity/bindings-example.png\" alt=\"bindings-example\"/></p></div></div>\n","isPage":false,"text":"\n\nGenerate Models: If you haven&#x27;t already created your model bindings, please refer to the Bingen section for step-by-step instructions on how to do so.\n\n\nImport Models: Locate the bindings/unity/Models folder within your Dojo project. Simply drag the desired model files from this folder into your Unity project. The Synchronization Master will automatically detect and load these models for seamless data exchange.\n\n\n","title":"Adding Binding Models","titles":["Getting Started","Setting up Unity Scene"]},"280":{"href":"/client/sdk/unity/get-started#calling-systems","html":"\n<p>This section explores the process of interacting with Dojo systems from Unity, which involves these steps: Account creation, contract assembly, and execution.</p>\n","isPage":false,"text":"\nThis section explores the process of interacting with Dojo systems from Unity, which involves these steps: Account creation, contract assembly, and execution.\n","title":"Calling systems","titles":["Getting Started"]},"281":{"href":"/client/sdk/unity/get-started#account-creation","html":"\n<p>We have two options for creating an account: a simple account or a burner account.</p>\n","isPage":false,"text":"\nWe have two options for creating an account: a simple account or a burner account.\n","title":"Account Creation","titles":["Getting Started","Calling systems"]},"282":{"href":"/client/sdk/unity/get-started#simple-account-creation","html":"\n<p>To create a simple account, follow this code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Starknet</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> UnityEngine</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">void</span><span style=\"color:#DCBDFB\"> Start</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    var</span><span style=\"color:#F69D50\"> provider</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> JsonRpcClient</span><span style=\"color:#ADBAC7\">(dojoConfig.rpcUrl);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    var</span><span style=\"color:#F69D50\"> signer</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> SigningKey</span><span style=\"color:#ADBAC7\">(masterPrivateKey);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    var</span><span style=\"color:#F69D50\"> account</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> Account</span><span style=\"color:#ADBAC7\">(provider, signer, </span><span style=\"color:#F47067\">new</span><span style=\"color:#F69D50\"> FieldElement</span><span style=\"color:#ADBAC7\">(masterAddress));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nTo create a simple account, follow this code:\nusing Dojo;\nusing Dojo.Starknet;\nusing UnityEngine;\n \nvoid Start()\n{\n    var provider = new JsonRpcClient(dojoConfig.rpcUrl);\n    var signer = new SigningKey(masterPrivateKey);\n    var account = new Account(provider, signer, new FieldElement(masterAddress));\n}\n","title":"Simple Account Creation","titles":["Getting Started","Calling systems","Account Creation"]},"283":{"href":"/client/sdk/unity/get-started#burner-account-creation","html":"\n<p>For a burner account, execute the following code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Starknet</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> UnityEngine</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">async</span><span style=\"color:#F47067\"> void</span><span style=\"color:#DCBDFB\"> Start</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Account</span><span style=\"color:#F69D50\"> burnerAccount</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> await</span><span style=\"color:#DCBDFB\"> CreateBurnerAccount</span><span style=\"color:#ADBAC7\">(dojoConfig.rpcUrl, masterAddress, masterPrivateKey);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">private</span><span style=\"color:#F47067\"> async</span><span style=\"color:#F69D50\"> Task</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">Account</span><span style=\"color:#ADBAC7\">&gt; </span><span style=\"color:#DCBDFB\">CreateBurnerAccount</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">string</span><span style=\"color:#F69D50\"> rpcUrl</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F47067\">string</span><span style=\"color:#F69D50\"> masterAddress</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F47067\">string</span><span style=\"color:#F69D50\"> masterPrivateKey</span><span style=\"color:#ADBAC7\"> )</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    var</span><span style=\"color:#F69D50\"> provider</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> JsonRpcClient</span><span style=\"color:#ADBAC7\">(rpcUrl);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    var</span><span style=\"color:#F69D50\"> signer</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> SigningKey</span><span style=\"color:#ADBAC7\">(masterPrivateKey);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    var</span><span style=\"color:#F69D50\"> account</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> Account</span><span style=\"color:#ADBAC7\">(provider, signer, </span><span style=\"color:#F47067\">new</span><span style=\"color:#F69D50\"> FieldElement</span><span style=\"color:#ADBAC7\">(masterAddress));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    BurnerManager</span><span style=\"color:#F69D50\"> burnerManager</span><span style=\"color:#F47067\"> =</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> BurnerManager</span><span style=\"color:#ADBAC7\">(provider, account);</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    return</span><span style=\"color:#F47067\"> await</span><span style=\"color:#ADBAC7\"> burnerManager.</span><span style=\"color:#DCBDFB\">DeployBurner</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<blockquote>\n<p>Replace <code>masterAddress</code> and <code>masterPrivateKey</code> with the <strong>account Address</strong> and <strong>private key</strong> of the prefunded Katana account.\n<img src=\"/unity/prefunded-account-address.png\" alt=\"bindings-example\"/></p>\n</blockquote>\n","isPage":false,"text":"\nFor a burner account, execute the following code:\nusing Dojo;\nusing Dojo.Starknet;\nusing UnityEngine;\n \nasync void Start()\n{\n    Account burnerAccount = await CreateBurnerAccount(dojoConfig.rpcUrl, masterAddress, masterPrivateKey);\n}\n \nprivate async Task&lt;Account&gt; CreateBurnerAccount(string rpcUrl, string masterAddress, string masterPrivateKey )\n{\n    var provider = new JsonRpcClient(rpcUrl);\n    var signer = new SigningKey(masterPrivateKey);\n    var account = new Account(provider, signer, new FieldElement(masterAddress));\n \n    BurnerManager burnerManager = new BurnerManager(provider, account);\n    return await burnerManager.DeployBurner();\n}\n\nReplace masterAddress and masterPrivateKey with the account Address and private key of the prefunded Katana account.\n\n\n","title":"Burner Account Creation","titles":["Getting Started","Calling systems","Account Creation"]},"284":{"href":"/client/sdk/unity/get-started#contract-assembly-and-execution","html":"\n<p>The <a href=\"/client/sdk/unity/important-concepts#bingen\">Bingen plugin</a> also generates bindings for contracts. Therefore, the first step is to move these bindings into your Unity project.</p>\n<p>Let&#x27;s consider a contract named PlayerSystem within our Dojo project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[starknet</span><span style=\"color:#F47067\">::</span><span style=\"color:#ADBAC7\">interface]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">trait</span><span style=\"color:#F69D50\"> IPlayerSystem</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">TContractState</span><span style=\"color:#ADBAC7\">&gt; {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    fn</span><span style=\"color:#DCBDFB\"> create</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        ref</span><span style=\"color:#6CB6FF\"> self</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> TContractState</span><span style=\"color:#ADBAC7\">, player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">, player_name</span><span style=\"color:#F47067\">:</span><span style=\"color:#ADBAC7\"> felt252, gender_id</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u64</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>The generated bindings would be as follows:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> System</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> System</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Threading</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Tasks</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Starknet</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> UnityEngine</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> dojo_bindings</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">public</span><span style=\"color:#F47067\"> class</span><span style=\"color:#F69D50\"> Player_system</span><span style=\"color:#ADBAC7\"> : </span><span style=\"color:#F69D50\">MonoBehaviour</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    // The address of this contract</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    public</span><span style=\"color:#F47067\"> string</span><span style=\"color:#F69D50\"> contractAddress</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // Call the `create` system with the specified Account and calldata</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    public</span><span style=\"color:#F47067\"> async</span><span style=\"color:#F69D50\"> Task</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">FieldElement</span><span style=\"color:#ADBAC7\">&gt; </span><span style=\"color:#DCBDFB\">Create</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">Account</span><span style=\"color:#F69D50\"> account</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">FieldElement</span><span style=\"color:#F69D50\"> player</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F47067\">string</span><span style=\"color:#F69D50\"> player_name</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F47067\">ulong</span><span style=\"color:#F69D50\"> gender_id</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        return</span><span style=\"color:#F47067\"> await</span><span style=\"color:#ADBAC7\"> account.</span><span style=\"color:#DCBDFB\">ExecuteRaw</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">new</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Call</span><span style=\"color:#ADBAC7\">[] {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">            new</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Call</span><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                to </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> contractAddress,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                selector </span><span style=\"color:#F47067\">=</span><span style=\"color:#96D0FF\"> &quot;create&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                calldata </span><span style=\"color:#F47067\">=</span><span style=\"color:#F47067\"> new</span><span style=\"color:#F69D50\"> dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">FieldElement</span><span style=\"color:#ADBAC7\">[] {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    new</span><span style=\"color:#F69D50\"> FieldElement</span><span style=\"color:#ADBAC7\">(player.</span><span style=\"color:#DCBDFB\">Hex</span><span style=\"color:#ADBAC7\">()).</span><span style=\"color:#DCBDFB\">Inner</span><span style=\"color:#ADBAC7\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    new</span><span style=\"color:#F69D50\"> FieldElement</span><span style=\"color:#ADBAC7\">(player_name).</span><span style=\"color:#DCBDFB\">Inner</span><span style=\"color:#ADBAC7\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    new</span><span style=\"color:#F69D50\"> FieldElement</span><span style=\"color:#ADBAC7\">(gender_id.</span><span style=\"color:#DCBDFB\">ToString</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;X&#x27;</span><span style=\"color:#ADBAC7\">)).</span><span style=\"color:#DCBDFB\">Inner</span><span style=\"color:#ADBAC7\">()</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Let&#x27;s break down the concepts:</p>\n<ul>\n<li><code>public string contractAddress;</code>: This indicates the contract address of the <code>Player_system</code>, obtained as output from <code>sozo migrate</code>.</li>\n<li><code>new dojo.Call{ ... }</code>: This section creates a new call, where the <code>selector</code> is the name of the system to call, and the <code>calldata</code> represents the parameters. It&#x27;s crucial to note that strings, uints and ulongs must be converted into hexadecimal representation.</li>\n<li><code>account.ExecuteRaw(new dojo.Call[] { ... })</code>: This method executes the call, where <code>account</code> can be either a simple account or a burner account.</li>\n</ul>\n<blockquote>\n<p>It&#x27;s possible to execute an array of calls simultaneously by passing multiple calls to this method. For example:</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">public</span><span style=\"color:#F47067\"> async</span><span style=\"color:#F69D50\"> Task</span><span style=\"color:#ADBAC7\">&lt;</span><span style=\"color:#F69D50\">FieldElement</span><span style=\"color:#ADBAC7\">&gt; </span><span style=\"color:#DCBDFB\">ExecuteCalls</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">Account</span><span style=\"color:#F69D50\"> account</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Call</span><span style=\"color:#ADBAC7\">[] </span><span style=\"color:#F69D50\">calls</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    return</span><span style=\"color:#F47067\"> await</span><span style=\"color:#ADBAC7\"> account.</span><span style=\"color:#DCBDFB\">ExecuteRaw</span><span style=\"color:#ADBAC7\">(calls);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe Bingen plugin also generates bindings for contracts. Therefore, the first step is to move these bindings into your Unity project.\nLet&#x27;s consider a contract named PlayerSystem within our Dojo project:\n#[starknet::interface]\ntrait IPlayerSystem&lt;TContractState&gt; {\n    fn create(\n        ref self: TContractState, player: ContractAddress, player_name: felt252, gender_id: u64\n    );\n}\nThe generated bindings would be as follows:\nusing System;\nusing System.Threading.Tasks;\nusing Dojo;\nusing Dojo.Starknet;\nusing UnityEngine;\nusing dojo_bindings;\n \npublic class Player_system : MonoBehaviour {\n    // The address of this contract\n    public string contractAddress;\n \n    // Call the `create` system with the specified Account and calldata\n    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.\n    public async Task&lt;FieldElement&gt; Create(Account account, FieldElement player, string player_name, ulong gender_id) {\n        return await account.ExecuteRaw(new dojo.Call[] {\n            new dojo.Call{\n                to = contractAddress,\n                selector = &quot;create&quot;,\n                calldata = new dojo.FieldElement[] {\n                    new FieldElement(player.Hex()).Inner(),\n                    new FieldElement(player_name).Inner(),\n                    new FieldElement(gender_id.ToString(&#x27;X&#x27;)).Inner()\n                }\n            }\n        });\n    }\n}\nLet&#x27;s break down the concepts:\n\npublic string contractAddress;: This indicates the contract address of the Player_system, obtained as output from sozo migrate.\nnew dojo.Call{ ... }: This section creates a new call, where the selector is the name of the system to call, and the calldata represents the parameters. It&#x27;s crucial to note that strings, uints and ulongs must be converted into hexadecimal representation.\naccount.ExecuteRaw(new dojo.Call[] { ... }): This method executes the call, where account can be either a simple account or a burner account.\n\n\nIt&#x27;s possible to execute an array of calls simultaneously by passing multiple calls to this method. For example:\n\npublic async Task&lt;FieldElement&gt; ExecuteCalls(Account account, dojo.Call[] calls)\n{\n    return await account.ExecuteRaw(calls);\n}\n","title":"Contract assembly and execution","titles":["Getting Started","Calling systems"]},"285":{"href":"/client/sdk/unity/get-started#building-your-dojo-game","html":"\n<p>The final stage is building your onchain game for deployment. Dojo currently supports building for both <em>desktop</em> and <em>WebGL</em> platforms.</p>\n","isPage":false,"text":"\nThe final stage is building your onchain game for deployment. Dojo currently supports building for both desktop and WebGL platforms.\n","title":"Building your Dojo Game","titles":["Getting Started"]},"286":{"href":"/client/sdk/unity/get-started#building-for-desktop-windows-macos-linux","html":"\n<ul>\n<li>Navigate to <code>File/Build Settings</code>.</li>\n<li>From the right menu choose <code>Windows, Mac, Linux</code> option.</li>\n<li>From the Platform dropdown, select the target desktop platform (Windows, macOS, or Linux) based on your needs.</li>\n<li>Click the Build button to initiate the build process.</li>\n</ul>\n<p><img src=\"/unity/build-desktop.png\" alt=\"build-desktop\"/></p>\n","isPage":false,"text":"\n\nNavigate to File/Build Settings.\nFrom the right menu choose Windows, Mac, Linux option.\nFrom the Platform dropdown, select the target desktop platform (Windows, macOS, or Linux) based on your needs.\nClick the Build button to initiate the build process.\n\n\n","title":"Building for Desktop (Windows, macOS, Linux)","titles":["Getting Started","Building your Dojo Game"]},"287":{"href":"/client/sdk/unity/get-started#building-for-webgl","html":"\n<blockquote>\n<p>Ensure the WebGL module is installed for your current Unity version. If not:</p>\n</blockquote>\n<ul>\n<li>Open the <code>Unity Hub</code>.</li>\n<li>Go to <code>Installs</code>.</li>\n<li>Select the Unity version matching your project.</li>\n<li>Click <code>Add Modules</code>.</li>\n<li>Under the Modules tab, locate and install the <code>WebGL</code> module.</li>\n</ul>\n<p><img src=\"/unity/webgl-module.png\" alt=\"unityhub-add-module\"/></p>\n<blockquote>\n<p>Configure WebGL Player Settings:</p>\n</blockquote>\n<ul>\n<li>Go to <code>Edit/Project Settings/Player</code> (or navigate directly using the Project Settings window).</li>\n<li>Select the <code>WebGL</code> tab.</li>\n<li>Under <code>Resolution and Presentation</code>, ensure the <code>Dojo Template</code> is selected.</li>\n</ul>\n<p><img src=\"/unity/webgl-player-settings.png\" alt=\"unityhub-add-module\"/></p>\n<p>Build Steps:</p>\n<ul>\n<li>Navigate to <code>File/Build Settings</code>.</li>\n<li>From the right menu choose <code>WebGL</code> option.</li>\n<li>Click the Build button to build your game for WebGL.</li>\n</ul>\n<p><img src=\"/unity/build-webgl.png\" alt=\"build-webgl\"/></p>","isPage":false,"text":"\n\nEnsure the WebGL module is installed for your current Unity version. If not:\n\n\nOpen the Unity Hub.\nGo to Installs.\nSelect the Unity version matching your project.\nClick Add Modules.\nUnder the Modules tab, locate and install the WebGL module.\n\n\n\nConfigure WebGL Player Settings:\n\n\nGo to Edit/Project Settings/Player (or navigate directly using the Project Settings window).\nSelect the WebGL tab.\nUnder Resolution and Presentation, ensure the Dojo Template is selected.\n\n\nBuild Steps:\n\nNavigate to File/Build Settings.\nFrom the right menu choose WebGL option.\nClick the Build button to build your game for WebGL.\n\n","title":"Building for WebGL","titles":["Getting Started","Building your Dojo Game"]},"288":{"href":"/client/sdk/unity/important-concepts#dojo-unity-concepts","html":"</header>\n<p>To dive into the exciting world of onchain games and worlds with Unity, let&#x27;s explore some essential concepts:</p>\n","isPage":true,"text":"\nTo dive into the exciting world of onchain games and worlds with Unity, let&#x27;s explore some essential concepts:\n","title":"Dojo Unity Concepts","titles":[]},"289":{"href":"/client/sdk/unity/important-concepts#world-manager","html":"\n<p>The World Manager is the central hub for organizing and controlling entities within your Dojo world in Unity.</p>\n<p><img src=\"/unity/world-manager.png\" alt=\"world-manager\"/></p>\n<p>During initialization, the World Manager receives WorldManagerData, which defines essential settings like your Torii URL, RPC URL, and world address. While these settings are initially provided, you have the flexibility to adjust them by creating different scriptable objects.</p>\n<p><img src=\"/unity/world-manager-data.png\" alt=\"world-manager-data\"/></p>\n<p>In Unity, entities are represented by GameObject instances. The World Manager simplifies their management by offering methods to:</p>\n<ul>\n<li>Add and remove entities</li>\n<li>Access entities by name or list all entities</li>\n</ul>\n","isPage":false,"text":"\nThe World Manager is the central hub for organizing and controlling entities within your Dojo world in Unity.\n\nDuring initialization, the World Manager receives WorldManagerData, which defines essential settings like your Torii URL, RPC URL, and world address. While these settings are initially provided, you have the flexibility to adjust them by creating different scriptable objects.\n\nIn Unity, entities are represented by GameObject instances. The World Manager simplifies their management by offering methods to:\n\nAdd and remove entities\nAccess entities by name or list all entities\n\n","title":"World Manager","titles":["Dojo Unity Concepts"]},"290":{"href":"/client/sdk/unity/important-concepts#synchronization-master","html":"\n<p>The Synchronization Master acts as the bridge between Unity and your Dojo world, seamlessly synchronizing and managing entities.</p>\n<p><img src=\"/unity/sync-master.png\" alt=\"sync-master\"/></p>\n<p>Key Features:</p>\n<ul>\n<li>\n<p>Control synchronization: Set the maximum number of entities to synchronize.</p>\n</li>\n<li>\n<p>Event-driven communication:</p>\n<ul>\n<li>OnSynchronized: Notifies you when entities were successfully synchronized from Dojo world to Unity.</li>\n<li>OnEntitySpawned: Triggered whenever a new entity is spawned in the Unity environment.</li>\n</ul>\n</li>\n<li>\n<p>Dynamic entity management:</p>\n<ul>\n<li>SynchronizeEntities: Asynchronously retrieves and spawns entities from the Dojo world in the Unity environment.</li>\n<li>HandleEntityUpdate: Dynamically updates existing entities or spawns new ones based on changes received from the Dojo world, ensuring seamless synchronization.</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\nThe Synchronization Master acts as the bridge between Unity and your Dojo world, seamlessly synchronizing and managing entities.\n\nKey Features:\n\n\nControl synchronization: Set the maximum number of entities to synchronize.\n\n\nEvent-driven communication:\n\nOnSynchronized: Notifies you when entities were successfully synchronized from Dojo world to Unity.\nOnEntitySpawned: Triggered whenever a new entity is spawned in the Unity environment.\n\n\n\nDynamic entity management:\n\nSynchronizeEntities: Asynchronously retrieves and spawns entities from the Dojo world in the Unity environment.\nHandleEntityUpdate: Dynamically updates existing entities or spawns new ones based on changes received from the Dojo world, ensuring seamless synchronization.\n\n\n\n","title":"Synchronization Master","titles":["Dojo Unity Concepts"]},"291":{"href":"/client/sdk/unity/important-concepts#models","html":"\n<p>Models serve as the bridge between the Unity environment and the Dojo world, ensuring seamless synchronization of data. Changes or interactions occurring in Unity are mirrored accurately in the Dojo world, and vice versa.\nWhile you have the flexibility to incorporate as many models as necessary, it&#x27;s vital to ensure that these models align with those present in your Dojo world for effective synchronization.</p>\n<p>⚠️ Before embarking on game development with Dojo in Unity, it&#x27;s essential to grasp the fundamentals of <strong>models</strong> within the Dojo environment.</p>\n<blockquote>\n<p>💡 Explore the following sections to gain insights:</p>\n</blockquote>\n<ul>\n<li>\n<p><a href=\"/cairo/models.md\">Models Definition</a>: Understand the structure and functionality of models within Dojo.</p>\n</li>\n<li>\n<p><a href=\"/cairo/entities.md\">Entity Definition</a>: Learn about entities in the context of Dojo.</p>\n</li>\n<li>\n<p><a href=\"/cairo/hello-dojo.md\">Dojo as an ECS in 15 Minutes</a>: Dive into a quick overview of Dojo&#x27;s Entity-Component-System (ECS) architecture.</p>\n</li>\n</ul>\n","isPage":false,"text":"\nModels serve as the bridge between the Unity environment and the Dojo world, ensuring seamless synchronization of data. Changes or interactions occurring in Unity are mirrored accurately in the Dojo world, and vice versa.\nWhile you have the flexibility to incorporate as many models as necessary, it&#x27;s vital to ensure that these models align with those present in your Dojo world for effective synchronization.\n⚠️ Before embarking on game development with Dojo in Unity, it&#x27;s essential to grasp the fundamentals of models within the Dojo environment.\n\n💡 Explore the following sections to gain insights:\n\n\n\nModels Definition: Understand the structure and functionality of models within Dojo.\n\n\nEntity Definition: Learn about entities in the context of Dojo.\n\n\nDojo as an ECS in 15 Minutes: Dive into a quick overview of Dojo&#x27;s Entity-Component-System (ECS) architecture.\n\n\n","title":"Models","titles":["Dojo Unity Concepts"]},"292":{"href":"/client/sdk/unity/important-concepts#bingen","html":"\n<p>📖 A codegen plugin is available to automate the creation of C# bindings (components and contracts) for your Unity world.</p>\n<p>To use this feature, execute the following command within your Cairo project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">  sozo build </span><span style=\"color:#F47067\">--</span><span style=\"color:#ADBAC7\">unity</span></span></code></pre></figure>\n<p>Once executed, you can proceed by either moving the files generated in the <code>bindings/unity</code> directory to your Unity project, or specify a custom output directory using:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">  sozo build </span><span style=\"color:#F47067\">--</span><span style=\"color:#ADBAC7\">unity </span><span style=\"color:#F47067\">--</span><span style=\"color:#ADBAC7\">output</span><span style=\"color:#F47067\">-</span><span style=\"color:#ADBAC7\">bindings </span><span style=\"color:#F47067\">./</span><span style=\"color:#ADBAC7\">your</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">unity</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">project</span><span style=\"color:#F47067\">/</span><span style=\"color:#ADBAC7\">folder</span></span></code></pre></figure>\n<blockquote>\n<p>⚠️ The version of dojo must be &gt;= <code>0.6.0-alpha.0</code>. To install it run:</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">  dojoup </span><span style=\"color:#F47067\">--</span><span style=\"color:#ADBAC7\">version v0</span><span style=\"color:#F47067\">.</span><span style=\"color:#6CB6FF\">6.0</span><span style=\"color:#F47067\">-</span><span style=\"color:#ADBAC7\">alpha</span><span style=\"color:#F47067\">.</span><span style=\"color:#6CB6FF\">0</span></span></code></pre></figure>\n","isPage":false,"text":"\n📖 A codegen plugin is available to automate the creation of C# bindings (components and contracts) for your Unity world.\nTo use this feature, execute the following command within your Cairo project:\n  sozo build --unity\nOnce executed, you can proceed by either moving the files generated in the bindings/unity directory to your Unity project, or specify a custom output directory using:\n  sozo build --unity --output-bindings ./your/unity/project/folder\n\n⚠️ The version of dojo must be &gt;= 0.6.0-alpha.0. To install it run:\n\n  dojoup --version v0.6.0-alpha.0\n","title":"Bingen","titles":["Dojo Unity Concepts","Models"]},"293":{"href":"/client/sdk/unity/important-concepts#example","html":"\n<blockquote>\n<p>Model in Dojo:</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Model</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">struct</span><span style=\"color:#F69D50\"> Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[key]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    player</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> ContractAddress</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    remaining</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> u8</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    last_direction</span><span style=\"color:#F47067\">:</span><span style=\"color:#F69D50\"> Direction</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">#[derive(</span><span style=\"color:#F69D50\">Serde</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Copy</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Drop</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">Introspect</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">enum</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    None</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Left</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Right</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Up</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Down</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<blockquote>\n<p>Representation in Unity:</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"cs\" data-theme=\"github-dark-dimmed\"><code data-language=\"cs\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> System</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Numerics</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Starknet</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">using</span><span style=\"color:#F69D50\"> Dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">Torii</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">public</span><span style=\"color:#F47067\"> enum</span><span style=\"color:#F69D50\"> Direction</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    None</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Left</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Right</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Up</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    Down</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">public</span><span style=\"color:#F47067\"> class</span><span style=\"color:#F69D50\"> Moves</span><span style=\"color:#ADBAC7\"> : </span><span style=\"color:#F69D50\">ModelInstance</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    [</span><span style=\"color:#F69D50\">ModelField</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;player&quot;</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    public</span><span style=\"color:#F69D50\"> FieldElement</span><span style=\"color:#F69D50\"> player</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    [</span><span style=\"color:#F69D50\">ModelField</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;remaining&quot;</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    public</span><span style=\"color:#F47067\"> byte</span><span style=\"color:#F69D50\"> remaining</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    [</span><span style=\"color:#F69D50\">ModelField</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&quot;last_direction&quot;</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    public</span><span style=\"color:#F69D50\"> Direction</span><span style=\"color:#F69D50\"> lastDirection</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    void</span><span style=\"color:#DCBDFB\"> Start</span><span style=\"color:#ADBAC7\">() {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F47067\">    void</span><span style=\"color:#DCBDFB\"> Update</span><span style=\"color:#ADBAC7\">() {}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>","isPage":false,"text":"\n\nModel in Dojo:\n\n#[derive(Model, Drop, Serde)]\nstruct Moves {\n    #[key]\n    player: ContractAddress,\n    remaining: u8,\n    last_direction: Direction\n}\n \n#[derive(Serde, Copy, Drop, Introspect)]\nenum Direction {\n    None,\n    Left,\n    Right,\n    Up,\n    Down,\n}\n \n\nRepresentation in Unity:\n\nusing System.Numerics;\nusing Dojo;\nusing Dojo.Starknet;\nusing Dojo.Torii;\n \npublic enum Direction\n{\n    None,\n    Left,\n    Right,\n    Up,\n    Down,\n \n}\n \npublic class Moves : ModelInstance\n{\n    [ModelField(&quot;player&quot;)]\n    public FieldElement player;\n    [ModelField(&quot;remaining&quot;)]\n    public byte remaining;\n    [ModelField(&quot;last_direction&quot;)]\n    public Direction lastDirection;\n \n    void Start() {}\n \n    void Update() {}\n}","title":"Example","titles":["Dojo Unity Concepts","Models"]},"294":{"href":"/client/sdk/unity/overview#dojounity","html":"</header>\n","isPage":true,"text":"\n","title":"Dojo.unity","titles":[]},"295":{"href":"/client/sdk/unity/overview#overview","html":"\n<p>Dojo.unity is the official Unity SDK for interacting with Dojo worlds to develop web and desktop 2D and 3D games.</p>\n","isPage":false,"text":"\nDojo.unity is the official Unity SDK for interacting with Dojo worlds to develop web and desktop 2D and 3D games.\n","title":"Overview","titles":["Dojo.unity"]},"296":{"href":"/client/sdk/unity/overview#prerequisites","html":"\n<p>Before getting started, you must follow a few steps to get the project up and running:</p>\n<div data-vocs-steps=\"true\"><div data-depth=\"3\">","isPage":false,"text":"\nBefore getting started, you must follow a few steps to get the project up and running:\n","title":"Prerequisites","titles":["Dojo.unity"]},"297":{"href":"/client/sdk/unity/overview#install-dependencies","html":"<ul>\n<li>Install <a href=\"/toolchain/dojoup.md\">Dojo</a></li>\n</ul><blockquote>\n<p>Required version &gt;= <code>0.4.0</code></p>\n</blockquote><ul>\n<li>Install <a href=\"https://unity.com/download\">Unity</a></li>\n</ul><blockquote>\n<p>Required version &gt;= <code>2022.3.15f1</code></p>\n</blockquote></div><div data-depth=\"3\">","isPage":false,"text":"\nInstall Dojo\n\nRequired version &gt;= 0.4.0\n\nInstall Unity\n\nRequired version &gt;= 2022.3.15f1\n","title":"Install dependencies","titles":["Dojo.unity","Prerequisites"]},"298":{"href":"/client/sdk/unity/overview#setting-up-dojounity-sdk","html":"<p>To get started with the Dojo.Unity SDK, follow these steps:</p><ul>\n<li><strong>Download the dojo.unity package:</strong> Visit the <a href=\"https://github.com/dojoengine/dojo.unity/releases\">dojo.unity releases page</a> and download the latest version of the <code>dojo.unitypackage</code>.</li>\n<li><strong>Open or Create a Unity Project:</strong> Launch Unity and either create a new project or open an existing one where you intend to integrate Dojo.unity</li>\n<li><strong>Import the Dojo.unity Package:</strong> Navigate to <code>Assets/Import Package/Custom Package</code> within your Unity project.\nChoose the downloaded <code>dojo.unitypackage</code> file.\n<img src=\"/unity/import-unitypackage-01.png\" alt=\"unitypackage01\"/>\nFinally, ensure to check only the aimed platforms for your project.\n<img src=\"/unity/import-unitypackage-02.png\" alt=\"unitypackage02\"/></li>\n</ul><blockquote>\n<p><strong>Warning:</strong> If your project includes the <code>Plugins/iOS</code> directory, note that it requires <strong>Git Large File Storage (LFS)</strong> to be uploaded. Refer to <a href=\"https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-git-large-file-storage\">GitHub&#x27;s documentation on Git LFS</a> for more information.</p>\n</blockquote><ul>\n<li><strong>Import Newtonsoft&#x27;s Json.NET Dependency:</strong> In Unity, navigate to <code>Window/Package Manager</code>.\n<img src=\"/unity/unitypackage-dependencies-01.png\" alt=\"unitypackage01\"/>\nOnce the <code>Package Manager</code> window opens, select <code>Add package from git URL</code>\n<img src=\"/unity/unitypackage-dependencies-02.png\" alt=\"unitypackage02\"/>\nEnter <code>com.unity.nuget.newtonsoft-json</code> as the package URL, click <code>Add</code> and then <code>Done</code> to import the dependency.</li>\n</ul></div></div>","isPage":false,"text":"To get started with the Dojo.Unity SDK, follow these steps:\nDownload the dojo.unity package: Visit the dojo.unity releases page and download the latest version of the dojo.unitypackage.\nOpen or Create a Unity Project: Launch Unity and either create a new project or open an existing one where you intend to integrate Dojo.unity\nImport the Dojo.unity Package: Navigate to Assets/Import Package/Custom Package within your Unity project.\nChoose the downloaded dojo.unitypackage file.\n\nFinally, ensure to check only the aimed platforms for your project.\n\n\nWarning: If your project includes the Plugins/iOS directory, note that it requires Git Large File Storage (LFS) to be uploaded. Refer to GitHub&#x27;s documentation on Git LFS for more information.\n\nImport Newtonsoft&#x27;s Json.NET Dependency: In Unity, navigate to Window/Package Manager.\n\nOnce the Package Manager window opens, select Add package from git URL\n\nEnter com.unity.nuget.newtonsoft-json as the package URL, click Add and then Done to import the dependency.\n","title":"Setting up Dojo.unity sdk","titles":["Dojo.unity","Prerequisites"]},"299":{"href":"/toolchain/katana/rpc/dev#dev-namespace","html":"\n<p>The <code>dev</code> API provides a way to manipulate the blockchain state at runtime. This namespace is only accessible when the <code>--dev</code> flag is enabled.</p>\n","isPage":true,"text":"\nThe dev API provides a way to manipulate the blockchain state at runtime. This namespace is only accessible when the --dev flag is enabled.\n","title":"dev Namespace","titles":[null]},"300":{"href":"/toolchain/katana/rpc/dev#generateblock","html":"\n<p>Mines a new block which includes all currently pending transactions.</p>\n<table><thead><tr><th>Method invocation</th></tr></thead><tbody><tr><td><code>{ &quot;method&quot;: &quot;dev_generateBlock&quot;, &quot;params&quot;: [] }</code></td></tr></tbody></table>\n","isPage":false,"text":"\nMines a new block which includes all currently pending transactions.\nMethod invocation{ &quot;method&quot;: &quot;dev_generateBlock&quot;, &quot;params&quot;: [] }\n","title":"generateBlock","titles":[null,"dev Namespace"]},"301":{"href":"/toolchain/katana/rpc/dev#nextblocktimestamp","html":"\n<p>Get the timestamp for the next block.</p>\n<table><thead><tr><th>Method invocation</th></tr></thead><tbody><tr><td><code>{ &quot;method&quot;: &quot;dev_nextBlockTimestamp&quot;, &quot;params&quot;: [] }</code></td></tr></tbody></table>\n","isPage":false,"text":"\nGet the timestamp for the next block.\nMethod invocation{ &quot;method&quot;: &quot;dev_nextBlockTimestamp&quot;, &quot;params&quot;: [] }\n","title":"nextBlockTimestamp","titles":[null,"dev Namespace"]},"302":{"href":"/toolchain/katana/rpc/dev#increasenextblocktimestamp","html":"\n<p>Increase the time for the block by a given amount of time, in seconds.</p>\n<table><thead><tr><th>Method invocation</th></tr></thead><tbody><tr><td><code>{ &quot;method&quot;: &quot;dev_increaseNextBlockTimestamp&quot;, &quot;params&quot;: [ amount ] }</code></td></tr></tbody></table>\n","isPage":false,"text":"\nIncrease the time for the block by a given amount of time, in seconds.\nMethod invocation{ &quot;method&quot;: &quot;dev_increaseNextBlockTimestamp&quot;, &quot;params&quot;: [ amount ] }\n","title":"increaseNextBlockTimestamp","titles":[null,"dev Namespace"]},"303":{"href":"/toolchain/katana/rpc/dev#setnextblocktimestamp","html":"\n<p>Similar to <code>dev_increaseNextBlockTimestamp</code> but takes the exact timestamp that you want in the next block.</p>\n<table><thead><tr><th>Method invocation</th></tr></thead><tbody><tr><td><code>{ &quot;method&quot;: &quot;dev_setNextBlockTimestamp&quot;, &quot;params&quot;: [ timestamp ] }</code></td></tr></tbody></table>","isPage":false,"text":"\nSimilar to dev_increaseNextBlockTimestamp but takes the exact timestamp that you want in the next block.\nMethod invocation{ &quot;method&quot;: &quot;dev_setNextBlockTimestamp&quot;, &quot;params&quot;: [ timestamp ] }","title":"setNextBlockTimestamp","titles":[null,"dev Namespace"]},"304":{"href":"/toolchain/katana/rpc/katana#katana-namespace","html":"\n","isPage":true,"text":"\n","title":"katana Namespace","titles":[null]},"305":{"href":"/toolchain/katana/rpc/katana#predeployedaccounts","html":"\n<p>Get the info for all of the predeployed accounts.</p>\n<table><thead><tr><th>Method invocation</th></tr></thead><tbody><tr><td><code>{ &quot;method&quot;: &quot;katana_predeployedAccounts&quot;, &quot;params&quot;: [] }</code></td></tr></tbody></table>","isPage":false,"text":"\nGet the info for all of the predeployed accounts.\nMethod invocation{ &quot;method&quot;: &quot;katana_predeployedAccounts&quot;, &quot;params&quot;: [] }","title":"predeployedAccounts","titles":[null,"katana Namespace"]},"306":{"href":"/toolchain/katana/rpc/overview#json-rpc","html":"</header>\n","isPage":true,"text":"\n","title":"JSON-RPC","titles":[]},"307":{"href":"/toolchain/katana/rpc/overview#supported-transport-layers","html":"\n<p>JSON-RPC is provided on multiple transports. Katana supports HTTP, and WebSocket. Both transports are enabled by default.</p>\n","isPage":false,"text":"\nJSON-RPC is provided on multiple transports. Katana supports HTTP, and WebSocket. Both transports are enabled by default.\n","title":"Supported Transport Layers","titles":["JSON-RPC"]},"308":{"href":"/toolchain/katana/rpc/overview#supported-rpc-methods","html":"\n","isPage":false,"text":"\n","title":"Supported RPC Methods","titles":["JSON-RPC"]},"309":{"href":"/toolchain/katana/rpc/overview#namespaces","html":"\n<p>The RPC methods are categorized into the following namespaces:</p>\n<table><thead><tr><th>Namespace</th><th>Description</th></tr></thead><tbody><tr><td><a href=\"/toolchain/katana/rpc/starknet\"><code>starknet</code></a></td><td>-</td></tr><tr><td><a href=\"/toolchain/katana/rpc/katana\"><code>katana</code></a></td><td>-</td></tr><tr><td><a href=\"/toolchain/katana/rpc/torii\"><code>torii</code></a></td><td>-</td></tr><tr><td><a href=\"/toolchain/katana/rpc/dev\"><code>dev</code></a></td><td>-</td></tr></tbody></table>\n<p>Each RPC methods can be invoked by prefixing the method name with the namespace name and an underscore. For example, the <code>getTransactions</code> method in the <code>torii</code> namespace can be invoked as <code>torii_getTransactions</code>.</p>","isPage":false,"text":"\nThe RPC methods are categorized into the following namespaces:\nNamespaceDescriptionstarknet-katana-torii-dev-\nEach RPC methods can be invoked by prefixing the method name with the namespace name and an underscore. For example, the getTransactions method in the torii namespace can be invoked as torii_getTransactions.","title":"Namespaces","titles":["JSON-RPC","Supported RPC Methods"]},"310":{"href":"/toolchain/katana/rpc/starknet#starknet-namespace","html":"\n<p>Katana supports version <strong>v0.6.0</strong> of the Starknet JSON-RPC specifications. The full documentations for the RPC methods can be found <a href=\"https://github.com/starkware-libs/starknet-specs/tree/v0.6.0\">here</a>.</p>\n","isPage":true,"text":"\nKatana supports version v0.6.0 of the Starknet JSON-RPC specifications. The full documentations for the RPC methods can be found here.\n","title":"starknet Namespace","titles":[null]},"311":{"href":"/toolchain/katana/rpc/starknet#read-api","html":"\n<ul>\n<li>\n<p><code>starknet_blockNumber</code></p>\n</li>\n<li>\n<p><code>starknet_blockHashAndNumber</code></p>\n</li>\n<li>\n<p><code>starknet_getBlockWithTxs</code></p>\n</li>\n<li>\n<p><code>starknet_getBlockWithTxHashes</code></p>\n</li>\n<li>\n<p><code>starknet_getBlockTransactionCount</code></p>\n</li>\n<li>\n<p><code>starknet_getStateUpdate</code></p>\n</li>\n<li>\n<p><code>starknet_getTransactionByHash</code></p>\n</li>\n<li>\n<p><code>starknet_getTransactionStatus</code></p>\n</li>\n<li>\n<p><code>starknet_getTransactionReceipt</code></p>\n</li>\n<li>\n<p><code>starknet_getTransactionByBlockIdAndIndex</code></p>\n</li>\n<li>\n<p><code>starknet_call</code></p>\n</li>\n<li>\n<p><code>starknet_estimateFee</code></p>\n</li>\n<li>\n<p><code>starknet_estimateMessageFee</code></p>\n</li>\n<li>\n<p><code>starknet_chainId</code></p>\n</li>\n<li>\n<p><code>starknet_syncStatus</code></p>\n</li>\n<li>\n<p><code>starknet_getNonce</code></p>\n</li>\n<li>\n<p><code>starknet_getEvents</code></p>\n</li>\n<li>\n<p><code>starknet_getStorageAt</code></p>\n</li>\n<li>\n<p><code>starknet_getClassHashAt</code></p>\n</li>\n<li>\n<p><code>starknet_getClass</code></p>\n</li>\n<li>\n<p><code>starknet_getClassAt</code></p>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\nstarknet_blockNumber\n\n\nstarknet_blockHashAndNumber\n\n\nstarknet_getBlockWithTxs\n\n\nstarknet_getBlockWithTxHashes\n\n\nstarknet_getBlockTransactionCount\n\n\nstarknet_getStateUpdate\n\n\nstarknet_getTransactionByHash\n\n\nstarknet_getTransactionStatus\n\n\nstarknet_getTransactionReceipt\n\n\nstarknet_getTransactionByBlockIdAndIndex\n\n\nstarknet_call\n\n\nstarknet_estimateFee\n\n\nstarknet_estimateMessageFee\n\n\nstarknet_chainId\n\n\nstarknet_syncStatus\n\n\nstarknet_getNonce\n\n\nstarknet_getEvents\n\n\nstarknet_getStorageAt\n\n\nstarknet_getClassHashAt\n\n\nstarknet_getClass\n\n\nstarknet_getClassAt\n\n\n","title":"Read API","titles":[null,"starknet Namespace"]},"312":{"href":"/toolchain/katana/rpc/starknet#write-api","html":"\n<ul>\n<li><code>starknet_addInvokeTransaction</code></li>\n<li><code>starknet_addDeclareTransaction</code></li>\n<li><code>starknet_addDeployAccountTransaction</code></li>\n</ul>\n","isPage":false,"text":"\n\nstarknet_addInvokeTransaction\nstarknet_addDeclareTransaction\nstarknet_addDeployAccountTransaction\n\n","title":"Write API","titles":[null,"starknet Namespace"]},"313":{"href":"/toolchain/katana/rpc/starknet#trace-api","html":"\n<ul>\n<li><code>starknet_simulateTransactions</code></li>\n</ul>","isPage":false,"text":"\n\nstarknet_simulateTransactions\n","title":"Trace API","titles":[null,"starknet Namespace"]},"314":{"href":"/toolchain/katana/rpc/torii#torii-namespace","html":"\n","isPage":true,"text":"\n","title":"torii Namespace","titles":[null]},"315":{"href":"/toolchain/katana/rpc/torii#gettransactions","html":"\n<p>Get a list of transaction in a range.</p>\n<table><thead><tr><th>Method invocation</th></tr></thead><tbody><tr><td><code>{ &quot;method&quot;: &quot;torii_getTransactions&quot;, &quot;params&quot;: [ cursor ] }</code></td></tr></tbody></table>","isPage":false,"text":"\nGet a list of transaction in a range.\nMethod invocation{ &quot;method&quot;: &quot;torii_getTransactions&quot;, &quot;params&quot;: [ cursor ] }","title":"getTransactions","titles":[null,"torii Namespace"]},"316":{"href":"/toolchain/slot/deployments-commands/deployments#slot-deployments","html":"\n<p>It allows you the manage your slot deployments.</p>\n","isPage":true,"text":"\nIt allows you the manage your slot deployments.\n","title":"slot deployments","titles":[null]},"317":{"href":"/toolchain/slot/deployments-commands/deployments#commands","html":"\n<p><code>create</code>\n    Create a new deployment.</p>\n<p><code>delete</code>\n    Delete a deployment.</p>\n<p><code>update</code>\n    Update a deployment.</p>\n<p><code>describe</code>\n    Describe a deployment&#x27;s configuration.</p>\n<p><code>list</code>\n    List all deployments.</p>\n<p><code>logs</code>\n    Fetch logs for a deployment.</p>\n<p><code>help</code>\n    Print this message or the help of the given subcommand(s)</p>","isPage":false,"text":"\ncreate\n    Create a new deployment.\ndelete\n    Delete a deployment.\nupdate\n    Update a deployment.\ndescribe\n    Describe a deployment&#x27;s configuration.\nlist\n    List all deployments.\nlogs\n    Fetch logs for a deployment.\nhelp\n    Print this message or the help of the given subcommand(s)","title":"Commands","titles":[null,"slot deployments"]},"318":{"href":"/toolchain/sozo/common-options/offline#offline","html":"</header>\n","isPage":true,"text":"\n","title":"offline","titles":[]},"319":{"href":"/toolchain/sozo/common-options/offline#use-sozo-offline","html":"\n<p><code>--offline</code><br/>\n    Run without accessing the network.<br/>\n    [env: SOZO_OFFLINE=]</p>\n","isPage":false,"text":"\n--offline\n    Run without accessing the network.\n    [env: SOZO_OFFLINE=]\n","title":"use sozo offline","titles":["offline"]},"320":{"href":"/toolchain/sozo/common-options/offline#usage","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#6CB6FF\"> --offline</span><span style=\"color:#ADBAC7\"> [COMMAND]</span></span></code></pre></figure>\n<p>For example</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#6CB6FF\"> --offline</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>","isPage":false,"text":"\nsozo --offline [COMMAND]\nFor example\nsozo --offline build","title":"USAGE","titles":["offline","use sozo offline"]},"321":{"href":"/toolchain/sozo/common-options/profile#use-sozo-profiles","html":"\n<p>Profiles can be convenient when dealing with multiple environments (dev, staging, prod)</p>\n<p><code>--profile</code><br/>\n    Specify profile to use by name.</p>\n<p><code>--dev</code><br/>\n    Use dev profile.</p>\n<p><code>--release</code><br/>\n    Use release profile.</p>\n","isPage":true,"text":"\nProfiles can be convenient when dealing with multiple environments (dev, staging, prod)\n--profile\n    Specify profile to use by name.\n--dev\n    Use dev profile.\n--release\n    Use release profile.\n","title":"use sozo profiles","titles":[null]},"322":{"href":"/toolchain/sozo/common-options/profile#usage","html":"\n<p>Multiple profiles can be defined in Scarb.toml</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[profile.dev.tool.dojo.env]</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">rpc_url</span><span style=\"color:#96D0FF\"> = &quot;http://localhost:5050&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">account_address</span><span style=\"color:#96D0FF\"> = &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">private_key</span><span style=\"color:#96D0FF\"> = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[profile.staging.tool.dojo.env]</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">rpc_url</span><span style=\"color:#96D0FF\"> = &quot;https://api.cartridge.gg/x/mydojoproject/katana&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">account_address</span><span style=\"color:#96D0FF\"> = &quot;0x5686a647a9cdd63ade617e0baf3b364856b813b508f03903eb58a7e622d5855&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">private_key</span><span style=\"color:#96D0FF\"> = &quot;0x33003003001800009900180300d206308b0070db00121318d17b5e6262150b&quot;</span></span></code></pre></figure>\n<p>Then used with sozo commands</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#6CB6FF\"> --profile</span><span style=\"color:#96D0FF\"> dev migrate</span></span></code></pre></figure>\n<p>is equivalent to</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate --rpc-url http://localhost:5050 --account-address </span><span style=\"color:#6CB6FF\">0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973</span><span style=\"color:#96D0FF\"> --private-key </span><span style=\"color:#6CB6FF\">0x1800000000300000180000000000030000000000003006001800006600</span></span></code></pre></figure>","isPage":false,"text":"\nMultiple profiles can be defined in Scarb.toml\n[profile.dev.tool.dojo.env]\nrpc_url = &quot;http://localhost:5050&quot;\naccount_address = &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\nprivate_key = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;\n \n[profile.staging.tool.dojo.env]\nrpc_url = &quot;https://api.cartridge.gg/x/mydojoproject/katana&quot;\naccount_address = &quot;0x5686a647a9cdd63ade617e0baf3b364856b813b508f03903eb58a7e622d5855&quot;\nprivate_key = &quot;0x33003003001800009900180300d206308b0070db00121318d17b5e6262150b&quot;\nThen used with sozo commands\nsozo --profile dev migrate\nis equivalent to\nsozo migrate --rpc-url http://localhost:5050 --account-address 0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973 --private-key 0x1800000000300000180000000000030000000000003006001800006600","title":"USAGE","titles":[null,"use sozo profiles"]},"323":{"href":"/toolchain/sozo/project-commands/build#sozo-build","html":"\n<p><code>build</code> is used to compile the cairo contracts, generating the necessary artifacts for deployment.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>","isPage":true,"text":"\nbuild is used to compile the cairo contracts, generating the necessary artifacts for deployment.\nsozo build","title":"sozo build","titles":[null]},"324":{"href":"/toolchain/sozo/project-commands/init#sozo-init","html":"\n<p><code>init</code> is used to initialize a new project. It will initialize the new project in a new empty directory by cloning the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> init new_project</span></span></code></pre></figure>","isPage":true,"text":"\ninit is used to initialize a new project. It will initialize the new project in a new empty directory by cloning the dojo-starter.\nsozo init new_project","title":"sozo init","titles":[null]},"325":{"href":"/toolchain/sozo/project-commands/test#sozo-test","html":"\n<p><code>test</code> is used to test the project&#x27;s cairo contracts. It will run all tests found within the project.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> test</span></span></code></pre></figure>","isPage":true,"text":"\ntest is used to test the project&#x27;s cairo contracts. It will run all tests found within the project.\nsozo test","title":"sozo test","titles":[null]},"326":{"href":"/toolchain/sozo/world-commands/auth#sozo-auth","html":"\n<p><code>auth</code> is used to manage world authorization.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> auth [OPTIONS] </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">COMMAN</span><span style=\"color:#ADBAC7\">D</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">WORLD_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">Commands:</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  writer</span><span style=\"color:#96D0FF\">  Auth a system with the given calldata.</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  help</span><span style=\"color:#96D0FF\">    Print this message or the help of the given subcommand</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">s</span><span style=\"color:#ADBAC7\">)</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># example: writer - auth a system with the given calldata</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># This will auth the spawn system with the writer role for Position component</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> auth writer Moves </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">CONTRACT_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">WORLD_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>","isPage":true,"text":"\nauth is used to manage world authorization.\nsozo auth [OPTIONS] &lt;COMMAND&gt; --world &lt;WORLD_ADDRESS&gt;\nCommands:\n  writer  Auth a system with the given calldata.\n  help    Print this message or the help of the given subcommand(s)\n# example: writer - auth a system with the given calldata\n# This will auth the spawn system with the writer role for Position component\nsozo auth writer Moves &lt;CONTRACT_ADDRESS&gt; --world &lt;WORLD_ADDRESS&gt;","title":"sozo auth","titles":[null]},"327":{"href":"/toolchain/sozo/world-commands/events#sozo-events","html":"\n<p><code>events</code> is used to queries world events.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> events</span></span></code></pre></figure>","isPage":true,"text":"\nevents is used to queries world events.\nsozo events","title":"sozo events","titles":[null]},"328":{"href":"/toolchain/sozo/world-commands/register#sozo-register","html":"\n<p><code>register</code> is used to register new models.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> register [OPTIONS] </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">COMMAN</span><span style=\"color:#ADBAC7\">D</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">Commands:</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  model</span><span style=\"color:#96D0FF\">  Register a model to a world.</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  help</span><span style=\"color:#96D0FF\">   Print this message or the help of the given subcommand</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">s</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Options:</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      --manifest-path</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">MANIFEST_PAT</span><span style=\"color:#ADBAC7\">H</span><span style=\"color:#F47067\">&gt;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          Override</span><span style=\"color:#96D0FF\"> path to a directory containing a Scarb.toml file.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          </span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          [env: DOJO_MANIFEST_PATH</span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -v,</span><span style=\"color:#6CB6FF\"> --verbose...</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          Increase</span><span style=\"color:#96D0FF\"> logging verbosity</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -q,</span><span style=\"color:#6CB6FF\"> --quiet...</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          Decrease</span><span style=\"color:#96D0FF\"> logging verbosity</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -h,</span><span style=\"color:#6CB6FF\"> --help</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          Print</span><span style=\"color:#96D0FF\"> help </span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">see</span><span style=\"color:#96D0FF\"> a summary with &#x27;-h&#x27;</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -V,</span><span style=\"color:#6CB6FF\"> --version</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          Print</span><span style=\"color:#96D0FF\"> version</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># example: register a model</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># this will register a model with the given class-hash</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> register model </span><span style=\"color:#6CB6FF\">0x764906a97ff3e532e82b154908b25711cdec1c692bf68e3aba2a3dd9964a15c</span></span></code></pre></figure>","isPage":true,"text":"\nregister is used to register new models.\nsozo register [OPTIONS] &lt;COMMAND&gt;\nCommands:\n  model  Register a model to a world.\n  help   Print this message or the help of the given subcommand(s)\n \nOptions:\n      --manifest-path &lt;MANIFEST_PATH&gt;\n          Override path to a directory containing a Scarb.toml file.\n          \n          [env: DOJO_MANIFEST_PATH=]\n \n  -v, --verbose...\n          Increase logging verbosity\n \n  -q, --quiet...\n          Decrease logging verbosity\n \n  -h, --help\n          Print help (see a summary with &#x27;-h&#x27;)\n \n  -V, --version\n          Print version\n# example: register a model\n# this will register a model with the given class-hash\nsozo register model 0x764906a97ff3e532e82b154908b25711cdec1c692bf68e3aba2a3dd9964a15c","title":"sozo register","titles":[null]}},"dirtCount":0,"index":[["`waitfortransaction`",{"2":{"284":1}}],["`create`",{"2":{"284":1}}],["✅",{"2":{"260":1}}],["❌",{"2":{"260":1}}],["⚠️",{"2":{"249":1,"260":1,"291":1,"292":1}}],["♟♙",{"2":{"243":1}}],["│",{"2":{"225":5}}],["└──",{"2":{"225":4}}],["├──",{"2":{"225":10}}],["📖",{"2":{"292":1}}],["📚",{"2":{"178":1,"187":1}}],["💡solution",{"2":{"266":1}}],["💡",{"2":{"150":1,"154":1,"173":1,"261":1,"291":1}}],["📦",{"2":{"26":1}}],["ℹ️",{"2":{"123":1}}],["~",{"2":{"121":1,"148":1,"213":1}}],["||",{"2":{"217":1,"230":21,"231":1,"253":1}}],["|",{"2":{"87":1,"89":2,"97":1,"120":1,"157":3,"177":1}}],["zsh",{"2":{"147":1}}],["zkvm",{"2":{"102":1}}],["zk",{"2":{"102":1,"103":1,"107":1,"108":1,"116":3}}],["zknight",{"2":{"75":1}}],["zkorp",{"0":{"73":1}}],["zdefender",{"2":{"75":1}}],["zero",{"2":{"35":3,"59":4,"102":1,"108":1,"116":1,"166":1}}],["94bfdb2",{"2":{"121":1}}],["99",{"2":{"60":1}}],["9999999999999",{"2":{"36":1,"39":1}}],["9",{"2":{"27":1,"89":1}}],["9091",{"2":{"27":3}}],["9090",{"2":{"27":6}}],["841197z",{"2":{"266":1}}],["83",{"2":{"265":1}}],["8",{"2":{"27":1,"38":1,"127":1}}],["8080",{"2":{"27":4,"196":1}}],["7",{"2":{"26":2,"27":1,"225":2,"230":2,"265":1}}],["634",{"2":{"266":1}}],["67",{"2":{"222":1,"266":1}}],["6",{"2":{"26":2,"27":1,"89":1,"157":2,"225":2,"239":1,"240":4,"264":2,"292":2,"310":1}}],["✨",{"2":{"26":2,"213":2}}],["🎉",{"2":{"26":1,"213":1,"230":1}}],["🌎",{"2":{"26":2}}],["q",{"2":{"328":1}}],["q2",{"2":{"117":1}}],["q1",{"2":{"117":1}}],["qmcgvv9fgthd1tsm7fuh2dzyq9son8ebmntrc1umksfutx",{"2":{"26":1,"27":1}}],["question",{"2":{"242":1}}],["questions",{"2":{"238":1}}],["questioning",{"2":{"103":1}}],["queen",{"2":{"226":1,"230":1}}],["querying",{"2":{"17":1,"18":1,"19":1,"41":1}}],["query",{"0":{"197":1,"198":1},"1":{"199":1,"200":1,"201":1,"202":1},"2":{"12":1,"23":1,"27":4,"34":2,"39":1,"196":1,"197":1,"198":4,"199":4,"201":5,"202":2,"203":1,"204":1,"222":1}}],["queries",{"2":{"8":1,"27":1,"45":1,"193":1,"194":1,"197":7,"209":2,"210":1,"327":1}}],["quantity",{"2":{"39":2}}],["quiet",{"2":{"328":1}}],["quite",{"2":{"27":1}}],["quick",{"0":{"86":1},"1":{"87":1,"88":1,"89":1},"2":{"77":1,"83":1,"91":1,"172":1,"291":1}}],["quickstart",{"2":{"2":1}}],["quic",{"2":{"27":3}}],["quot",{"2":{"14":18,"16":6,"23":1,"26":12,"27":80,"30":14,"43":2,"59":4,"60":6,"79":34,"84":2,"103":4,"107":2,"125":4,"154":2,"162":2,"166":2,"167":2,"173":2,"198":36,"199":120,"201":20,"203":48,"204":64,"212":2,"213":6,"217":8,"221":2,"222":1,"225":20,"230":2,"231":6,"233":28,"236":6,"237":6,"240":30,"242":4,"253":4,"255":4,"257":10,"260":4,"261":2,"264":4,"266":1,"284":2,"293":6,"300":6,"301":6,"302":6,"303":6,"305":6,"315":6,"322":12}}],["🧰",{"2":{"26":1}}],["3d",{"2":{"295":1}}],["3deploy",{"2":{"175":1}}],["3declare1",{"2":{"175":1}}],["3795",{"2":{"222":1,"266":1}}],["39",{"2":{"203":1}}],["3000",{"2":{"248":1}}],["3000000000000000",{"2":{"233":2,"240":1}}],["30000000",{"2":{"60":1}}],["30",{"2":{"42":2,"43":2}}],["305489z",{"2":{"27":1}}],["359573z",{"2":{"27":1}}],["350306z",{"2":{"27":1}}],["349451z",{"2":{"27":1}}],["348367z",{"2":{"27":1}}],["346717z",{"2":{"27":1}}],["33",{"2":{"265":1}}],["339471z",{"2":{"27":1}}],["332613z",{"2":{"27":1}}],["327265z",{"2":{"27":1}}],["326812z",{"2":{"27":1}}],["326382z",{"2":{"27":1}}],["3255",{"2":{"222":1,"266":1}}],["325597z",{"2":{"27":1}}],["325648z",{"2":{"27":1}}],["324375z",{"2":{"27":1}}],["323538z",{"2":{"27":1}}],["323093z",{"2":{"27":1}}],["321750z",{"2":{"27":1}}],["3a8080",{"2":{"27":1}}],["3a",{"2":{"27":1}}],["315746z",{"2":{"27":1}}],["315563z",{"2":{"27":1}}],["315555z",{"2":{"27":1}}],["315383z",{"2":{"27":1}}],["315379z",{"2":{"27":1}}],["315374z",{"2":{"27":1}}],["315340z",{"2":{"27":1}}],["315336z",{"2":{"27":1}}],["315318z",{"2":{"27":1}}],["314070z",{"2":{"27":1}}],["314065z",{"2":{"27":1}}],["314052z",{"2":{"27":1}}],["311246z",{"2":{"27":1}}],["3",{"0":{"98":1,"124":1,"239":1},"1":{"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"240":1,"241":1},"2":{"16":1,"26":3,"27":1,"79":2,"124":1,"125":1,"128":1,"131":1,"175":1,"199":1,"201":3,"202":1,"217":5,"239":1,"240":5,"297":1}}],["19t18",{"2":{"266":1}}],["192",{"2":{"27":3}}],["1867",{"2":{"266":1}}],["188",{"2":{"264":1}}],["1835",{"2":{"222":1,"266":1}}],["14",{"2":{"89":1}}],["1201",{"2":{"155":1}}],["1200",{"2":{"155":3}}],["1200th",{"2":{"155":1}}],["123",{"2":{"41":1}}],["12",{"2":{"34":1}}],["127",{"2":{"27":3}}],["11",{"2":{"27":1,"60":1,"203":2}}],["17",{"2":{"27":3,"203":2}}],["172",{"2":{"27":3}}],["168",{"2":{"27":3}}],["15f1",{"2":{"297":1}}],["153",{"2":{"265":1}}],["15",{"0":{"22":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"2":{"79":2,"291":1}}],["1",{"0":{"96":1,"98":1},"2":{"16":1,"20":1,"23":7,"25":3,"26":2,"27":8,"38":1,"39":2,"41":1,"57":1,"79":1,"89":2,"98":1,"104":1,"107":1,"121":2,"127":1,"164":1,"214":1,"217":9,"220":2,"221":1,"222":3,"230":19,"233":2,"239":4,"240":16}}],["107",{"2":{"265":1}}],["1071",{"2":{"121":1}}],["10000",{"2":{"169":1}}],["100000",{"2":{"59":2}}],["100",{"2":{"23":1,"27":3,"39":2,"41":1,"143":1,"217":2}}],["10",{"2":{"11":3,"23":4,"25":3,"27":1,"34":1,"39":5,"46":2,"53":1,"57":3,"60":1,"75":2,"121":2,"144":1,"169":1,"198":1,"203":5}}],["knight",{"2":{"226":1,"230":1}}],["knowledge",{"2":{"108":1,"116":1}}],["known",{"2":{"107":1}}],["know",{"2":{"27":1,"116":1,"243":1}}],["kind",{"2":{"199":1}}],["king",{"2":{"102":1,"226":1,"230":1}}],["kong",{"2":{"102":4}}],["kairy",{"2":{"67":1}}],["katanas",{"2":{"81":1}}],["katana",{"0":{"76":1,"77":1,"78":1,"156":2,"157":1,"158":1,"159":1,"215":1,"304":1},"1":{"77":1,"78":1,"157":2,"158":2,"159":3,"160":3,"161":2,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"305":1},"2":{"14":1,"26":7,"27":1,"76":2,"77":4,"78":1,"79":2,"81":1,"85":3,"87":1,"108":1,"118":1,"139":1,"140":1,"142":2,"145":1,"148":1,"149":4,"150":4,"154":7,"155":2,"156":1,"157":3,"159":2,"160":3,"163":2,"164":3,"167":1,"168":1,"169":1,"170":1,"172":4,"173":5,"174":4,"175":2,"176":1,"180":1,"213":7,"215":2,"218":1,"219":3,"220":3,"221":1,"222":7,"225":1,"248":1,"253":1,"266":1,"269":1,"270":1,"283":1,"305":1,"307":1,"309":1,"310":1,"322":1}}],["keeping",{"2":{"243":1}}],["keep",{"2":{"36":1,"40":1,"101":1,"200":1,"240":1}}],["key=",{"2":{"252":1}}],["keypair",{"2":{"62":1}}],["keys",{"2":{"10":1,"18":2,"27":3,"34":3,"64":4,"203":2,"204":4,"236":1,"271":1}}],["key",{"0":{"34":1},"2":{"8":1,"10":3,"14":1,"15":4,"16":1,"18":1,"23":4,"26":1,"30":1,"32":2,"33":4,"34":7,"36":1,"38":1,"39":4,"40":1,"41":3,"46":2,"48":4,"79":4,"105":1,"127":2,"155":1,"204":1,"213":3,"225":1,"226":6,"270":1,"271":2,"283":1,"290":1,"293":1,"322":3}}],["50",{"2":{"264":1}}],["5050",{"2":{"14":1,"26":1,"143":1,"163":1,"212":1,"218":1,"225":1,"322":2}}],["52",{"2":{"203":1}}],["52z",{"2":{"27":4}}],["5",{"2":{"14":2,"26":3,"27":1,"89":9,"162":1,"164":2,"201":2,"217":1,"225":1}}],["46",{"2":{"266":1}}],["40",{"2":{"261":1}}],["4573",{"2":{"222":1,"266":1}}],["48",{"2":{"203":1}}],["42",{"2":{"167":2,"203":1}}],["420",{"2":{"59":2}}],["4otherwise",{"2":{"89":1}}],["4and",{"2":{"89":1}}],["4",{"0":{"136":1},"2":{"14":1,"27":1,"89":9,"162":1,"164":2,"217":1,"225":1,"239":2,"240":8,"248":1,"297":1}}],["y3vyc29yx3r3bw==",{"2":{"201":2}}],["y3vyc29yx29uzq==",{"2":{"201":1}}],["yes",{"2":{"118":1,"217":21,"222":1}}],["yet",{"2":{"31":1,"78":1,"103":1,"173":1,"199":1,"242":1}}],["y",{"2":{"11":2,"15":1,"23":6,"25":3,"35":3,"39":5,"46":2,"57":1,"59":3,"60":3,"203":2,"226":1,"230":57,"233":3,"236":1,"240":4,"257":1}}],["you",{"2":{"2":1,"8":2,"10":4,"12":1,"16":2,"17":1,"18":1,"20":1,"21":1,"22":4,"23":3,"25":1,"26":3,"27":15,"28":1,"30":1,"33":1,"34":6,"35":1,"36":1,"38":1,"42":5,"43":1,"46":1,"55":1,"58":2,"59":1,"60":2,"61":1,"62":3,"64":2,"77":1,"78":3,"79":1,"80":1,"83":1,"84":2,"85":1,"89":9,"91":1,"96":1,"102":2,"108":1,"112":2,"117":1,"121":3,"122":1,"123":2,"125":1,"126":2,"127":2,"128":1,"150":4,"154":9,"156":1,"157":6,"160":1,"164":1,"167":2,"169":1,"170":2,"173":2,"175":1,"184":1,"185":1,"193":5,"194":1,"196":1,"198":6,"199":4,"200":1,"203":2,"204":4,"205":3,"213":10,"214":3,"219":1,"224":2,"226":1,"227":1,"228":1,"229":1,"230":4,"236":1,"238":1,"241":3,"242":4,"243":4,"244":1,"246":1,"247":1,"248":1,"251":1,"252":2,"255":2,"256":2,"260":1,"261":2,"263":1,"264":2,"266":1,"271":1,"272":1,"274":1,"279":1,"289":1,"290":1,"291":1,"292":1,"296":1,"298":1,"303":1,"316":1}}],["yourself",{"2":{"86":1,"230":1}}],["your",{"0":{"213":1,"215":1,"228":1,"285":1},"1":{"214":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"286":1,"287":1},"2":{"1":1,"10":1,"14":1,"17":1,"18":1,"20":3,"22":2,"26":8,"27":9,"30":1,"32":1,"34":1,"44":1,"50":1,"51":1,"58":4,"59":1,"60":2,"62":1,"75":1,"76":1,"77":3,"78":6,"79":1,"88":1,"89":5,"90":1,"96":2,"102":2,"123":1,"124":1,"125":1,"128":1,"130":1,"132":1,"135":2,"154":4,"155":2,"157":3,"163":2,"164":2,"172":1,"176":1,"178":1,"184":2,"185":1,"187":1,"196":2,"197":1,"198":1,"199":3,"200":1,"203":1,"204":3,"205":1,"213":7,"214":2,"218":2,"219":2,"224":1,"225":6,"226":1,"233":1,"239":2,"241":3,"242":1,"255":1,"262":4,"263":2,"264":3,"265":3,"266":3,"272":3,"274":4,"275":1,"276":1,"278":2,"279":3,"284":1,"285":1,"286":1,"287":3,"289":2,"290":1,"291":1,"292":4,"298":3,"316":1}}],["+=",{"2":{"23":2}}],["+",{"0":{"38":1},"2":{"11":2,"23":3,"25":3,"39":6,"217":3,"230":12}}],["x",{"2":{"11":2,"15":1,"23":6,"25":3,"30":1,"35":3,"39":5,"46":2,"57":1,"59":3,"60":3,"79":2,"162":3,"203":2,"226":1,"230":57,"233":3,"236":1,"240":4,"257":1,"284":1,"322":1}}],["x27",{"2":{"5":1,"17":2,"19":1,"20":1,"22":6,"23":14,"25":5,"26":5,"27":10,"29":1,"36":1,"38":13,"45":1,"50":1,"51":2,"53":2,"56":1,"60":2,"62":1,"64":1,"77":1,"78":1,"89":8,"97":2,"102":2,"103":3,"107":1,"108":1,"114":1,"115":2,"116":2,"121":5,"123":1,"127":13,"132":1,"135":2,"142":3,"154":1,"156":1,"157":2,"163":1,"164":1,"165":1,"167":2,"185":1,"193":1,"196":1,"198":3,"199":1,"213":3,"219":1,"221":1,"222":7,"226":1,"228":1,"230":7,"232":1,"233":2,"235":2,"236":2,"237":1,"238":2,"239":4,"240":1,"241":2,"242":1,"243":5,"244":1,"247":1,"262":2,"263":1,"264":4,"266":4,"275":2,"276":1,"279":1,"284":6,"288":1,"291":3,"298":2,"317":1,"325":1,"328":2}}],["nuget",{"2":{"298":1}}],["num",{"2":{"144":1}}],["numerics",{"2":{"293":1}}],["numeric",{"2":{"42":1}}],["numbers",{"2":{"39":1}}],["number",{"2":{"33":1,"89":1,"142":2,"143":2,"144":1,"145":2,"154":3,"155":1,"198":1,"201":1,"257":2,"290":1}}],["npx",{"2":{"248":1}}],["npm",{"2":{"124":1}}],["n",{"2":{"217":14,"230":56}}],["nightly",{"2":{"121":2}}],["na",{"2":{"104":1}}],["nature",{"2":{"103":1}}],["natively",{"2":{"125":1}}],["native",{"0":{"151":1},"2":{"44":1,"150":1,"151":1}}],["navigate",{"2":{"27":1,"262":2,"266":1,"270":1,"274":2,"286":1,"287":2,"298":2}}],["namespacedescriptionstarknet",{"2":{"309":1}}],["namespaces",{"0":{"309":1},"2":{"309":1}}],["namespace",{"0":{"299":1,"304":1,"310":1,"314":1},"1":{"300":1,"301":1,"302":1,"303":1,"305":1,"311":1,"312":1,"313":1,"315":1},"2":{"170":1,"299":1,"309":2}}],["named",{"2":{"129":1,"284":1}}],["name=",{"2":{"27":3}}],["name",{"0":{"139":1,"180":1,"193":1,"207":1},"1":{"194":1},"2":{"14":1,"19":1,"26":1,"27":2,"29":1,"30":2,"38":1,"64":1,"79":1,"127":1,"128":1,"197":1,"198":3,"203":1,"213":5,"214":2,"224":1,"225":1,"257":1,"284":4,"289":1,"309":2,"321":1}}],["node",{"2":{"154":2,"155":1,"198":2,"199":4,"201":4}}],["novel",{"2":{"103":1}}],["noir",{"2":{"102":1}}],["no",{"2":{"26":1,"42":1,"53":1,"103":1,"126":1,"128":1,"129":1,"142":1,"150":1,"160":1,"170":2,"217":21,"222":1}}],["nonces",{"2":{"154":1}}],["none",{"2":{"23":2,"25":1,"53":1,"57":1,"198":1,"226":2,"230":3,"231":4,"233":3,"236":1,"237":1,"240":5,"293":2}}],["non",{"2":{"23":1,"154":1}}],["now",{"2":{"20":1,"22":1,"23":1,"25":1,"26":5,"27":4,"41":1,"42":3,"78":1,"126":1,"128":2,"132":1,"149":1,"150":1,"167":1,"198":1,"199":1,"213":4,"222":1,"227":1,"228":1,"231":1,"240":2,"241":1}}],["notable",{"2":{"103":1}}],["notably",{"2":{"53":1}}],["notion",{"2":{"103":2}}],["noting",{"2":{"64":1}}],["notifies",{"2":{"290":1}}],["notifications",{"2":{"27":1}}],["notify",{"2":{"23":1,"203":1}}],["notice",{"2":{"23":2,"27":1}}],["notstarted",{"2":{"16":3}}],["noted",{"2":{"227":1}}],["note",{"0":{"122":1},"2":{"15":1,"20":1,"53":1,"62":1,"96":1,"102":1,"121":1,"123":1,"125":1,"129":1,"150":1,"154":1,"173":1,"210":1,"213":1,"264":1,"284":1,"298":1}}],["not",{"0":{"263":1},"2":{"10":1,"14":1,"15":1,"16":3,"21":1,"31":2,"34":1,"37":1,"41":1,"53":1,"59":2,"62":3,"81":1,"91":1,"103":1,"113":1,"114":1,"116":1,"123":1,"150":2,"164":1,"165":1,"170":1,"172":1,"173":1,"199":1,"217":1,"226":1,"228":1,"230":5,"231":2,"243":1,"251":1,"252":1,"260":1,"261":1,"263":1,"266":2,"287":1}}],["net",{"2":{"298":1}}],["networking",{"2":{"207":1}}],["networks",{"2":{"79":1,"154":4}}],["network",{"0":{"79":1},"1":{"80":1,"81":1,"82":1},"2":{"75":1,"79":1,"107":2,"113":1,"142":2,"154":9,"155":1,"163":2,"164":1,"218":2,"319":1}}],["neural",{"2":{"75":1}}],["needed",{"2":{"197":1}}],["need",{"0":{"238":1},"2":{"22":1,"26":1,"34":1,"36":1,"38":1,"42":1,"43":1,"58":1,"79":1,"84":2,"96":1,"102":1,"123":1,"127":2,"150":1,"154":2,"160":1,"165":1,"193":1,"213":2,"236":1,"248":1,"252":2,"255":1}}],["needs",{"2":{"17":1,"51":1,"236":1,"256":2,"275":1,"286":1}}],["nextblocktimestamp",{"0":{"301":1},"2":{"301":1}}],["next",{"0":{"28":1,"90":1},"2":{"20":3,"23":8,"25":1,"27":1,"28":1,"53":1,"57":5,"97":1,"220":1,"227":1,"229":1,"230":13,"231":15,"233":3,"237":3,"240":6,"242":1,"301":1,"303":1}}],["newtonsoft",{"2":{"298":2}}],["newer",{"2":{"89":1}}],["new",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1},"2":{"19":1,"22":1,"23":2,"25":1,"26":1,"27":13,"41":3,"42":1,"43":1,"60":6,"103":3,"128":1,"131":1,"132":1,"155":1,"157":1,"162":1,"167":1,"168":1,"169":2,"170":3,"173":1,"174":1,"184":1,"185":1,"193":1,"213":12,"214":2,"217":1,"224":1,"237":1,"243":1,"250":1,"256":3,"263":2,"277":1,"282":4,"283":5,"284":9,"290":2,"298":1,"300":1,"317":1,"324":4,"328":1}}],["never",{"2":{"10":1}}],["necessary",{"2":{"6":1,"42":1,"127":1,"134":1,"135":1,"291":1,"323":1}}],["nested",{"2":{"5":1}}],["void",{"2":{"282":1,"283":1,"293":2}}],["votingresulttrait",{"2":{"217":1}}],["voting",{"2":{"217":8}}],["voted",{"2":{"217":1,"222":2}}],["voteimpl",{"2":{"217":1}}],["votecast",{"2":{"217":4}}],["votes",{"2":{"217":16}}],["voteresultfunctionstrait",{"2":{"217":1}}],["voteresultfunctionsimpl",{"2":{"217":1}}],["voters",{"2":{"217":7}}],["voter",{"2":{"217":33,"220":3,"221":1}}],["votetrait",{"2":{"217":3}}],["vote",{"0":{"217":1},"2":{"217":47,"219":2,"220":3,"221":2,"222":7}}],["v3",{"2":{"155":1}}],["vm",{"2":{"150":1}}],["vscode",{"0":{"98":1}}],["v",{"2":{"89":1,"122":1,"142":1,"157":1,"212":1,"328":2}}],["v2",{"2":{"79":1}}],["v1",{"2":{"27":3}}],["v0",{"2":{"23":1,"26":1,"39":1,"46":1,"53":1,"57":1,"79":1,"130":2,"162":1,"217":1,"225":1,"231":1,"264":2,"292":1,"310":1}}],["ve",{"2":{"26":1,"27":2,"77":1,"230":1,"239":1,"241":1}}],["vein",{"2":{"23":1}}],["vec2trait",{"2":{"59":2}}],["vec2",{"2":{"23":5,"25":1,"46":4,"53":1,"57":2,"59":4,"226":2,"230":6,"231":2,"233":4,"236":1,"240":5,"257":1}}],["vec",{"2":{"23":9,"25":3,"46":2,"57":1,"59":2,"60":2,"203":2,"256":2,"257":1}}],["verbosity",{"2":{"328":2}}],["verbose",{"2":{"328":1}}],["versa",{"2":{"291":1}}],["versions",{"2":{"89":2,"129":1}}],["versionyou",{"2":{"89":2}}],["version",{"0":{"122":1},"2":{"14":4,"26":2,"79":2,"84":1,"89":14,"121":4,"122":1,"125":1,"142":2,"157":6,"164":6,"212":2,"213":2,"225":2,"241":1,"247":1,"264":2,"287":2,"292":2,"297":2,"298":1,"310":1,"328":2}}],["verify",{"2":{"232":1,"262":1,"265":1,"270":2}}],["verifying",{"2":{"107":1,"116":1}}],["verifiable",{"2":{"102":1,"105":1}}],["verification",{"2":{"102":2,"107":1}}],["verified",{"2":{"102":1}}],["very",{"2":{"16":1,"103":1,"128":1,"202":2}}],["var",{"2":{"282":3,"283":3}}],["variable",{"2":{"264":1}}],["variables",{"0":{"163":1,"218":1},"2":{"26":1,"163":2,"218":2}}],["various",{"2":{"15":1,"33":1,"172":1,"272":1}}],["vale",{"2":{"166":1}}],["valuable",{"2":{"101":1,"204":1}}],["values",{"2":{"12":1,"23":1,"43":1,"64":5,"203":1,"204":1,"251":2,"260":2,"277":1}}],["value",{"2":{"10":2,"15":2,"18":2,"26":1,"30":1,"33":1,"34":1,"36":2,"39":1,"43":1,"167":2,"252":3,"255":1,"256":2,"264":1}}],["validation",{"2":{"144":1,"145":1}}],["validated",{"2":{"255":1}}],["validate",{"2":{"127":1,"135":1,"144":1,"145":2}}],["validity",{"2":{"105":1,"107":2,"116":1}}],["valid",{"2":{"79":1,"154":1}}],["vast",{"2":{"28":1}}],["visit",{"2":{"298":1}}],["visual",{"2":{"84":1,"98":1}}],["vital",{"2":{"291":1}}],["vice",{"2":{"291":1}}],["virtual",{"2":{"115":1}}],["via",{"2":{"12":1,"36":1,"63":1,"89":1,"186":1,"205":2}}],["vibrant",{"2":{"1":1}}],["=https",{"2":{"89":2,"97":1,"157":1}}],["==",{"2":{"16":3,"35":3,"60":3,"217":8,"230":28,"231":1,"233":11,"236":2,"237":2,"240":10}}],["=",{"2":{"10":7,"13":2,"14":12,"16":4,"20":3,"23":15,"25":2,"26":8,"30":7,"32":1,"34":3,"36":1,"39":5,"46":3,"53":2,"57":9,"59":1,"60":8,"65":1,"79":19,"134":2,"135":1,"162":1,"213":3,"217":15,"225":13,"230":38,"231":9,"233":26,"235":4,"236":6,"237":3,"240":21,"251":2,"252":5,"253":2,"255":1,"256":1,"257":1,"282":3,"283":5,"284":3,"292":1,"297":2,"322":6}}],["lfs",{"2":{"298":2}}],["l1",{"2":{"107":4}}],["l2",{"0":{"107":1},"2":{"107":2}}],["l",{"2":{"87":1,"120":1,"157":1,"177":1}}],["launch",{"2":{"164":1,"219":1,"269":2,"298":1}}],["launches",{"2":{"77":1}}],["lambdaclass",{"2":{"150":1}}],["lattice",{"2":{"103":1,"104":1}}],["latest",{"2":{"89":1,"101":1,"121":3,"154":1,"213":2,"247":1,"298":1}}],["later",{"2":{"23":1,"42":1,"160":1}}],["large",{"2":{"102":1,"202":1,"298":1}}],["lair",{"2":{"75":1}}],["lang",{"2":{"89":1}}],["language",{"2":{"89":2,"105":2,"108":1,"115":3}}],["languages",{"2":{"66":1,"102":1}}],["land",{"2":{"75":1}}],["lander",{"2":{"75":1}}],["layers",{"0":{"307":1},"2":{"103":1}}],["layer",{"2":{"45":1,"102":1,"103":3,"107":2,"207":1}}],["layout",{"2":{"38":4,"41":1,"64":4,"127":6}}],["lastdirection",{"2":{"293":1}}],["lastly",{"2":{"226":1,"241":1}}],["lasts",{"2":{"210":1}}],["last",{"2":{"23":5,"25":1,"53":1,"57":2,"198":2,"201":4,"202":1,"222":1,"266":2,"293":2}}],["ll",{"2":{"22":2,"23":2,"27":1,"41":1,"42":1,"43":1,"156":1,"164":1,"213":1,"219":1,"226":1,"236":1,"239":2}}],["lt",{"2":{"16":1,"18":3,"23":1,"38":2,"39":1,"46":2,"53":1,"57":1,"60":1,"64":20,"79":1,"127":2,"129":1,"130":1,"132":2,"142":5,"143":3,"144":2,"145":5,"154":2,"155":1,"162":2,"165":1,"169":1,"173":1,"196":1,"204":1,"212":4,"217":4,"220":4,"222":1,"230":12,"231":1,"233":4,"236":2,"240":2,"252":3,"255":1,"265":3,"283":1,"284":3,"326":4,"328":2}}],["load",{"2":{"279":1}}],["loading",{"2":{"260":1}}],["loaded",{"2":{"260":1}}],["loaf",{"2":{"104":1}}],["long",{"2":{"172":1,"203":1,"210":1}}],["longer",{"2":{"42":1,"126":1,"128":1,"129":1}}],["locked",{"2":{"150":1,"187":1}}],["locate",{"2":{"274":1,"278":1,"279":1,"287":1}}],["located",{"2":{"121":1,"232":1,"270":1}}],["location",{"2":{"10":2,"34":6,"222":5,"266":7}}],["local",{"0":{"76":1,"122":1},"1":{"77":1,"78":1},"2":{"22":1,"27":5,"30":1,"76":1,"77":1,"85":1,"89":3,"121":1,"139":1,"154":3,"155":1,"156":1,"160":1,"163":2,"187":1,"196":2,"209":1,"210":1,"218":2}}],["locally",{"0":{"26":1},"2":{"22":1,"26":1,"27":1,"89":1,"150":1}}],["localhost",{"2":{"14":1,"26":1,"212":1,"225":1,"248":1,"322":2}}],["logging",{"2":{"328":2}}],["login",{"2":{"213":1}}],["logic",{"2":{"16":1,"22":1,"46":1,"51":1,"113":1,"130":1,"145":2,"149":1,"150":2,"227":2}}],["logs",{"2":{"142":1,"213":1,"214":2,"317":2}}],["log",{"2":{"142":1}}],["low",{"2":{"107":1,"115":1}}],["lower",{"2":{"66":1,"89":1}}],["loot",{"2":{"75":1}}],["looking",{"2":{"242":1}}],["look",{"2":{"27":1,"39":1,"46":1,"53":1,"225":3,"227":1,"231":1}}],["looks",{"2":{"27":1,"203":1,"225":2}}],["lot",{"2":{"25":1,"225":1}}],["lobby",{"2":{"16":5}}],["legal",{"2":{"243":1}}],["legacymap",{"2":{"217":2}}],["learned",{"2":{"239":1}}],["learn",{"2":{"115":1,"175":1,"272":1,"291":1}}],["leave",{"2":{"103":1}}],["leaderboard",{"2":{"102":1}}],["least",{"2":{"34":1,"103":1,"264":1}}],["length",{"2":{"64":2}}],["level",{"2":{"41":2,"66":1,"107":1,"115":1,"128":1}}],["leveraging",{"2":{"8":1,"45":1,"105":1}}],["leverage",{"2":{"8":1}}],["left",{"2":{"23":2,"25":1,"271":1,"293":2}}],["letting",{"2":{"46":1}}],["lets",{"2":{"20":1,"46":1,"59":1,"198":1,"243":1}}],["let",{"2":{"10":4,"13":2,"20":2,"22":1,"23":7,"25":3,"26":4,"27":4,"34":3,"39":4,"41":1,"46":3,"53":3,"57":7,"59":1,"60":8,"65":1,"134":2,"135":1,"167":2,"198":1,"199":1,"213":2,"217":12,"221":1,"222":3,"228":1,"230":2,"231":4,"233":23,"235":4,"236":5,"237":2,"240":16,"284":2,"288":1}}],["little",{"2":{"242":1}}],["limit",{"0":{"202":1},"2":{"200":1,"202":2}}],["limited",{"2":{"154":1}}],["lived",{"2":{"203":1}}],["live",{"2":{"154":2}}],["list",{"2":{"132":2,"159":1,"160":2,"212":1,"217":1,"220":1,"235":1,"242":1,"289":1,"315":1,"317":2}}],["listens",{"2":{"209":1}}],["listening",{"2":{"63":1}}],["listen",{"2":{"27":9,"142":1,"143":2,"203":1,"204":1}}],["license",{"2":{"110":1}}],["licensed",{"2":{"3":1}}],["lifespan",{"2":{"103":1}}],["linux",{"0":{"95":1,"286":1},"1":{"96":1,"97":1,"98":1},"2":{"96":1,"286":2}}],["links",{"2":{"29":1,"30":1}}],["line",{"2":{"25":1,"26":1,"157":1,"173":1,"184":1}}],["lies",{"2":{"23":1}}],["library",{"0":{"254":1},"1":{"255":1,"256":1,"257":1},"2":{"213":1,"217":1,"253":2}}],["libraries",{"0":{"74":1},"2":{"74":1}}],["libp2p",{"2":{"27":1}}],["lib",{"2":{"23":1,"46":1,"162":1,"217":1,"225":2}}],["likely",{"2":{"262":1}}],["like",{"2":{"5":1,"16":1,"20":1,"23":1,"25":1,"27":3,"38":1,"39":1,"55":1,"65":1,"102":3,"103":1,"113":1,"127":2,"128":1,"130":1,"197":1,"198":2,"203":2,"204":1,"225":5,"227":1,"231":1,"239":1,"241":2,"277":1,"289":1}}],["jq",{"2":{"121":3}}],["jay",{"2":{"104":1}}],["javascript",{"2":{"45":1}}],["js",{"0":{"245":1},"1":{"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1},"2":{"66":1,"205":1,"248":2,"258":1}}],["jsonrpcclient",{"2":{"282":1,"283":1}}],["json",{"0":{"306":1},"1":{"307":1,"308":1,"309":1},"2":{"30":1,"142":2,"164":1,"193":1,"213":2,"219":1,"298":2,"307":1,"310":1}}],["jump",{"2":{"27":1,"117":1}}],["just",{"2":{"5":1,"14":1,"47":1,"49":1,"79":1,"83":1,"91":1,"116":1,"128":1,"130":1,"241":1,"242":1}}],["join",{"2":{"1":2,"103":1,"112":1}}],["mydojoproject",{"2":{"322":1}}],["my",{"2":{"230":3,"231":1}}],["mysteries",{"2":{"75":1}}],["md",{"2":{"225":1}}],["mkdir",{"2":{"213":1}}],["menu",{"2":{"286":1,"287":1}}],["mentioned",{"2":{"27":1,"150":1}}],["memory",{"2":{"172":3,"173":1,"210":4,"212":1}}],["member",{"2":{"38":4,"127":5}}],["message",{"2":{"182":1,"261":1,"265":1,"317":1,"326":1,"328":1}}],["messages",{"2":{"142":1}}],["messaging",{"2":{"142":2}}],["medium",{"2":{"103":1}}],["media",{"2":{"29":1}}],["means",{"2":{"166":1,"221":1}}],["meant",{"2":{"62":1,"115":1,"150":1}}],["meaning",{"2":{"53":1}}],["methods",{"0":{"308":1},"1":{"309":1},"2":{"50":1,"200":2,"227":1,"289":1,"309":2,"310":1}}],["method",{"2":{"36":1,"102":1,"130":1,"170":2,"284":2,"300":2,"301":2,"302":2,"303":2,"305":2,"309":2,"315":2}}],["metadatamap",{"2":{"261":1}}],["metadata",{"0":{"29":1,"30":1,"31":1},"1":{"30":1,"31":1},"2":{"26":2,"27":4,"29":1,"30":5,"31":1,"64":2,"257":1,"261":1}}],["mimics",{"2":{"154":1,"175":1}}],["milliseconds",{"2":{"142":2,"169":1}}],["missing",{"2":{"96":1,"262":2}}],["mismatches",{"2":{"89":1}}],["mines",{"2":{"300":1}}],["mined",{"2":{"170":1}}],["mine",{"2":{"142":1}}],["mining",{"0":{"168":1,"169":1,"170":1},"1":{"169":1,"170":1},"2":{"142":3,"168":1,"169":3,"170":6}}],["minimal",{"2":{"131":1}}],["minimize",{"2":{"57":1}}],["mind",{"0":{"39":1},"2":{"40":1}}],["minutes",{"0":{"22":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"2":{"291":1}}],["midfielder",{"2":{"38":1,"127":1}}],["migrating",{"2":{"76":1}}],["migrations",{"2":{"213":1}}],["migration",{"0":{"40":1,"124":1,"136":1},"1":{"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1},"2":{"26":2,"30":2,"184":1}}],["migrated",{"2":{"26":2,"78":1,"213":1}}],["migrate",{"2":{"26":2,"27":1,"64":1,"78":3,"80":1,"132":1,"190":1,"199":1,"213":3,"270":1,"284":1,"322":2}}],["might",{"2":{"14":1,"242":1,"264":1}}],["mirrored",{"2":{"291":1}}],["mirroring",{"2":{"45":1}}],["mirror",{"2":{"22":1}}],["mulitple",{"2":{"128":1}}],["multiplayer",{"2":{"75":1}}],["multiple",{"2":{"34":2,"53":1,"89":1,"128":1,"271":1,"284":1,"307":1,"321":1,"322":1}}],["much",{"2":{"103":1,"150":1,"197":1,"204":1}}],["mud",{"2":{"103":1,"104":1}}],["mutates",{"2":{"53":1}}],["mutations",{"2":{"51":1,"194":1}}],["mutating",{"2":{"51":1}}],["mut",{"2":{"20":2,"23":3,"57":2,"60":1,"231":3,"233":1,"235":1}}],["must",{"2":{"10":1,"23":1,"34":2,"62":1,"89":1,"102":1,"103":3,"125":1,"142":1,"246":1,"261":1,"284":1,"292":1,"296":1}}],["made",{"2":{"241":1}}],["madara",{"0":{"82":1},"2":{"79":1,"82":1,"108":1}}],["maximum",{"2":{"143":1,"145":2,"290":1}}],["max",{"2":{"143":2,"145":4}}],["magic",{"2":{"116":1}}],["market",{"2":{"103":1}}],["marked",{"2":{"48":1}}],["masteraddress",{"2":{"282":1,"283":4}}],["masterprivatekey",{"2":{"282":1,"283":4}}],["master",{"0":{"290":1},"2":{"85":1,"272":1,"279":1,"290":1}}],["masked",{"2":{"75":1}}],["maps",{"2":{"74":1}}],["map",{"2":{"44":1,"74":1,"252":1}}],["may",{"2":{"35":1,"96":1,"103":1,"121":1,"184":1}}],["mainly",{"2":{"197":1}}],["mainnet",{"2":{"154":2,"155":3,"175":1}}],["maintains",{"2":{"203":1}}],["maintained",{"2":{"150":1}}],["maintainable",{"2":{"105":1}}],["maintainability",{"2":{"105":1}}],["maintain",{"2":{"43":1}}],["maintaining",{"2":{"33":1,"103":1,"107":1,"172":1}}],["main",{"2":{"27":1,"46":2,"121":2,"264":1}}],["making",{"2":{"27":1,"105":1,"154":1,"213":1,"244":1}}],["makes",{"2":{"53":1,"79":1,"193":1}}],["make",{"2":{"26":2,"27":1,"88":1,"96":1,"111":1,"164":1,"196":2,"213":1,"219":1,"225":2,"231":1,"237":1,"241":2,"242":1,"243":2,"244":1,"265":1}}],["macos",{"0":{"286":1},"2":{"286":1}}],["mac",{"0":{"95":1},"1":{"96":1,"97":1,"98":1},"2":{"121":1,"286":1}}],["machine",{"2":{"22":1,"26":1,"27":1,"102":1,"115":1,"196":1}}],["macros",{"2":{"8":1,"20":1}}],["matching",{"2":{"287":1}}],["matches",{"2":{"89":1,"270":1}}],["match",{"2":{"16":1,"23":1,"230":3,"270":1}}],["manipulate",{"2":{"299":1}}],["manifest",{"2":{"213":1,"253":1,"328":3}}],["manifests",{"2":{"26":1}}],["managing",{"2":{"184":1,"274":1,"290":1}}],["management",{"2":{"129":1,"163":1,"184":1,"185":1,"289":1,"290":1}}],["managed",{"2":{"123":1}}],["manage",{"2":{"28":1,"30":1,"62":1,"89":1,"177":1,"182":2,"250":1,"316":1,"326":1}}],["manager",{"0":{"97":1,"275":1,"289":1},"1":{"276":1,"277":1,"278":1},"2":{"14":2,"84":1,"97":1,"186":1,"275":1,"276":1,"289":3,"298":2}}],["manner",{"2":{"103":1}}],["manually",{"2":{"85":1,"170":1}}],["man",{"2":{"75":2}}],["many",{"2":{"3":1,"23":1,"25":1,"226":1,"241":1,"291":1}}],["monobehaviour",{"2":{"284":1}}],["monitoring",{"2":{"204":1}}],["moving",{"2":{"239":1,"240":1,"292":1}}],["movement",{"2":{"271":1}}],["move",{"0":{"231":1,"237":1},"1":{"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1},"2":{"20":1,"23":5,"25":5,"57":1,"60":3,"116":2,"131":1,"228":1,"229":1,"230":6,"231":6,"233":2,"237":3,"239":5,"240":6,"243":2,"244":1,"270":2,"271":1,"284":1}}],["moved",{"2":{"12":1,"20":3,"23":5,"26":1,"27":1,"57":4}}],["movesmodels",{"2":{"198":2}}],["moves",{"2":{"7":2,"10":5,"11":3,"13":3,"15":2,"18":3,"20":4,"23":22,"25":9,"26":2,"27":6,"33":1,"53":3,"57":8,"60":8,"116":2,"198":2,"203":2,"237":1,"241":1,"293":2,"326":1}}],["moon",{"2":{"75":1}}],["most",{"2":{"46":1,"50":1,"107":1,"201":1,"222":1,"266":2}}],["mode",{"2":{"169":1,"170":3,"172":2,"173":3}}],["modes",{"0":{"168":1,"172":1},"1":{"169":1,"170":1,"173":1,"174":1},"2":{"168":1,"172":2}}],["modelfield",{"2":{"260":2,"293":3}}],["modelinstance",{"2":{"260":2,"293":1}}],["modelregistered",{"2":{"19":1,"203":2}}],["model",{"0":{"18":1,"48":1,"126":1,"260":1},"2":{"5":2,"6":1,"7":4,"10":3,"13":1,"15":1,"16":1,"17":1,"18":3,"23":13,"25":2,"27":9,"32":1,"33":2,"34":8,"35":2,"36":3,"37":1,"38":1,"39":9,"41":6,"42":1,"46":1,"48":2,"52":1,"59":3,"63":1,"64":10,"125":2,"127":1,"191":1,"197":2,"198":6,"203":3,"205":1,"226":9,"236":1,"252":2,"260":2,"279":2,"293":2,"328":5}}],["models",{"0":{"32":1,"33":1,"36":1,"40":1,"125":1,"226":1,"229":1,"279":1,"291":1},"1":{"33":1,"34":2,"35":2,"36":2,"37":2,"38":2,"39":1,"230":1,"292":1,"293":1},"2":{"5":1,"8":1,"10":4,"11":2,"15":5,"19":1,"22":1,"23":7,"25":2,"26":5,"27":1,"32":4,"33":5,"35":2,"36":1,"38":1,"39":5,"40":1,"46":1,"48":2,"50":2,"51":1,"57":2,"59":2,"60":5,"61":3,"62":2,"124":1,"125":1,"126":1,"127":1,"132":1,"197":2,"199":1,"203":2,"225":4,"226":5,"229":1,"230":2,"232":1,"233":7,"235":6,"240":2,"257":1,"279":4,"291":6,"328":1}}],["modules",{"2":{"134":1,"287":2}}],["module",{"2":{"130":1,"287":2}}],["modularity",{"0":{"39":1},"2":{"33":1}}],["modular",{"2":{"22":1}}],["modification",{"2":{"36":1}}],["modifying",{"2":{"41":2,"43":1,"260":1}}],["modify",{"2":{"36":1,"42":2,"276":1}}],["mod",{"2":{"23":1,"39":1,"46":1,"53":1,"57":1,"59":1,"60":1,"131":1,"162":1,"217":1,"225":8,"227":1,"233":1,"240":1,"264":1}}],["moreover",{"2":{"17":1}}],["more",{"2":{"3":1,"16":1,"17":1,"26":1,"27":1,"48":1,"57":1,"102":1,"103":1,"105":1,"107":1,"115":1,"151":1,"160":1,"163":1,"167":1,"175":1,"197":1,"198":1,"200":1,"202":1,"205":1,"241":1,"242":1,"251":1,"298":1}}],["h2",{"2":{"261":1}}],["hint",{"2":{"222":2,"266":3}}],["high",{"2":{"102":2,"107":1,"128":1}}],["higher",{"2":{"89":1}}],["highly",{"2":{"20":1,"105":1,"242":1}}],["h",{"2":{"142":2,"212":1,"328":2}}],["hub",{"2":{"68":1,"274":1,"287":1,"289":1}}],["human",{"2":{"39":10}}],["humans",{"2":{"39":3}}],["hundreds",{"2":{"28":1}}],["hook",{"2":{"250":1,"251":1,"252":1}}],["hooks",{"2":{"250":1}}],["hood",{"2":{"150":1}}],["hold",{"2":{"226":1}}],["holds",{"2":{"23":1,"236":1}}],["host",{"2":{"143":2}}],["hosted",{"2":{"81":1,"212":1}}],["homework",{"0":{"104":1}}],["home",{"2":{"102":1,"121":1}}],["houses",{"2":{"23":1}}],["however",{"2":{"5":1,"28":1,"31":1,"34":1,"36":1,"39":1,"62":1,"81":1,"102":1,"154":1,"172":1,"202":1}}],["how",{"0":{"2":1,"4":1},"2":{"5":1,"23":1,"25":1,"34":1,"38":1,"46":1,"62":3,"103":1,"127":1,"132":1,"151":1,"168":1,"204":1,"257":1,"272":2,"275":1,"279":1}}],["hard",{"2":{"243":1}}],["harnessing",{"2":{"204":1}}],["happens",{"2":{"203":2}}],["having",{"2":{"39":2,"150":1,"163":1,"235":1}}],["haven",{"2":{"78":1,"242":1,"279":1}}],["have",{"2":{"21":1,"22":1,"23":4,"25":1,"26":2,"27":5,"39":2,"41":1,"42":1,"77":1,"78":1,"79":1,"89":4,"102":1,"112":1,"121":1,"122":1,"125":1,"150":1,"154":1,"156":1,"170":1,"193":1,"203":1,"213":3,"230":4,"233":3,"236":1,"237":1,"240":5,"263":1,"281":1,"289":1,"291":1}}],["hang",{"2":{"22":1}}],["hand",{"2":{"173":1,"197":1}}],["handling",{"2":{"43":1}}],["handleentityupdate",{"2":{"290":1}}],["handle",{"2":{"15":1,"42":1}}],["handy",{"2":{"20":1}}],["hasvalue",{"0":{"251":1},"2":{"251":2}}],["hassle",{"2":{"154":1}}],["hashes",{"2":{"204":1}}],["hash",{"2":{"14":1,"19":4,"26":4,"60":3,"64":3,"134":1,"164":4,"165":1,"219":3,"220":2,"222":1,"225":1,"233":5,"235":6,"284":1,"328":1}}],["has",{"0":{"251":1},"2":{"1":1,"6":1,"10":1,"15":2,"31":1,"103":2,"125":1,"129":1,"134":1,"197":1,"198":1,"232":1,"251":1,"252":2,"255":1}}],["http2",{"2":{"261":1}}],["http",{"2":{"14":1,"26":1,"27":4,"196":1,"212":1,"225":1,"248":1,"307":1,"322":2}}],["https",{"2":{"14":1,"26":1,"27":1,"30":3,"79":4,"85":2,"87":1,"89":3,"94":1,"97":1,"120":1,"150":1,"155":1,"157":3,"177":1,"187":1,"225":1,"322":1}}],["hesitate",{"2":{"238":1}}],["helps",{"2":{"105":1,"184":1}}],["help",{"0":{"238":1},"2":{"101":1,"117":1,"142":2,"182":2,"212":2,"244":1,"317":2,"326":2,"328":4}}],["helper",{"2":{"60":1,"233":1}}],["hello",{"0":{"21":1},"1":{"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"2":{"90":1,"198":1,"199":1,"204":1,"223":1}}],["hexadecimal",{"2":{"220":1,"284":1}}],["hex",{"2":{"44":1,"284":1}}],["heavy",{"2":{"107":1}}],["heavily",{"2":{"8":1,"242":1}}],["headers",{"2":{"261":1}}],["head",{"2":{"90":1,"212":1,"248":1}}],["health",{"2":{"15":1,"39":11}}],["here",{"2":{"10":1,"11":1,"16":1,"25":3,"26":1,"27":1,"38":1,"40":1,"48":1,"49":1,"64":1,"81":1,"114":1,"115":1,"127":1,"130":1,"132":1,"135":1,"160":1,"200":1,"220":1,"230":1,"237":1,"239":1,"242":1,"257":1,"262":1,"275":1,"310":1}}],["ulongs",{"2":{"284":1}}],["ulong",{"2":{"284":1}}],["ultra",{"2":{"76":1}}],["ultimate",{"2":{"1":1}}],["uints",{"2":{"284":1}}],["uint",{"2":{"260":2}}],["uuid",{"0":{"65":1},"2":{"64":1,"65":2,"256":4}}],["utilities",{"2":{"74":1}}],["utilizing",{"2":{"50":1,"101":1}}],["utilization",{"2":{"49":1,"107":1}}],["utilized",{"2":{"33":1,"103":1}}],["utils",{"2":{"53":1,"57":1,"60":1,"134":1,"233":1}}],["u256",{"2":{"37":1,"38":1,"127":1,"129":1,"130":1,"132":2}}],["u128",{"2":{"37":1,"162":5}}],["u16",{"2":{"37":1}}],["u64",{"2":{"37":1,"41":2,"42":2,"284":1}}],["ueibne",{"2":{"27":3}}],["udp",{"2":{"27":6}}],["uris",{"2":{"30":1}}],["uri",{"2":{"26":1,"30":6,"31":1,"64":3}}],["url=http",{"2":{"27":1}}],["url",{"0":{"210":1},"2":{"14":1,"26":1,"79":3,"142":2,"154":2,"155":1,"212":3,"213":2,"214":1,"225":1,"253":2,"265":2,"289":2,"298":2,"322":3}}],["upon",{"2":{"164":1,"170":1,"219":1}}],["upgrade",{"2":{"41":1,"64":1,"264":1}}],["upgrades",{"0":{"41":1}}],["upgrading",{"0":{"40":1},"2":{"40":1,"41":1}}],["uploaded",{"2":{"298":1}}],["upload",{"2":{"30":2}}],["uploading",{"2":{"30":1}}],["up",{"0":{"225":1,"269":1,"270":1,"273":1,"298":1},"1":{"274":1,"275":1,"276":1,"277":1,"278":1,"279":1},"2":{"22":1,"23":1,"27":1,"56":1,"77":1,"91":1,"104":1,"154":2,"155":1,"176":1,"180":1,"203":1,"213":1,"236":1,"237":1,"239":1,"246":1,"265":1,"293":2,"296":1}}],["updating",{"2":{"8":1,"11":1,"26":1,"101":1,"149":1,"184":1,"185":1,"213":1}}],["updatepositionwithdirection",{"2":{"256":1}}],["updates",{"2":{"27":1,"209":1,"290":1}}],["updatedat",{"2":{"27":3,"203":2}}],["updated",{"2":{"18":1,"27":2,"125":1,"203":2}}],["update",{"0":{"128":1},"1":{"129":1,"130":1,"131":1},"2":{"6":1,"7":2,"11":1,"17":1,"23":3,"25":1,"26":3,"27":2,"96":1,"119":1,"125":1,"213":1,"293":1,"317":2}}],["u32",{"2":{"15":2,"16":1,"18":1,"23":2,"36":3,"37":1,"39":10,"41":2,"42":1,"46":2,"226":6,"231":2,"257":2}}],["u8",{"2":{"15":1,"18":1,"23":1,"33":1,"34":1,"37":1,"38":1,"39":2,"41":1,"64":6,"127":1,"129":3,"130":3,"217":35,"293":1}}],["unavailable",{"2":{"262":1}}],["unauthorized",{"2":{"217":3}}],["unauthorizedattempt",{"2":{"217":4}}],["unaudited",{"2":{"79":1}}],["undefined",{"2":{"252":1}}],["underscore",{"2":{"309":1}}],["understand",{"2":{"51":1,"62":1,"291":1}}],["understanding",{"2":{"8":2,"101":1,"215":1,"223":1}}],["underdark",{"2":{"75":1}}],["underworld",{"2":{"75":1}}],["under",{"2":{"3":1,"75":1,"150":1,"262":1,"287":2}}],["unknown",{"2":{"164":1,"222":5,"261":1,"266":7}}],["until",{"2":{"155":1,"170":1}}],["unrestricted",{"2":{"103":1}}],["unhinged",{"2":{"75":1}}],["unwrap",{"2":{"60":1,"233":1,"235":1,"264":1}}],["unless",{"2":{"50":1}}],["universally",{"2":{"103":1}}],["unitypackage",{"2":{"298":2}}],["unitysynchronizationcontext",{"2":{"265":5}}],["unitysynchronizationcontext+workrequest",{"2":{"265":1}}],["unityengine",{"2":{"265":3,"282":1,"283":1,"284":1}}],["unitymainthreaddispatcher",{"2":{"263":2,"274":1}}],["unity",{"0":{"267":1,"270":1,"273":1,"288":1,"294":1,"298":1},"1":{"268":1,"269":1,"270":1,"271":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"289":1,"290":1,"291":1,"292":1,"293":1,"295":1,"296":1,"297":1,"298":1},"2":{"262":1,"264":3,"265":9,"266":1,"267":1,"268":1,"272":4,"274":1,"279":2,"280":1,"284":1,"287":3,"288":1,"289":2,"290":4,"291":3,"292":6,"293":1,"295":2,"297":1,"298":10}}],["unit",{"0":{"59":1,"233":1},"2":{"59":1}}],["units",{"2":{"25":1,"105":1,"225":2,"233":1,"240":1}}],["uniquely",{"2":{"34":1}}],["unique",{"2":{"8":1,"65":2,"164":1,"213":2,"219":1,"256":1}}],["unfamiliar",{"2":{"23":1}}],["usage",{"0":{"67":1,"121":1,"140":1,"174":1,"181":1,"195":1,"208":1,"320":1,"322":1},"1":{"122":1,"123":1,"196":1}}],["usize",{"2":{"38":1,"64":3,"127":1}}],["using",{"0":{"9":1,"150":1,"156":1,"178":1,"213":1,"215":1},"1":{"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"214":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"9":1,"10":1,"11":1,"20":1,"23":1,"27":1,"30":2,"32":1,"34":1,"41":1,"48":2,"53":1,"57":1,"75":1,"78":1,"85":1,"102":1,"123":1,"134":1,"149":1,"154":1,"156":1,"160":1,"163":1,"167":2,"172":1,"178":2,"201":1,"210":2,"213":2,"218":1,"226":1,"239":1,"241":1,"247":1,"248":2,"253":1,"256":2,"266":1,"267":1,"272":1,"282":3,"283":3,"284":6,"287":1,"292":1,"293":4}}],["usually",{"2":{"203":1}}],["usual",{"2":{"36":1}}],["usecomponentvalue",{"0":{"252":1},"2":{"251":1,"252":3}}],["useentityquery",{"0":{"251":1},"2":{"250":1,"251":3,"252":2}}],["users",{"2":{"103":1,"170":1,"265":3}}],["user",{"2":{"42":6,"169":1,"217":7,"221":1,"222":6}}],["username",{"2":{"41":6,"42":3}}],["uses",{"2":{"27":1,"58":1,"107":1,"110":1,"201":2,"203":1,"210":1}}],["useful",{"0":{"61":1},"2":{"16":1,"35":1,"39":1,"65":1,"154":1,"170":1,"172":1}}],["used",{"2":{"9":1,"10":1,"11":1,"12":1,"23":1,"34":1,"35":1,"65":1,"66":2,"149":1,"203":1,"210":1,"212":1,"213":1,"250":1,"252":1,"253":1,"255":1,"257":3,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1}}],["use",{"0":{"2":1,"319":1,"321":1},"1":{"320":1,"322":1},"2":{"10":2,"20":1,"23":5,"25":2,"27":2,"32":1,"37":1,"39":8,"45":1,"46":4,"53":5,"57":4,"58":1,"59":1,"60":5,"62":2,"65":1,"74":1,"79":1,"81":1,"85":1,"89":1,"105":1,"107":1,"110":1,"121":1,"122":1,"123":1,"126":1,"130":1,"134":3,"149":1,"150":2,"154":2,"157":1,"162":2,"164":2,"169":1,"170":1,"172":1,"173":2,"202":1,"205":3,"210":1,"212":1,"213":2,"217":3,"226":5,"229":1,"233":7,"236":2,"237":1,"239":3,"240":5,"251":2,"252":2,"261":1,"271":1,"278":1,"284":1,"292":1,"321":3}}],["us",{"2":{"1":1,"102":1,"201":1}}],["0data",{"2":{"270":1}}],["05",{"2":{"266":1}}],["0if",{"2":{"89":1}}],["02",{"2":{"89":1}}],["0after",{"2":{"89":1}}],["06",{"2":{"27":4}}],["000",{"2":{"75":1}}],["00",{"2":{"27":1}}],["07+00",{"2":{"27":1}}],["07",{"2":{"27":29}}],["01",{"2":{"27":31}}],["03",{"2":{"27":35,"266":1}}],["0xa",{"2":{"204":2}}],["0x33003003001800009900180300d206308b0070db00121318d17b5e6262150b",{"2":{"322":1}}],["0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b",{"2":{"204":2}}],["0x35ec9fd22092dc0c8fc9341e94d5f361924d921c128fa46a0648f2dac519ce4",{"2":{"199":1}}],["0x764906a97ff3e532e82b154908b25711cdec1c692bf68e3aba2a3dd9964a15c",{"2":{"328":1}}],["0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f",{"2":{"199":1}}],["0x7ec42d76c6d876b8f219c20b6a152fe35fe2afc62c471b29ba689c2f6a075b3",{"2":{"26":1,"27":2}}],["0xb3e374b8087dca92601afbb9881fed855ac0d568e3bf878a876fca5ffcb479",{"2":{"199":1}}],["0xbeef",{"2":{"14":1,"225":1}}],["0x4d6f766573",{"2":{"204":1}}],["0x41d7f42bf7a362f0420aaae66d7a91df981100a039ac116a1d9cb632c74ad27",{"2":{"199":1}}],["0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf",{"2":{"199":1}}],["0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a",{"2":{"199":3}}],["0x446f1f19ba951b59935df72974f8ba6060e5fbb411ca21d3e3e3812e3eb8df8",{"2":{"26":4,"27":1,"225":1}}],["0x5686a647a9cdd63ade617e0baf3b364856b813b508f03903eb58a7e622d5855",{"2":{"322":1}}],["0x555345525f414c52454144595f564f544544",{"2":{"222":2}}],["0x506f736974696f6e",{"2":{"204":1}}],["0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59",{"2":{"199":1}}],["0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973",{"2":{"198":1,"199":3,"203":2,"204":2,"322":2}}],["0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201",{"2":{"79":1}}],["0xparc",{"2":{"104":1}}],["0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d",{"2":{"79":1}}],["0x05024efa0bbd4ec33a2f56251a5d67d8ed2b1e88cbdba566cbce6d3d757db21f",{"2":{"266":1}}],["0x0555ba421c2aef3113f1a2d3866955b762191280092bb73956147f24a2d66aa6",{"2":{"164":1}}],["0x00280a3deba2004bbbdb3d60a619f3059305f2399ab1e1cd630ec20249abe5fa",{"2":{"266":1}}],["0x0001",{"2":{"27":1,"204":1}}],["0x0000000000000000000000000000000000000000000000000000000000000013",{"2":{"203":1}}],["0x000000000000000000000000000000000000000000000000000000000000002a",{"2":{"167":1}}],["0x0000000000000000000000000000000000000000000000000000000000000001",{"2":{"221":1}}],["0x0000000000000000000000000000000000000000000000000000000000000005",{"2":{"199":1}}],["0x0000000000000000000000000000000000000000000000000000000000000008",{"2":{"199":1}}],["0x000000000000000000000000000000000000000000000000000000000000000a",{"2":{"199":1}}],["0x0000000000000000000000000000000000000000000000000000000000000000",{"2":{"166":1}}],["0x000000000000000000000000000000000000000000000000000000000000000b",{"2":{"27":2,"204":2}}],["0x0000",{"2":{"27":3,"199":3,"203":2,"204":3}}],["0x02",{"2":{"233":2,"236":1,"240":1}}],["0x02c44f2d396fc5f9caa551e8c1d901d943a3b8cc5c433c88a1bf10b1f15fcd15",{"2":{"220":2,"221":1,"222":4}}],["0x02c93ad00ce6f894729baeafd1fd0456c5a5c540c1caa053ab5392f27ea8f130",{"2":{"165":1}}],["0x01bf3dfc0c2b66b3d4abb47e9c8e4c5552992dbc70bb2566b9f6d6ee9b707317",{"2":{"266":1}}],["0x01",{"2":{"233":2,"236":1,"240":1}}],["0x016052cc70f7462306aa149bdf0e0df3aecb1876a9b05283d60c493c92aa03f4",{"2":{"164":1}}],["0x06162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03",{"2":{"222":1}}],["0x06817bc837ce4df879fe903ca4700a860ce8165742bd74bdadf379618e89cccd",{"2":{"165":1}}],["0x04baae9a396c3ce27a45b201528ec13b366c25960d640a9a32a8736814d9d8c2",{"2":{"220":1}}],["0x071d6b51e52febfaf2e3ed7dbbf1416190f019d80c73b1bf707d375374ab7cc5",{"2":{"220":1,"222":1}}],["0x071092406ababbba5573bbff0074b068aaeb48c9a67ec66abe982ab19bc6997b",{"2":{"219":1,"220":2}}],["0x07ad2516dd66fb2e274e78d4357837cad689c9fffaa347feb9800b231b37b306",{"2":{"164":2,"165":2}}],["0x03da69257a94a06a1101c1413d78551e38d91ca180c0fc26004650a427238f4e",{"2":{"165":2,"166":1,"167":2}}],["0x0",{"2":{"27":2,"60":1,"199":4,"204":3}}],["0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20",{"2":{"203":3}}],["0x2e5174b54aef0b99d4685827ffa51488447e1f5607908293d5c715d6bd22433",{"2":{"199":1}}],["0x2e9c42b868b520d54bff1b7f4c9b91f39bb2e2ad1c39d6484fb5d8a95382e01",{"2":{"26":1}}],["0x2aa02de0e3fa582b3cb6cf9e4371051f44ae2e0d6c94f5c936338ffc8c2ac12",{"2":{"199":1}}],["0x2acbbe239dae2d122c18b3efb0698c00ceb25d7ef9103e63879dce593f8afee",{"2":{"26":1}}],["0x2ffecbe8de6c7c10c785a6eb964ee6489f8dcf139000adbe2c0f12d249be7d8",{"2":{"199":1}}],["0x2730079d734ee55315f4f141eaed376bddd8c2133523d223a344c5604e0f7f8",{"2":{"199":1}}],["0x2d71e9c974539bb3ffb4b115e66a23d0f62a641ea66c4016e903454c8753bbc",{"2":{"220":1}}],["0x2da3d65e223362c72906f97663a4e7dc81ab0bbd04bbde5532a230c1e97d93e",{"2":{"199":1}}],["0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2",{"2":{"79":2}}],["0x2",{"2":{"79":1,"199":5,"204":2}}],["0x2038e0daba5c3948a6289e91e2a68dfc28e734a281c753933b8bd331e6d3dae",{"2":{"27":2}}],["0x2c8998d162d40e9313fd2f7d3e0a8898db1ceb25bb9de1ec463686286c010cd",{"2":{"26":1}}],["0x23c28dcfad6be01ca6509fdb35fd2bed6622238397613c60da5d387a43c38d0",{"2":{"26":1,"27":1}}],["0xf00737ffe57c5c931bfec9a7ea66f76d5eaae12cacca6952dcee0c2e3d8038",{"2":{"26":1}}],["0x6e6f7420777269746572",{"2":{"266":2}}],["0x6b86e40118f29ebe393a75469b4d926c7a44c2e2681b6d319520b7c1156d114",{"2":{"220":1}}],["0x64",{"2":{"204":1}}],["0x6",{"2":{"199":2}}],["0x6a11b5b3003a3aa0ae7f8f443e48314cc0bc51eaea7c3ed1c19beb909f5dda3",{"2":{"199":1}}],["0x6ffc643cbc4b2fb9c424242b18175a5e142269b45f4463d1cd4dddb7a2e5095",{"2":{"198":1}}],["0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11",{"2":{"79":2}}],["0x679177a2cb757694ac4f326d01052ff0963eac0bc2a17116a2b87badcdf6f76",{"2":{"26":1}}],["0x6162896d1d7ab204c7ccac6dd5f8e9e7c25ecd5ae4fcb4ad32e57786bb46e03",{"2":{"14":1,"26":2,"27":2,"160":1,"220":1,"221":1,"225":1}}],["0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d",{"2":{"204":2}}],["0x1987cbd17808b9a23693d4de7e246a443cfe37e6e7fbaeabd7d7e6532b07c3d",{"2":{"199":1}}],["0x1f03fa7dc5a673f96d53b728785a98d6ff089c182a7bb32735b150e91817e5b",{"2":{"199":1}}],["0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f",{"2":{"79":2}}],["0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476",{"2":{"199":2}}],["0x1",{"2":{"199":5,"204":2}}],["0x1800000000300000180000000000030000000000003006001800006600",{"2":{"14":1,"26":1,"225":1,"322":2}}],["0x1234",{"2":{"10":1,"34":1}}],["0",{"0":{"98":1,"124":2,"136":2,"223":1},"1":{"125":2,"126":2,"127":2,"128":2,"129":2,"130":2,"131":2,"132":2,"133":2,"134":2,"135":2,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1},"2":{"1":1,"3":1,"10":1,"14":6,"16":1,"26":5,"27":26,"30":1,"35":1,"59":4,"79":3,"89":2,"98":1,"104":1,"110":1,"121":4,"124":2,"125":2,"128":2,"131":2,"157":2,"160":2,"163":5,"196":4,"212":1,"217":9,"218":5,"220":2,"221":1,"222":4,"225":4,"233":4,"236":4,"237":1,"239":2,"240":9,"252":1,"264":2,"265":2,"292":5,"297":2,"310":1}}],["2d",{"2":{"295":1}}],["2ccb053bed3740ab940e67afec38ab31",{"2":{"265":1}}],["256",{"2":{"266":1}}],["25",{"2":{"265":1}}],["2478",{"2":{"222":1,"266":1}}],["24t07",{"2":{"27":35}}],["2023",{"2":{"203":2}}],["2022",{"2":{"103":1,"297":1}}],["2024",{"2":{"27":35,"89":1,"117":1,"266":1}}],["28dee92c8",{"2":{"89":1}}],["28",{"2":{"27":3,"261":1}}],["2fgraphql",{"2":{"27":1}}],["2flocalhost",{"2":{"27":1}}],["2f",{"2":{"27":1}}],["2",{"0":{"97":1,"231":1},"1":{"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1},"2":{"1":1,"3":1,"14":1,"16":1,"23":1,"25":1,"26":1,"27":1,"89":11,"97":1,"104":1,"107":1,"110":1,"157":1,"162":1,"164":2,"175":1,"201":2,"202":1,"217":6,"220":2,"225":1,"230":3,"233":2,"237":2,"262":1}}],["rm",{"2":{"213":1}}],["rs",{"2":{"84":1,"264":1}}],["rising",{"2":{"193":1}}],["risc",{"2":{"102":1}}],["risk",{"0":{"41":1,"42":1},"2":{"41":1,"42":1,"79":1}}],["right",{"2":{"23":1,"27":1,"60":1,"230":3,"231":2,"240":1,"271":2,"277":1,"286":1,"287":1,"293":2}}],["raw",{"2":{"156":1,"167":1}}],["rather",{"2":{"128":1,"227":1}}],["radical",{"2":{"103":1}}],["rapidly",{"2":{"112":1,"176":1,"180":1}}],["rapid",{"2":{"28":1,"76":1}}],["range",{"2":{"315":1}}],["randomness",{"2":{"144":1}}],["random",{"2":{"44":1}}],["ran",{"2":{"27":1}}],["rules",{"2":{"114":1,"116":1,"241":1,"243":2}}],["runs",{"2":{"107":1}}],["runtime",{"2":{"89":1,"197":1,"261":2,"263":1,"265":6,"270":1,"274":1,"276":1,"299":1}}],["running",{"0":{"271":1},"2":{"26":3,"27":2,"89":1,"96":1,"97":1,"102":1,"150":2,"157":3,"164":1,"165":1,"166":1,"167":1,"172":2,"173":2,"196":1,"210":1,"219":1,"220":1,"221":1,"246":1,"264":1,"265":2,"267":1,"296":1}}],["run",{"0":{"26":1,"88":1},"2":{"22":1,"27":3,"58":1,"78":2,"81":1,"89":2,"102":1,"108":3,"118":1,"177":2,"198":2,"209":1,"213":5,"214":1,"228":1,"231":1,"239":1,"248":3,"264":1,"266":1,"292":1,"319":1,"325":1}}],["rustc",{"2":{"150":1}}],["rustup",{"2":{"84":1,"96":2}}],["rust",{"0":{"67":1,"96":1,"150":1},"2":{"1":2,"8":1,"66":2,"84":2,"92":1,"96":1,"149":2,"150":5,"264":1}}],["room",{"2":{"260":4}}],["roomhero",{"2":{"260":2}}],["rook",{"2":{"226":1,"230":1,"233":2,"236":3}}],["root",{"2":{"60":1}}],["roadmap",{"0":{"112":1},"2":{"117":1}}],["rock",{"2":{"75":1}}],["rollup",{"2":{"105":1,"107":3}}],["rollups",{"2":{"103":1}}],["roll",{"2":{"75":1}}],["role",{"2":{"7":1,"17":1,"38":2,"51":1,"127":2,"129":1,"130":1,"326":1}}],["rolesschemaintrospectionimpl",{"2":{"38":1,"127":1}}],["roles",{"2":{"7":1,"38":4,"127":5,"129":1,"130":1}}],["route",{"2":{"22":1}}],["robust",{"2":{"22":1,"105":1,"184":1}}],["rpcurl",{"2":{"253":2,"261":1,"265":1,"282":1,"283":3}}],["rpc=http",{"2":{"163":1,"218":1}}],["rpc",{"0":{"306":1,"308":1},"1":{"307":1,"308":1,"309":2},"2":{"14":1,"26":1,"79":3,"142":2,"154":3,"155":1,"170":2,"209":1,"212":2,"213":4,"214":2,"225":1,"289":1,"307":1,"309":2,"310":2,"322":3}}],["rebuilding",{"2":{"262":1}}],["rebuild",{"2":{"262":1}}],["renamed",{"2":{"125":1}}],["reworking",{"2":{"124":1}}],["request",{"2":{"121":1,"203":1}}],["requiring",{"2":{"103":1}}],["requirements",{"0":{"230":1},"2":{"172":1,"276":1}}],["require",{"2":{"102":1}}],["required",{"2":{"36":1,"62":1,"128":1,"129":1,"187":1,"297":2}}],["requires",{"2":{"5":1,"124":1,"298":1}}],["requisites",{"0":{"196":1}}],["requisite",{"2":{"77":1}}],["revamped",{"2":{"129":1}}],["revert",{"2":{"119":1}}],["revoke",{"2":{"64":2}}],["reduce",{"2":{"105":1}}],["reusable",{"2":{"53":1,"60":1,"105":1}}],["reuse",{"2":{"33":1}}],["refining",{"2":{"101":1}}],["ref",{"2":{"38":1,"64":12,"127":1,"162":2,"217":5,"284":1}}],["refer",{"2":{"21":1,"23":1,"89":2,"160":1,"175":1,"279":1,"298":1}}],["references",{"0":{"138":1},"1":{"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1}}],["reference",{"0":{"179":1,"188":1,"206":1},"1":{"180":1,"181":1,"182":1,"189":1,"190":1,"191":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1},"2":{"15":1,"88":1,"130":1,"178":2,"187":2}}],["repeatedly",{"2":{"222":1}}],["represented",{"2":{"289":1}}],["representing",{"2":{"201":1}}],["represent",{"2":{"103":1}}],["representation",{"2":{"42":1,"284":1,"293":1}}],["represents",{"2":{"38":1,"41":1,"127":1,"217":2,"284":1}}],["report",{"2":{"222":1}}],["repository",{"2":{"85":2,"121":1,"150":1,"262":1,"267":2,"268":2}}],["repo",{"0":{"122":1},"2":{"30":1,"44":1,"121":2,"243":1,"258":1}}],["replaces",{"2":{"107":1,"193":1}}],["replace",{"2":{"14":1,"30":1,"79":1,"125":1,"213":1,"225":1,"283":1}}],["relies",{"2":{"210":1}}],["relied",{"2":{"126":1}}],["relevant",{"2":{"101":1}}],["releases",{"2":{"123":1,"298":1}}],["release",{"2":{"20":1,"89":1,"121":2,"321":2}}],["related",{"2":{"89":1,"125":1,"209":1}}],["relationship",{"2":{"45":1}}],["relayurl",{"2":{"265":1}}],["relay",{"2":{"27":11}}],["remember",{"2":{"236":1,"239":1}}],["remove",{"2":{"255":1,"256":1,"289":1}}],["removeoverride",{"0":{"256":1},"2":{"255":1,"256":4}}],["removing",{"2":{"199":1}}],["remodel",{"2":{"225":3}}],["remote",{"0":{"79":1,"81":1,"82":1},"1":{"80":1,"81":1,"82":1},"2":{"26":1,"30":1,"76":1,"79":1,"81":2}}],["remarkably",{"2":{"108":1}}],["remains",{"2":{"41":2,"43":1,"101":1,"103":1}}],["remaining",{"2":{"11":1,"15":1,"18":2,"20":1,"23":6,"25":3,"33":1,"53":1,"57":2,"60":1,"198":2,"203":2,"293":3}}],["recstype",{"2":{"257":3}}],["recs",{"0":{"254":1},"1":{"255":1,"256":1,"257":1},"2":{"255":1}}],["receiving",{"2":{"170":1}}],["receives",{"2":{"250":1,"289":1}}],["received",{"2":{"27":1,"168":1,"290":1}}],["receive",{"2":{"27":2,"198":2,"203":1,"213":2,"214":1}}],["receipt",{"2":{"154":1,"199":1}}],["recent",{"2":{"84":1,"222":1,"266":2}}],["recap",{"2":{"25":1,"27":1}}],["recognize",{"2":{"103":1}}],["recognized",{"2":{"23":1,"102":1}}],["record",{"2":{"102":1}}],["recording",{"2":{"102":1}}],["recommended",{"2":{"81":1,"264":1}}],["recommend",{"2":{"22":1,"89":1,"215":1,"223":1}}],["reconstructed",{"2":{"103":1}}],["reconstruct",{"2":{"18":1,"63":1}}],["re",{"2":{"23":1,"103":1,"121":1,"123":1,"185":1,"196":1,"198":1,"238":1,"240":1,"243":3,"244":1,"247":1}}],["residing",{"2":{"276":1}}],["reside",{"2":{"103":1,"132":1,"227":1}}],["resolve",{"2":{"264":1}}],["resolution",{"2":{"262":1,"287":1}}],["resouces",{"2":{"30":1}}],["resources",{"2":{"154":1}}],["resource",{"2":{"10":3,"27":2,"30":1,"34":4,"64":5,"101":1}}],["resume",{"2":{"173":1,"174":1}}],["result",{"2":{"135":2,"201":1,"210":1,"217":4,"260":1,"264":1}}],["results",{"2":{"27":1,"41":1,"217":3,"261":1}}],["resulting",{"2":{"27":1,"105":1}}],["response",{"2":{"203":1}}],["responses",{"2":{"199":1}}],["responsible",{"2":{"56":1,"149":1}}],["respectively",{"2":{"25":1,"220":1,"230":1}}],["restarts",{"2":{"172":1}}],["restored",{"2":{"172":1}}],["rest",{"2":{"23":2,"59":1,"62":1,"193":1,"194":1,"198":1,"203":1,"231":1}}],["resemblance",{"2":{"23":1}}],["registrations",{"2":{"209":1}}],["registers",{"2":{"217":1}}],["register",{"0":{"328":1},"2":{"27":3,"61":1,"64":1,"191":1,"217":4,"257":1,"328":7}}],["registered",{"2":{"19":1,"26":1,"27":4,"203":1,"217":13}}],["regular",{"2":{"14":1,"25":1,"46":1,"47":1,"55":1,"128":1,"130":1}}],["returntype",{"2":{"255":1}}],["returns",{"2":{"201":1,"217":2,"251":1,"252":1,"284":1}}],["return",{"2":{"23":1,"35":1,"200":2,"201":1,"217":1,"235":1,"252":1,"255":1,"257":1,"263":1,"283":1,"284":2}}],["returned",{"2":{"10":1,"197":1}}],["retrieval",{"2":{"43":1,"193":1}}],["retrieved",{"2":{"252":1}}],["retrieves",{"2":{"197":1,"290":1}}],["retrieve",{"2":{"10":3,"23":3,"25":3,"27":1,"34":1,"167":1,"193":1,"198":1,"199":1,"232":1,"251":1,"252":6}}],["retrieving",{"2":{"8":1,"10":1,"41":2,"42":1,"43":1}}],["reason",{"2":{"222":2,"266":2}}],["react",{"0":{"250":1},"1":{"251":1,"252":1},"2":{"45":1,"248":10,"250":1}}],["readme",{"2":{"225":1}}],["ready",{"2":{"78":1,"196":1,"213":1}}],["reading",{"0":{"106":1},"2":{"46":1,"86":1,"242":2}}],["read",{"0":{"166":1,"221":1,"311":1},"2":{"15":1,"16":1,"20":1,"26":1,"39":1,"46":1,"48":1,"57":3,"162":1,"200":1,"205":1,"217":10,"242":1}}],["readability",{"2":{"8":1}}],["real",{"2":{"27":1}}],["realms",{"0":{"70":1},"2":{"3":1,"75":3}}],["realized",{"2":{"1":1}}],["immortal",{"2":{"241":1}}],["impact",{"2":{"40":1}}],["import",{"2":{"134":1,"253":1,"255":2,"279":1,"298":4}}],["imported",{"2":{"44":1}}],["imports",{"2":{"25":1,"57":1,"125":1,"131":1,"217":1,"232":1}}],["importance",{"2":{"23":1,"25":1}}],["important",{"2":{"14":1,"15":1,"50":1,"51":1,"52":1,"62":1,"79":1,"102":1,"128":1}}],["implication",{"2":{"227":1}}],["implies",{"2":{"23":1}}],["imply",{"2":{"103":1}}],["implemented",{"2":{"126":1,"203":1,"217":1}}],["implements",{"2":{"35":1}}],["implementing",{"0":{"35":1},"2":{"227":2}}],["implementation",{"0":{"126":1,"130":1},"2":{"23":1,"53":1,"129":1,"149":1,"150":1,"217":3}}],["implementations",{"2":{"8":1,"150":1}}],["implement",{"0":{"117":1,"229":1},"1":{"230":1},"2":{"23":1,"32":1,"35":1,"38":2,"39":1,"55":1,"57":1,"127":2,"130":1,"217":1,"227":1,"229":1,"230":1}}],["impl",{"2":{"16":2,"23":2,"35":1,"38":1,"39":2,"46":1,"53":1,"57":2,"127":1,"130":1,"162":1,"217":4,"230":3,"231":1}}],["improve",{"2":{"8":1,"105":1}}],["improved",{"2":{"1":1}}],["illegal",{"2":{"230":1,"231":1}}],["illustrative",{"2":{"102":1}}],["illustrate",{"2":{"15":1}}],["illustrates",{"2":{"6":1}}],["ie",{"2":{"154":1}}],["icreatecarddispatchertrait",{"2":{"134":1}}],["icreatecarddispatcher",{"2":{"134":2}}],["icreatecard",{"2":{"129":1,"130":2}}],["icon",{"2":{"30":3}}],["ignored",{"0":{"122":1},"2":{"212":1}}],["igoblinactions",{"2":{"39":1}}],["ios",{"2":{"298":1}}],["io",{"2":{"89":1,"155":1}}],["iworld",{"2":{"64":1}}],["iworlddispatchertrait",{"2":{"53":1,"60":1,"233":1,"240":1}}],["iworlddispatcher",{"2":{"23":2,"53":2,"57":1,"60":1,"129":1,"130":1,"231":2,"233":2}}],["iplayersystem",{"2":{"284":1}}],["iplayeractions",{"2":{"46":3,"53":2,"57":2}}],["ip",{"2":{"143":1}}],["ip4",{"2":{"27":9}}],["ipfs",{"2":{"26":1,"27":2,"30":4}}],["iactionsimpl",{"2":{"231":1}}],["iactionsdispatchertrait",{"2":{"60":1,"233":1,"240":1}}],["iactionsdispatcher",{"2":{"60":3,"233":3,"235":1,"240":1}}],["iactions",{"2":{"23":3,"231":1}}],["ideas",{"2":{"112":1}}],["ideal",{"2":{"22":1}}],["identifier",{"2":{"36":1,"164":1,"219":1}}],["identified",{"2":{"34":1}}],["identify",{"2":{"34":1}}],["ide",{"2":{"27":4,"194":1,"198":1}}],["id=12d3koowf2crpqmshvedqvltuigfqur5ztwsfxgu4izk4gfvocjx",{"2":{"27":2}}],["id",{"2":{"11":1,"16":1,"26":1,"27":7,"36":3,"38":1,"39":12,"41":6,"42":3,"65":2,"127":1,"129":1,"130":1,"145":3,"198":4,"199":4,"203":6,"204":3,"226":4,"231":6,"233":10,"236":3,"237":3,"240":9,"252":1,"260":4,"284":3}}],["ids",{"2":{"8":1,"14":1,"64":1,"65":1,"79":1,"225":1,"251":1,"252":2}}],["if",{"2":{"6":1,"10":1,"11":1,"21":1,"22":1,"23":1,"34":1,"35":1,"41":1,"78":1,"80":1,"83":1,"91":1,"102":1,"103":1,"112":1,"116":1,"117":1,"123":1,"126":1,"150":1,"154":3,"173":2,"198":1,"199":1,"204":1,"210":1,"212":1,"213":2,"214":1,"217":7,"226":2,"228":1,"231":3,"236":2,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":2,"251":1,"252":2,"261":1,"262":2,"263":2,"276":1,"279":1,"287":1,"298":1}}],["i",{"0":{"4":1,"118":1},"2":{"75":1,"172":1,"236":1,"242":2}}],["items",{"2":{"26":1,"201":1}}],["its",{"2":{"7":1,"23":1,"27":1,"36":1,"45":1,"51":1,"53":1,"102":2,"105":1,"107":1,"127":1,"129":1,"203":3}}],["it",{"0":{"24":1,"26":1,"54":1},"1":{"25":1,"55":1,"56":1,"57":1},"2":{"3":1,"7":1,"11":1,"15":1,"19":1,"20":2,"22":1,"23":3,"25":1,"26":2,"27":2,"29":1,"30":3,"31":2,"34":1,"36":1,"37":1,"38":1,"39":1,"40":1,"42":1,"43":1,"44":1,"51":1,"52":2,"53":1,"55":1,"56":2,"57":1,"59":2,"61":1,"62":5,"64":2,"65":2,"66":1,"75":1,"79":1,"86":1,"89":1,"91":1,"101":2,"102":1,"103":2,"105":1,"107":2,"108":2,"111":2,"114":1,"115":3,"127":1,"148":1,"149":3,"150":2,"151":1,"154":4,"155":1,"163":2,"166":1,"170":2,"172":1,"184":4,"193":3,"194":2,"196":1,"198":1,"199":1,"203":1,"205":2,"210":1,"213":1,"225":1,"227":2,"230":3,"233":1,"239":1,"241":1,"242":1,"243":1,"250":1,"252":1,"256":1,"262":2,"263":2,"264":1,"271":1,"276":1,"284":2,"291":2,"292":1,"298":1,"316":1,"324":1,"325":1}}],["inner",{"2":{"284":3}}],["innovation",{"2":{"49":1,"103":1}}],["inactivity",{"2":{"210":1}}],["inefficient",{"2":{"200":1,"202":1}}],["inject",{"2":{"131":1}}],["injects",{"2":{"57":1}}],["invalid",{"2":{"144":1,"261":1}}],["invented",{"2":{"115":1}}],["invocation",{"2":{"300":1,"301":1,"302":1,"303":1,"305":1,"315":1}}],["invoke",{"0":{"167":1,"222":1},"2":{"145":2,"167":1,"222":3,"265":1}}],["invoked",{"2":{"50":1,"167":1,"222":1,"309":2}}],["involves",{"2":{"33":1,"40":1,"42":1,"78":1,"280":1}}],["involved",{"0":{"4":1},"2":{"112":1}}],["inlining",{"2":{"105":1}}],["inline",{"2":{"38":3,"127":3}}],["infura",{"2":{"155":1}}],["infrastructure",{"2":{"62":1}}],["information",{"2":{"41":2,"102":2,"142":1,"151":1,"193":1,"198":1,"204":1,"251":1,"298":1}}],["informs",{"2":{"23":1}}],["info",{"2":{"27":30,"305":1}}],["industry",{"2":{"102":1}}],["independently",{"2":{"102":1}}],["indexer",{"2":{"207":1,"209":3,"210":4,"212":1,"214":1}}],["indexed",{"2":{"12":1,"17":1,"18":1,"19":1,"20":1,"23":2,"27":1,"34":1,"210":1}}],["index",{"2":{"27":1,"29":1,"64":1,"212":1}}],["indexing",{"0":{"27":1},"2":{"1":1,"27":1,"212":1}}],["indicated",{"2":{"48":1}}],["indicates",{"2":{"34":1,"131":1,"265":1,"284":1}}],["inputs",{"2":{"232":1}}],["input",{"2":{"27":2,"201":1,"203":1,"220":1,"236":1}}],["inprogress",{"2":{"16":3}}],["incorporate",{"2":{"291":1}}],["incorrect",{"2":{"233":2}}],["increment",{"2":{"39":1}}],["increasenextblocktimestamp",{"0":{"302":1},"2":{"302":1,"303":1}}],["increased",{"2":{"103":1}}],["increase",{"2":{"25":1,"302":1,"328":1}}],["including",{"2":{"57":1,"105":1,"118":1}}],["included",{"2":{"170":1}}],["includes",{"2":{"27":1,"184":1,"199":1,"298":1,"300":1}}],["include",{"2":{"20":1,"23":1,"55":1,"59":1,"184":1,"209":1,"241":1}}],["inclusion",{"2":{"23":1}}],["insights",{"2":{"291":1}}],["inside",{"2":{"231":1,"252":1}}],["inspired",{"2":{"75":1}}],["inspect",{"2":{"23":1}}],["instructions",{"2":{"88":1,"89":2,"279":1}}],["instantiated",{"2":{"135":1}}],["instantiate",{"2":{"134":1}}],["instances",{"2":{"176":1,"180":1,"289":1}}],["instance",{"2":{"36":1,"48":1,"77":1,"102":1,"277":1}}],["installs",{"2":{"287":1}}],["installer",{"2":{"157":1}}],["installed",{"2":{"21":1,"26":1,"84":1,"89":1,"149":1,"150":1,"186":1,"213":1,"287":1}}],["installing",{"0":{"120":1,"187":1},"2":{"96":1}}],["installations",{"0":{"122":1},"2":{"177":1}}],["installation",{"0":{"177":1,"186":1},"1":{"187":1},"2":{"89":1,"157":3,"186":1}}],["install",{"0":{"87":1,"89":1,"96":1,"97":1,"157":1,"297":1},"2":{"84":1,"85":7,"87":2,"88":1,"89":8,"96":2,"97":2,"98":1,"120":1,"121":11,"123":1,"150":2,"156":1,"157":5,"177":1,"187":2,"248":2,"287":1,"292":1,"297":2}}],["instead",{"2":{"15":1,"42":1,"114":1,"122":1,"134":1,"142":1,"203":1,"261":1}}],["init",{"0":{"324":1},"2":{"22":1,"190":1,"213":1,"224":1,"324":2}}],["initiate",{"2":{"77":1,"214":1,"286":1}}],["initiative",{"2":{"3":1}}],["initially",{"2":{"42":1,"203":1,"289":1}}],["initialization",{"2":{"261":1,"289":1}}],["initializing",{"0":{"224":1},"2":{"36":1,"217":1}}],["initializes",{"2":{"217":1}}],["initialize",{"2":{"23":1,"142":1,"174":1,"213":1,"217":1,"224":1,"253":1,"324":2}}],["initialized",{"2":{"19":1,"142":1,"173":1}}],["initializer",{"2":{"14":1,"225":1}}],["initial",{"2":{"7":1,"53":1,"56":1}}],["intuitive",{"2":{"185":1,"202":1}}],["intend",{"2":{"261":1,"298":1}}],["intended",{"2":{"242":1}}],["integrate",{"2":{"272":1,"274":1,"298":1}}],["integrating",{"2":{"74":1}}],["integration",{"0":{"60":1},"1":{"61":1},"2":{"60":3,"225":2,"239":2,"240":1,"243":1}}],["integrity",{"2":{"43":1,"154":1}}],["integers",{"2":{"42":2,"201":1}}],["integer",{"2":{"42":3,"43":1}}],["internalfunctionstrait",{"2":{"217":1}}],["internalfunctions",{"2":{"217":1}}],["internal",{"2":{"217":4}}],["interval",{"0":{"169":1},"2":{"142":2,"169":2}}],["interpret",{"2":{"113":1}}],["interested",{"2":{"101":1,"203":1}}],["interfaces",{"2":{"55":1,"128":1}}],["interface",{"0":{"129":1,"130":1},"2":{"23":2,"46":2,"53":1,"64":3,"129":2,"130":2,"162":1,"184":1,"217":1,"284":1}}],["interacts",{"2":{"62":2}}],["interactively",{"2":{"194":1}}],["interactions",{"2":{"154":2,"291":1}}],["interaction",{"0":{"161":1,"216":1},"1":{"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"49":1,"222":1}}],["interacting",{"2":{"5":1,"66":1,"184":1,"280":1,"295":1}}],["interacted",{"2":{"27":1,"64":1,"167":1}}],["interact",{"0":{"156":1},"1":{"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1},"2":{"8":1,"9":1,"27":1,"46":1,"57":1,"78":1,"103":1,"113":1,"154":4,"167":1,"213":1,"215":1,"232":1,"272":1}}],["intact",{"2":{"41":1}}],["intrinsic",{"2":{"39":1}}],["intricate",{"2":{"22":1}}],["introduction",{"0":{"127":1}}],["introducing",{"2":{"125":1}}],["introduced",{"2":{"103":2,"124":1}}],["introduce",{"2":{"39":1,"42":1}}],["introduces",{"2":{"5":1,"57":1,"131":1}}],["introspect",{"2":{"16":1,"23":1,"46":1,"226":3,"293":1}}],["into",{"0":{"46":1,"234":1},"1":{"235":1,"236":1,"237":1},"2":{"8":1,"16":3,"22":1,"25":1,"26":1,"27":2,"39":1,"44":1,"45":1,"56":1,"57":1,"60":1,"86":1,"114":1,"117":1,"213":1,"233":2,"235":1,"237":1,"240":3,"264":1,"272":1,"274":2,"279":1,"284":2,"288":1,"291":1,"309":1}}],["in",{"0":{"22":1,"25":1,"39":2,"55":1,"67":1,"126":1,"150":1,"160":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"2":{"1":1,"5":1,"6":1,"8":1,"10":3,"11":1,"14":1,"15":3,"16":3,"17":1,"18":1,"20":2,"22":3,"23":6,"25":2,"26":5,"27":5,"30":4,"32":1,"33":1,"34":1,"36":1,"38":1,"39":2,"40":1,"41":1,"42":2,"43":2,"48":2,"49":2,"50":1,"51":1,"56":1,"57":4,"59":2,"60":1,"61":1,"63":1,"66":2,"75":1,"76":1,"80":1,"88":1,"89":2,"101":1,"102":3,"103":6,"105":1,"107":1,"108":1,"116":2,"117":3,"121":7,"125":1,"127":1,"128":1,"130":1,"142":2,"149":3,"150":6,"154":1,"156":1,"160":4,"163":1,"164":1,"168":1,"169":1,"170":2,"172":5,"173":2,"174":1,"176":1,"184":2,"193":4,"196":1,"198":2,"199":1,"200":1,"202":1,"203":4,"204":2,"209":2,"210":5,"212":1,"213":1,"214":1,"217":3,"218":1,"219":1,"220":1,"222":2,"226":2,"227":2,"229":1,"231":2,"232":4,"236":1,"237":1,"239":3,"240":15,"241":1,"246":1,"253":1,"255":1,"256":1,"257":1,"260":2,"261":1,"262":1,"263":2,"264":1,"265":1,"266":4,"269":1,"270":3,"274":2,"276":1,"277":1,"278":1,"289":2,"290":2,"291":6,"292":1,"293":2,"298":1,"302":1,"303":1,"309":1,"315":1,"322":1,"324":1}}],["isimplestorage",{"2":{"162":2}}],["issue",{"2":{"112":1,"264":1}}],["issues",{"2":{"112":1,"228":1}}],["isomorphic",{"2":{"108":1}}],["isolation",{"2":{"102":1}}],["isolated",{"2":{"33":1,"102":1,"154":1}}],["isn",{"2":{"22":1,"102":1}}],["is",{"0":{"1":1,"25":1,"44":1,"55":1,"112":1,"113":1,"114":1,"115":1,"116":1},"1":{"2":1,"3":1,"4":1},"2":{"0":1,"1":2,"2":2,"3":2,"5":2,"6":2,"7":2,"8":1,"10":2,"11":1,"12":1,"14":2,"15":1,"17":1,"18":2,"23":3,"25":2,"26":1,"27":3,"28":2,"31":2,"33":1,"34":5,"35":7,"37":1,"39":1,"41":2,"42":1,"43":1,"44":1,"46":1,"47":1,"48":2,"50":1,"52":3,"53":1,"55":1,"56":3,"57":1,"58":1,"59":8,"60":4,"62":3,"64":4,"65":1,"66":1,"68":2,"75":1,"77":1,"79":1,"81":1,"82":1,"84":1,"86":1,"87":1,"89":1,"91":2,"101":2,"102":1,"103":5,"105":2,"107":6,"108":4,"110":1,"112":1,"114":2,"115":1,"116":2,"117":2,"118":2,"126":1,"128":1,"129":3,"130":1,"149":8,"150":6,"154":3,"160":1,"164":1,"166":3,"167":3,"168":2,"169":1,"170":2,"172":6,"173":2,"175":1,"176":1,"184":1,"193":3,"194":1,"196":1,"197":1,"199":2,"201":1,"203":4,"204":1,"205":2,"209":1,"210":4,"213":1,"214":1,"217":10,"219":1,"220":1,"221":3,"222":3,"227":1,"230":10,"231":6,"232":1,"233":2,"236":1,"237":1,"240":4,"242":5,"243":2,"252":2,"253":1,"256":1,"257":4,"261":1,"262":4,"263":1,"265":1,"284":2,"285":1,"287":2,"289":1,"290":1,"292":1,"295":1,"299":2,"307":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1}}],["amount",{"2":{"302":2}}],["amp",{"0":{"69":1,"74":1,"95":1},"1":{"70":1,"71":1,"72":1,"73":1,"96":1,"97":1,"98":1},"2":{"3":1,"35":2,"74":1,"96":4,"102":1,"213":2,"230":44,"272":1}}],["a4",{"2":{"240":4}}],["a2",{"2":{"233":4,"240":4}}],["a1",{"2":{"226":1,"233":5,"236":5}}],["akin",{"2":{"107":1}}],["avoid",{"2":{"255":1}}],["avoids",{"2":{"154":1}}],["avoiding",{"2":{"89":1}}],["availability",{"2":{"103":1}}],["available",{"2":{"27":1,"59":2,"60":1,"88":1,"123":1,"145":2,"173":1,"178":1,"187":1,"233":2,"240":1,"248":1,"261":1,"292":1}}],["aimed",{"2":{"298":1}}],["aim",{"2":{"116":1}}],["aims",{"2":{"57":1,"105":1,"175":1}}],["ai",{"2":{"75":1}}],["ages",{"2":{"42":1}}],["age",{"2":{"42":9,"43":1}}],["against",{"2":{"154":1}}],["again",{"2":{"23":1,"222":1}}],["affect",{"2":{"41":1}}],["after",{"0":{"244":1},"2":{"27":1,"43":1,"159":1,"165":1,"166":1,"167":1,"170":1,"196":1,"198":2,"199":1,"201":5,"204":1,"210":1,"213":1,"220":1,"221":1,"235":1,"236":1,"237":1,"244":1,"262":1}}],["awake",{"2":{"265":1}}],["await",{"2":{"253":2,"263":1,"283":2,"284":2}}],["away",{"2":{"62":1}}],["awesome",{"0":{"75":1},"2":{"27":1,"68":1,"106":1,"150":1,"167":1}}],["aws",{"2":{"3":1,"5":1,"86":1,"103":1,"105":2,"184":1}}],["acknowledges",{"2":{"163":1,"218":1}}],["achieving",{"2":{"102":1}}],["achieve",{"2":{"36":1,"105":1,"264":1}}],["acts",{"2":{"76":1,"274":1,"290":1}}],["act",{"2":{"51":1}}],["actively",{"2":{"204":1}}],["activated",{"2":{"27":1}}],["action",{"2":{"27":1,"204":1,"229":1,"255":1,"256":1}}],["actionsimpl",{"2":{"23":1}}],["actions",{"2":{"23":3,"26":4,"27":3,"39":1,"46":1,"53":1,"57":1,"60":7,"105":1,"225":2,"227":3,"232":3,"233":10,"235":4,"236":2,"237":1,"239":1,"240":6}}],["across",{"2":{"33":1,"35":1,"53":1,"172":1}}],["accepts",{"2":{"231":1}}],["accepting",{"2":{"103":1}}],["accepted",{"2":{"103":1}}],["accept",{"2":{"53":1}}],["access",{"2":{"46":1,"50":1,"52":1,"103":1,"193":1,"260":1,"289":1}}],["accessing",{"2":{"35":1,"319":1}}],["accessible",{"2":{"27":1,"155":1,"299":1}}],["accurately",{"2":{"291":1}}],["accurate",{"2":{"41":1,"57":1}}],["according",{"2":{"197":1,"203":1}}],["accordingly",{"2":{"125":1}}],["accomplish",{"2":{"27":2,"89":2,"156":1}}],["account1",{"2":{"175":1}}],["account=katana",{"2":{"163":1,"218":1}}],["accounts",{"0":{"160":1},"2":{"144":3,"154":3,"159":1,"160":4,"213":1,"220":1,"305":1}}],["account",{"0":{"281":1,"282":1,"283":1},"1":{"282":1,"283":1},"2":{"14":2,"26":3,"79":4,"145":2,"160":4,"163":1,"213":5,"218":1,"220":3,"221":1,"222":1,"225":2,"251":1,"263":1,"280":1,"281":3,"282":3,"283":8,"284":11,"322":3}}],["adaptation",{"2":{"75":1}}],["adaptable",{"2":{"53":1}}],["adjusting",{"2":{"270":1}}],["adjust",{"2":{"57":1,"127":1,"289":1}}],["advancements",{"2":{"101":1}}],["advanced",{"0":{"215":1},"1":{"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"45":1}}],["advancing",{"2":{"3":1}}],["adhering",{"2":{"33":1}}],["adhere",{"2":{"23":1,"103":1}}],["adddeployaccounttransaction",{"2":{"312":1}}],["adddeclaretransaction",{"2":{"312":1}}],["addoverride",{"0":{"256":1},"2":{"255":1,"256":4}}],["added",{"2":{"103":1,"154":1,"262":1}}],["addinvoketransaction",{"2":{"312":1}}],["adding",{"0":{"279":1},"2":{"41":2,"241":1}}],["additionally",{"2":{"199":1,"274":1}}],["additional",{"2":{"29":1,"32":1,"39":1,"96":1}}],["add",{"0":{"98":1,"163":1,"274":1},"2":{"30":1,"89":1,"130":1,"151":1,"152":1,"162":1,"217":1,"226":2,"233":1,"239":1,"241":1,"243":1,"255":1,"256":1,"262":1,"263":1,"287":1,"289":1,"298":2}}],["addresses",{"2":{"160":1,"220":2,"232":1,"236":1}}],["address=",{"2":{"27":9}}],["address",{"2":{"10":1,"12":1,"13":1,"14":1,"18":1,"19":3,"20":3,"23":7,"25":1,"26":9,"27":14,"34":1,"46":3,"50":1,"53":3,"57":3,"60":3,"62":1,"64":5,"79":4,"134":1,"143":1,"160":1,"162":1,"165":1,"166":1,"167":1,"196":1,"200":1,"204":1,"212":1,"213":6,"214":1,"217":18,"220":6,"221":3,"222":1,"225":2,"226":1,"231":3,"233":8,"235":2,"236":4,"237":1,"240":2,"251":2,"253":2,"262":1,"264":1,"270":2,"283":1,"284":2,"289":1,"322":3,"326":3}}],["adopting",{"2":{"22":1}}],["attention",{"2":{"222":1}}],["attempt",{"2":{"217":1}}],["attempting",{"2":{"164":1}}],["attrs",{"2":{"38":1,"127":1}}],["attributes",{"2":{"23":1,"30":2,"127":1}}],["attribute",{"0":{"34":1},"2":{"23":2,"25":1,"30":1,"32":1,"33":2,"34":1,"48":2,"53":1}}],["attacker",{"2":{"38":1,"127":1}}],["attack",{"2":{"36":1}}],["attached",{"2":{"15":2}}],["at",{"2":{"8":1,"22":1,"23":1,"26":4,"27":1,"31":1,"34":1,"45":1,"46":1,"53":1,"79":1,"103":1,"116":1,"121":1,"142":1,"150":1,"155":2,"165":1,"169":1,"170":1,"196":1,"197":1,"200":1,"213":1,"217":1,"220":1,"222":2,"236":1,"237":1,"238":1,"261":2,"264":2,"265":6,"266":2,"270":1,"299":1}}],["above",{"2":{"27":1,"38":1,"127":1,"222":1}}],["about",{"2":{"16":1,"20":1,"23":1,"26":1,"27":1,"29":1,"48":1,"52":1,"102":1,"103":2,"115":1,"151":1,"160":1,"175":1,"198":2,"200":1,"243":1,"291":1}}],["ability",{"2":{"117":1}}],["abi",{"2":{"23":1,"39":1,"46":1,"53":1,"57":1,"130":2,"162":1,"217":1,"231":1}}],["abstracts",{"2":{"62":1}}],["abstraction",{"2":{"45":1,"103":1}}],["abstracting",{"2":{"8":1}}],["abstract",{"2":{"8":1,"103":1}}],["able",{"2":{"7":1,"62":1,"78":1,"81":1}}],["apt",{"2":{"121":1}}],["applying",{"0":{"278":1}}],["application",{"2":{"213":1}}],["applications",{"2":{"105":2,"193":1,"209":1}}],["applied",{"2":{"199":1,"204":1}}],["apparent",{"2":{"197":1}}],["appchains",{"2":{"108":2}}],["appchain",{"0":{"108":1},"2":{"108":1}}],["app",{"2":{"46":1,"248":8}}],["appends",{"2":{"148":1}}],["append",{"2":{"38":1,"127":1}}],["approach",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1},"2":{"33":1,"102":1,"116":1,"204":1,"226":1}}],["appropriate",{"2":{"5":1,"105":1}}],["apis",{"2":{"194":1,"203":1}}],["api",{"0":{"64":1,"311":1,"312":1,"313":1},"2":{"27":2,"79":3,"155":1,"193":1,"194":1,"199":2,"209":2,"212":1,"299":1,"322":1}}],["apache",{"2":{"1":1,"3":1,"110":1}}],["alchemy",{"2":{"79":1}}],["along",{"2":{"62":1}}],["algebra",{"2":{"44":1}}],["align",{"2":{"43":1,"291":1}}],["alice",{"2":{"41":1}}],["alternative",{"2":{"150":1}}],["altered",{"2":{"62":1}}],["alter",{"2":{"50":1,"53":1}}],["altering",{"2":{"42":1}}],["although",{"2":{"22":1,"62":1,"150":1,"199":1}}],["alpha",{"2":{"26":2,"89":1,"157":1,"225":2,"264":2,"292":2}}],["already",{"2":{"11":1,"16":1,"21":1,"142":1,"150":1,"154":1,"164":1,"217":1,"219":1,"222":2,"230":3,"231":2,"253":1,"279":1}}],["allowed",{"2":{"143":1,"212":4,"217":5}}],["allowing",{"2":{"36":1,"49":1,"144":1,"154":1,"172":1,"173":1,"201":1,"217":1}}],["allow",{"2":{"18":1,"89":1,"102":1,"142":1,"197":1}}],["allows",{"2":{"5":1,"7":1,"57":1,"58":1,"102":1,"130":1,"131":1,"154":1,"170":1,"193":1,"194":1,"203":1,"204":1,"217":1,"316":1}}],["all",{"2":{"10":1,"17":1,"26":1,"27":1,"34":1,"57":1,"58":1,"59":1,"63":1,"87":1,"89":1,"101":1,"113":1,"122":1,"125":1,"155":1,"170":1,"172":1,"178":1,"184":2,"187":1,"198":1,"200":1,"212":1,"213":1,"217":1,"222":1,"225":1,"235":1,"243":2,"244":1,"248":1,"252":3,"253":3,"260":1,"289":1,"300":1,"305":1,"317":1,"325":1}}],["also",{"2":{"5":2,"10":1,"11":1,"19":2,"23":1,"36":1,"53":1,"61":1,"84":1,"103":1,"107":1,"108":2,"149":1,"172":1,"203":2,"284":1}}],["always",{"2":{"1":2,"38":3,"89":1,"127":3,"242":1}}],["arguments",{"2":{"201":1}}],["argument",{"2":{"165":1,"203":1}}],["artwork",{"2":{"103":1}}],["artists",{"2":{"68":1}}],["artifacts",{"2":{"323":1}}],["artifact",{"2":{"26":2}}],["arise",{"2":{"96":1}}],["around",{"2":{"62":1,"87":1,"103":1,"199":1}}],["arraytrait",{"2":{"39":1}}],["array",{"2":{"38":7,"39":1,"60":1,"64":1,"127":7,"134":1,"230":3,"233":1,"235":1,"251":1,"284":1}}],["arrays",{"2":{"37":1}}],["arbitrary",{"2":{"30":1}}],["are",{"0":{"33":1,"51":1,"122":1,"243":1},"1":{"34":1,"35":1,"36":1,"37":1,"38":1},"2":{"5":1,"8":4,"9":2,"10":4,"11":2,"12":1,"14":1,"15":2,"16":1,"17":1,"19":3,"20":1,"21":1,"25":1,"26":1,"27":1,"32":2,"33":1,"40":1,"42":1,"48":1,"49":1,"50":1,"57":1,"59":2,"60":1,"62":1,"78":1,"80":1,"81":1,"83":1,"91":1,"103":1,"104":1,"105":1,"113":2,"117":1,"123":2,"125":1,"128":2,"150":2,"160":1,"168":1,"172":1,"193":1,"197":2,"201":4,"203":2,"204":1,"213":2,"220":2,"226":2,"227":2,"236":1,"241":1,"242":1,"246":1,"248":2,"250":1,"253":1,"260":1,"262":1,"263":1,"289":2,"291":1,"307":1,"309":1}}],["architecture",{"0":{"6":1,"46":1},"2":{"2":1,"6":1,"45":1,"291":1}}],["asyncmethodbuildercore+",{"2":{"265":1}}],["asynchronously",{"2":{"290":1}}],["asynchronous",{"2":{"263":1}}],["async",{"0":{"263":1},"2":{"283":2,"284":2}}],["ask",{"2":{"238":1}}],["asdf",{"2":{"89":6}}],["aspects",{"2":{"46":1,"184":1}}],["assuming",{"2":{"121":1}}],["assumes",{"2":{"21":1}}],["assembly",{"0":{"284":1},"2":{"280":1}}],["asset",{"2":{"30":1}}],["assets",{"2":{"30":3,"261":2,"262":1,"263":1,"265":2,"270":3,"274":2,"298":1}}],["assertstrait",{"2":{"217":1}}],["assertsimpl",{"2":{"217":1}}],["asserts",{"2":{"217":1}}],["assert",{"2":{"16":6,"59":2,"60":3,"135":1,"217":5,"230":1,"231":3,"233":14,"236":3,"237":3,"240":15}}],["associating",{"2":{"29":1}}],["associated",{"2":{"23":1,"197":1,"220":1}}],["as",{"0":{"22":1,"107":1,"108":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"2":{"5":2,"8":1,"10":3,"11":2,"15":1,"16":2,"23":3,"25":1,"26":1,"27":1,"29":1,"33":1,"34":4,"35":1,"36":1,"39":2,"41":1,"42":4,"43":1,"46":1,"48":1,"50":2,"51":1,"53":2,"55":1,"57":1,"59":1,"62":3,"64":1,"75":1,"76":1,"81":1,"89":1,"101":1,"102":1,"103":3,"107":3,"123":1,"127":1,"134":1,"135":1,"150":3,"154":2,"156":1,"164":1,"168":2,"169":1,"172":2,"175":3,"193":1,"200":1,"202":1,"203":1,"204":1,"210":2,"213":2,"217":2,"219":1,"226":1,"232":1,"235":1,"243":1,"253":1,"255":1,"256":1,"260":2,"263":1,"274":1,"284":2,"290":1,"291":4,"298":1,"309":1}}],["automate",{"2":{"292":1}}],["automatic",{"2":{"207":1}}],["automatically",{"2":{"27":1,"30":1,"159":1,"164":1,"168":1,"279":1}}],["auto",{"2":{"27":1,"142":1}}],["autonomous",{"0":{"103":1,"114":1},"1":{"104":1},"2":{"2":1,"3":1,"5":1,"75":4,"86":1,"103":5,"104":4,"105":1,"114":2}}],["authentication",{"0":{"266":1},"2":{"213":1}}],["authenticating",{"2":{"213":1}}],["authorize",{"2":{"7":1}}],["authorization",{"0":{"5":1,"7":1},"1":{"6":1,"7":1},"2":{"5":3,"6":3,"7":1,"326":1}}],["auth",{"0":{"6":1,"326":1},"2":{"7":1,"182":2,"191":1,"213":3,"266":2,"326":6}}],["a",{"0":{"23":1,"25":2,"45":1,"49":1,"55":2,"116":1,"156":1,"162":1,"217":1,"242":1,"278":1},"1":{"46":1,"47":1,"48":1,"49":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"243":1,"244":1},"2":{"1":2,"2":1,"5":5,"6":2,"7":4,"8":1,"10":2,"12":1,"13":1,"14":3,"15":6,"16":2,"17":3,"18":2,"20":3,"22":7,"23":8,"25":7,"26":2,"27":8,"28":1,"30":4,"31":1,"33":1,"34":5,"35":2,"36":6,"39":11,"40":1,"41":5,"42":4,"43":1,"46":1,"47":1,"48":3,"49":2,"50":1,"51":3,"52":1,"53":2,"55":3,"56":1,"57":1,"58":3,"59":1,"60":2,"61":1,"62":3,"64":1,"65":1,"66":1,"68":1,"75":4,"76":1,"77":1,"78":1,"79":1,"80":1,"82":1,"84":1,"85":2,"87":1,"89":6,"91":2,"101":1,"102":8,"103":7,"105":3,"107":5,"108":2,"111":1,"113":1,"115":2,"116":9,"117":1,"118":1,"119":1,"121":8,"122":1,"130":1,"131":1,"139":1,"142":5,"147":1,"148":1,"150":1,"154":6,"156":2,"157":1,"159":1,"160":1,"163":3,"164":2,"165":1,"167":2,"168":2,"169":3,"170":4,"173":3,"174":2,"176":1,"178":1,"180":1,"184":5,"187":1,"193":3,"194":2,"197":2,"198":2,"200":1,"201":2,"203":10,"204":1,"205":2,"207":1,"209":1,"210":4,"212":2,"213":9,"214":2,"215":1,"217":9,"218":2,"219":1,"222":1,"223":1,"224":1,"225":1,"226":3,"227":1,"231":2,"236":3,"237":1,"239":2,"241":2,"242":3,"243":5,"246":1,"250":1,"252":1,"256":1,"261":1,"262":1,"264":1,"266":3,"267":1,"271":1,"276":1,"278":1,"281":2,"282":1,"283":1,"284":4,"290":1,"291":1,"292":2,"296":1,"298":2,"299":1,"300":1,"302":1,"315":2,"317":5,"324":2,"326":2,"328":7}}],["answer",{"2":{"242":1}}],["answers",{"2":{"242":1}}],["analogy",{"2":{"39":1}}],["anatomy",{"0":{"23":1},"2":{"25":1}}],["another",{"2":{"36":1,"142":1,"154":1,"170":1,"244":1,"252":1}}],["annotated",{"2":{"33":1}}],["anyways",{"2":{"160":1}}],["anything",{"2":{"142":1,"160":1}}],["anyone",{"2":{"5":1,"110":2}}],["any",{"2":{"5":1,"10":1,"27":1,"30":1,"31":1,"33":1,"43":1,"58":1,"64":1,"96":1,"114":1,"118":1,"165":1,"199":2,"204":1,"253":1,"256":1}}],["and",{"0":{"40":1,"96":1,"122":1,"157":1,"158":1,"160":1,"161":1,"163":1,"197":1,"216":1,"218":1,"251":1,"256":1,"259":1,"267":1,"284":1},"1":{"159":1,"160":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"268":1,"269":1,"270":1,"271":1},"2":{"1":1,"2":2,"3":2,"4":1,"7":1,"8":2,"10":2,"11":1,"14":1,"15":1,"17":1,"18":1,"19":3,"20":2,"21":1,"22":3,"23":5,"25":9,"26":2,"27":11,"28":1,"29":4,"30":3,"31":1,"32":1,"33":1,"34":1,"35":1,"39":7,"41":4,"42":2,"43":1,"45":1,"46":1,"49":1,"50":2,"53":1,"55":1,"57":2,"58":1,"59":1,"61":3,"62":3,"68":1,"74":1,"75":1,"77":2,"79":1,"81":1,"84":1,"86":1,"87":1,"88":1,"89":1,"96":1,"101":5,"102":4,"103":9,"105":5,"107":4,"108":1,"110":2,"111":1,"112":1,"113":2,"116":3,"117":2,"123":1,"124":1,"125":1,"127":3,"128":1,"131":1,"134":2,"135":1,"139":1,"142":2,"148":1,"149":2,"150":3,"151":1,"154":9,"159":1,"160":1,"163":2,"167":2,"170":1,"172":5,"175":1,"176":1,"177":1,"180":1,"184":2,"187":1,"193":5,"194":1,"196":1,"197":4,"199":2,"200":1,"201":3,"202":1,"204":3,"205":1,"207":1,"209":4,"210":2,"213":6,"214":1,"215":1,"217":4,"220":3,"221":1,"222":1,"224":1,"226":1,"231":1,"232":2,"233":1,"235":2,"236":2,"237":1,"239":2,"240":2,"242":1,"243":2,"246":1,"248":1,"251":1,"252":1,"255":2,"256":5,"257":1,"260":1,"262":1,"265":1,"270":3,"272":1,"274":1,"277":1,"279":1,"280":1,"283":2,"284":3,"285":1,"287":2,"288":1,"289":3,"290":3,"291":3,"292":1,"295":2,"296":1,"298":3,"307":1,"309":1}}],["an",{"0":{"22":1,"107":1,"108":1,"113":1,"114":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"2":{"0":1,"1":1,"3":1,"14":1,"16":2,"17":1,"18":2,"20":1,"22":2,"23":2,"26":1,"27":1,"36":1,"39":1,"42":3,"43":1,"45":1,"62":1,"64":1,"74":1,"75":6,"76":1,"89":2,"102":4,"103":2,"104":1,"105":1,"107":1,"108":1,"112":1,"114":1,"115":1,"116":1,"129":1,"132":1,"142":1,"150":1,"165":1,"166":1,"167":1,"172":1,"173":1,"185":1,"193":1,"198":2,"199":3,"203":4,"204":1,"205":1,"207":1,"217":3,"220":1,"221":1,"222":2,"226":1,"230":1,"243":1,"251":2,"255":1,"256":1,"257":1,"264":1,"266":2,"271":2,"281":1,"284":1,"291":1,"298":1,"309":1}}],["f",{"2":{"213":1,"214":1}}],["fetch",{"2":{"198":1,"199":1,"205":1,"253":2,"317":1}}],["fetched",{"2":{"198":1}}],["fetching",{"2":{"154":1,"200":1}}],["few",{"2":{"78":1,"246":1,"296":1}}],["featuring",{"2":{"76":1}}],["feature",{"2":{"39":1,"105":1,"150":1,"154":7,"203":1,"241":1,"292":1}}],["features",{"0":{"185":1},"2":{"32":1,"101":1,"103":2,"150":2,"175":1,"290":1}}],["feel",{"2":{"199":1,"276":1}}],["fee",{"2":{"26":1,"77":1,"144":2,"159":1,"164":1,"219":1}}],["felt252",{"2":{"16":2,"18":5,"19":2,"20":2,"64":29,"284":1}}],["flag",{"2":{"154":2,"164":1,"169":1,"170":1,"173":2,"299":1}}],["flags",{"0":{"122":1},"2":{"85":1,"122":1}}],["flexibility",{"2":{"22":1,"36":1,"193":1,"289":1,"291":1}}],["flow",{"0":{"232":1},"2":{"1":1}}],["fn",{"2":{"16":4,"20":1,"23":5,"35":4,"38":3,"39":1,"46":2,"53":1,"57":2,"59":2,"60":2,"64":22,"65":1,"127":3,"129":1,"130":1,"162":4,"217":13,"230":12,"231":2,"233":3,"240":1,"284":1}}],["fix",{"2":{"228":1}}],["fixed",{"2":{"169":1}}],["fill",{"2":{"242":1}}],["filter",{"2":{"251":3}}],["filteredplayers",{"2":{"251":1}}],["filtered",{"2":{"204":1}}],["filtering",{"2":{"197":1,"199":1}}],["filepath",{"2":{"212":1}}],["file",{"2":{"14":2,"23":3,"26":4,"30":3,"59":1,"60":1,"145":1,"148":1,"163":1,"210":1,"213":2,"218":1,"226":3,"227":1,"230":3,"233":1,"239":1,"256":1,"257":1,"286":1,"287":1,"298":2,"328":1}}],["filesystem",{"2":{"210":2}}],["files",{"2":{"14":1,"23":1,"125":1,"173":1,"277":1,"279":1,"292":1}}],["fish",{"2":{"147":1}}],["firt",{"2":{"230":1}}],["firm",{"2":{"103":1}}],["first",{"2":{"22":1,"26":1,"50":1,"62":1,"89":1,"90":1,"103":1,"166":1,"167":1,"201":7,"213":2,"220":2,"221":1,"222":1,"226":1,"236":1,"253":1,"255":1,"284":1}}],["finally",{"2":{"298":1}}],["final",{"2":{"285":1}}],["finance",{"2":{"105":1}}],["finish",{"2":{"244":1}}],["finished",{"2":{"16":2,"177":1,"213":1,"242":1}}],["finer",{"2":{"197":1}}],["finding",{"2":{"107":1}}],["find",{"2":{"44":1,"112":1,"198":1}}],["fieldelement",{"2":{"282":1,"283":1,"284":7,"293":1}}],["field",{"2":{"23":4,"34":2,"41":2,"42":5,"43":1,"48":1,"278":1}}],["fields",{"2":{"10":1,"23":1,"33":1,"34":2,"41":4,"42":1,"198":2,"199":1,"251":1,"260":3}}],["fit",{"2":{"17":1,"42":1}}],["familar",{"2":{"226":1}}],["familiarize",{"2":{"86":1}}],["familiarizing",{"2":{"2":1}}],["familiar",{"2":{"21":1}}],["failing",{"2":{"260":1}}],["failure",{"2":{"222":2,"266":2}}],["failed",{"2":{"222":2,"266":2}}],["fairness",{"2":{"116":1}}],["fair",{"2":{"116":1}}],["falling",{"2":{"164":1}}],["false",{"2":{"35":1,"217":2}}],["faced",{"2":{"111":1}}],["facilitates",{"2":{"49":1}}],["facilitate",{"2":{"8":1}}],["fastest",{"2":{"172":1}}],["fast",{"2":{"76":1,"82":1,"210":1}}],["faqs",{"0":{"109":1},"1":{"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1}}],["faq",{"2":{"15":1}}],["four",{"2":{"244":1}}],["founders",{"2":{"111":1}}],["foundational",{"2":{"46":1}}],["found",{"2":{"26":2,"39":1,"263":1,"310":1,"325":1}}],["folder",{"2":{"213":1,"262":3,"274":2,"279":2,"292":1}}],["followed",{"2":{"242":1}}],["follow",{"2":{"34":1,"36":1,"88":1,"89":1,"91":1,"175":1,"177":1,"226":1,"246":1,"269":1,"277":1,"282":1,"296":1,"298":1}}],["follows",{"2":{"16":1,"213":2,"243":1,"284":1}}],["following",{"2":{"6":1,"9":1,"18":2,"19":1,"20":1,"23":1,"27":3,"30":1,"83":1,"89":5,"91":1,"103":1,"121":1,"150":1,"155":1,"156":1,"163":1,"169":1,"175":1,"177":1,"213":4,"214":2,"215":1,"218":1,"223":1,"230":1,"261":1,"262":1,"264":2,"265":1,"266":1,"283":1,"291":1,"292":1,"309":1}}],["fomoslg",{"2":{"75":1}}],["focus",{"2":{"46":1,"184":1}}],["fosters",{"2":{"33":1}}],["forward",{"2":{"201":2,"271":1}}],["forks",{"2":{"155":2}}],["forked",{"2":{"154":3,"173":2}}],["forking",{"0":{"153":1,"154":1},"1":{"154":1,"155":2},"2":{"154":7}}],["fork",{"2":{"121":2,"142":3,"154":3,"155":1}}],["forms",{"2":{"103":2}}],["format",{"2":{"42":1,"132":2,"142":1,"193":2}}],["force",{"2":{"85":4,"108":1,"150":1,"187":1}}],["fortunately",{"2":{"20":1}}],["for",{"0":{"229":1,"286":1,"287":1},"1":{"230":1},"2":{"1":4,"7":1,"8":1,"10":2,"14":1,"15":1,"18":2,"19":1,"22":1,"23":2,"25":2,"26":3,"27":2,"28":1,"30":3,"31":2,"34":2,"35":2,"36":4,"38":3,"39":2,"41":3,"43":1,"46":2,"48":2,"56":1,"58":2,"60":3,"62":1,"65":1,"66":1,"74":1,"77":1,"78":1,"81":1,"89":1,"91":1,"98":1,"101":2,"102":4,"103":6,"104":1,"105":2,"108":1,"110":1,"112":1,"115":1,"116":1,"126":1,"127":4,"128":1,"129":1,"131":1,"139":1,"142":1,"144":2,"145":2,"147":1,"148":1,"149":2,"150":2,"152":1,"154":3,"160":5,"163":1,"164":1,"165":1,"169":1,"170":1,"172":2,"173":1,"176":1,"178":1,"180":1,"182":1,"184":1,"187":1,"193":2,"194":1,"197":1,"198":1,"199":2,"201":1,"202":1,"203":2,"204":2,"207":1,"209":3,"210":2,"212":3,"213":2,"214":1,"217":5,"219":2,"225":1,"226":1,"227":1,"229":1,"230":5,"231":2,"239":1,"241":1,"242":3,"243":1,"251":2,"255":1,"260":1,"261":1,"262":1,"264":1,"267":1,"271":1,"272":4,"274":1,"277":1,"279":2,"281":1,"283":1,"284":3,"285":2,"287":2,"289":1,"291":1,"292":1,"295":1,"298":2,"301":1,"302":1,"305":1,"309":1,"310":1,"317":1,"320":1,"323":1,"326":1}}],["funding",{"2":{"154":1}}],["funded",{"2":{"144":1,"163":1,"218":1}}],["fundamentals",{"2":{"291":1}}],["fundamental",{"2":{"103":1}}],["fun",{"2":{"103":1}}],["functioning",{"2":{"48":1,"89":1,"263":1}}],["functionality",{"2":{"35":1,"193":1,"194":2,"261":1,"291":1}}],["functions",{"0":{"61":1},"2":{"8":1,"23":1,"25":3,"35":1,"39":1,"51":1,"53":1,"57":1,"59":2,"62":1,"105":1,"129":1,"135":1,"217":2,"231":1,"243":1,"256":2}}],["function",{"0":{"25":1,"49":1,"55":1,"56":1,"135":1,"231":1},"1":{"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1},"2":{"5":1,"8":1,"23":2,"25":1,"49":1,"50":1,"53":1,"55":1,"56":1,"60":2,"61":1,"130":1,"165":1,"166":1,"167":2,"217":8,"221":2,"222":2,"227":1,"231":2,"232":1,"233":1,"236":2,"237":1,"239":1,"253":1,"255":2,"256":1,"257":2}}],["further",{"2":{"49":1}}],["furthermore",{"2":{"39":1}}],["future",{"2":{"36":1,"154":1,"184":1,"199":1}}],["full",{"0":{"64":1,"240":1},"2":{"14":1,"20":1,"75":1,"88":1,"160":1,"230":1,"239":1,"243":2,"256":1,"310":1}}],["fully",{"2":{"1":1,"103":1}}],["frame",{"2":{"261":1}}],["framework",{"2":{"1":1,"22":3,"58":1,"105":2,"272":1}}],["frequent",{"2":{"168":1}}],["freely",{"2":{"103":1,"105":1}}],["freedom",{"2":{"102":1}}],["free",{"0":{"41":1},"2":{"41":1,"110":1,"199":1,"276":1}}],["frontend",{"2":{"244":2}}],["frontier",{"2":{"68":1}}],["from",{"0":{"83":1,"187":1},"1":{"84":1,"85":1},"2":{"1":1,"5":1,"10":2,"13":1,"20":1,"22":2,"23":3,"25":1,"26":1,"27":3,"41":1,"42":1,"51":1,"58":1,"59":1,"60":1,"77":1,"85":1,"102":1,"103":1,"107":1,"121":2,"123":1,"127":1,"142":2,"149":1,"150":1,"154":1,"155":1,"157":1,"169":1,"173":1,"174":1,"184":1,"198":3,"199":2,"201":1,"212":1,"213":1,"227":1,"230":1,"231":1,"253":4,"255":2,"256":1,"257":1,"262":1,"266":1,"267":1,"272":1,"274":1,"279":1,"280":1,"284":1,"286":2,"287":1,"290":3,"298":1}}],["guaranteed",{"2":{"107":1}}],["guarantees",{"2":{"103":1}}],["gui",{"2":{"184":1}}],["guiltygyoza",{"2":{"104":2}}],["guides",{"2":{"272":1}}],["guide",{"0":{"78":1,"93":1,"124":1,"136":1,"244":1},"1":{"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1},"2":{"4":1,"77":1,"83":1,"91":3,"156":1,"213":1,"242":1,"243":2,"244":2,"269":1}}],["gubsheep",{"2":{"104":1}}],["gg",{"2":{"79":2,"176":1,"322":1}}],["grpc",{"0":{"205":1},"2":{"205":4,"209":2,"214":1}}],["grows",{"2":{"200":1}}],["groups",{"2":{"197":1}}],["great",{"2":{"198":1,"205":1,"228":1,"231":1,"242":1}}],["grid",{"2":{"75":1}}],["grasp",{"2":{"291":1}}],["graphiql",{"2":{"27":4}}],["graphql",{"0":{"192":1,"194":1},"1":{"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1},"2":{"27":7,"193":2,"194":3,"196":2,"198":1,"199":1,"200":1,"203":2,"204":1,"209":2,"212":1,"214":1}}],["grant",{"2":{"7":2,"64":2}}],["given",{"2":{"52":1,"116":1,"147":1,"182":1,"302":1,"317":1,"326":3,"328":2}}],["git",{"2":{"14":1,"26":1,"79":1,"85":3,"94":2,"121":1,"122":1,"123":1,"150":1,"187":1,"225":1,"298":3}}],["github",{"2":{"4":1,"14":1,"26":1,"30":1,"79":1,"85":2,"94":1,"112":1,"123":1,"150":1,"187":1,"225":1,"298":1}}],["gap",{"2":{"242":1}}],["garbage",{"2":{"210":1}}],["gaming",{"2":{"74":1,"102":1,"104":1,"108":1,"118":1}}],["gameobject",{"2":{"289":1}}],["gameturnimpl",{"2":{"230":1}}],["gameturntrait",{"2":{"230":3}}],["gameturn",{"2":{"226":1,"230":3,"231":1,"233":4}}],["gametrait",{"2":{"16":1}}],["gameplay",{"2":{"102":2}}],["gameimpl",{"2":{"16":1}}],["gamers",{"2":{"1":1}}],["gamesettings",{"2":{"36":1}}],["gamestatusfelt252",{"2":{"16":1}}],["gamestatus",{"2":{"16":11}}],["games",{"0":{"102":2},"2":{"1":3,"2":2,"75":1,"102":3,"103":1,"104":1,"111":2,"113":2,"118":1,"288":1,"295":1}}],["game",{"0":{"45":1,"113":1,"116":1,"213":1,"242":1,"285":1},"1":{"46":1,"47":1,"48":1,"49":1,"214":1,"243":1,"244":1,"286":1,"287":1},"2":{"1":2,"15":1,"16":10,"20":1,"36":3,"44":1,"45":1,"46":1,"65":1,"75":6,"102":6,"103":1,"104":1,"116":4,"172":1,"176":1,"204":1,"223":1,"225":2,"226":8,"227":2,"230":3,"231":10,"232":2,"233":27,"235":2,"236":3,"237":3,"239":1,"240":9,"241":5,"243":4,"244":1,"261":1,"272":1,"278":1,"285":1,"287":1,"291":1}}],["gas",{"2":{"59":2,"60":1,"107":1,"145":3,"233":2,"240":1}}],["gained",{"2":{"150":1}}],["gain",{"2":{"50":1,"215":1,"223":1,"291":1}}],["gateway",{"2":{"49":1}}],["global",{"2":{"36":2,"89":2}}],["glimpse",{"2":{"28":1}}],["g",{"2":{"23":1,"25":1,"42":2,"43":2,"79":1,"121":1,"226":1}}],["gt",{"2":{"16":6,"18":3,"23":7,"26":11,"27":1,"35":4,"38":4,"39":1,"46":2,"53":1,"57":1,"60":2,"64":32,"79":1,"127":4,"129":1,"130":1,"132":2,"142":5,"143":3,"144":2,"145":5,"148":2,"154":2,"155":1,"162":4,"165":1,"169":1,"173":1,"196":1,"204":1,"212":4,"217":12,"220":4,"222":1,"230":31,"231":2,"233":5,"236":2,"240":2,"252":4,"255":1,"257":1,"262":2,"265":3,"277":2,"283":1,"284":3,"292":1,"297":2,"326":4,"328":2}}],["gender",{"2":{"284":3}}],["generic",{"2":{"197":1}}],["general",{"0":{"142":1,"212":1},"2":{"107":1,"108":1,"115":1}}],["generally",{"2":{"41":1}}],["generalized",{"2":{"8":1}}],["generative",{"2":{"75":1}}],["generating",{"2":{"8":1,"323":1}}],["generateblock",{"0":{"300":1},"2":{"170":2,"300":1}}],["generates",{"2":{"46":1,"147":1,"197":1,"284":1}}],["generated",{"2":{"27":1,"159":1,"197":1,"256":1,"257":1,"260":1,"284":1,"292":1}}],["generate",{"2":{"7":1,"16":1,"65":2,"108":1,"144":1,"148":1,"217":3,"264":1,"279":1}}],["genesis",{"2":{"145":3}}],["getclassat",{"2":{"311":1}}],["getclass",{"2":{"311":1}}],["getclasshashat",{"2":{"311":1}}],["getcomponentvalue",{"2":{"256":1}}],["getevents",{"2":{"311":1}}],["getnonce",{"2":{"311":1}}],["getblocktransactioncount",{"2":{"311":1}}],["getblockwithtxhashes",{"2":{"311":1}}],["getblockwithtxs",{"2":{"311":1}}],["gettransactionbyblockidandindex",{"2":{"311":1}}],["gettransactionbyhash",{"2":{"311":1}}],["gettransactionreceipt",{"2":{"311":1}}],["gettransactionstatus",{"2":{"311":1}}],["gettransactions",{"0":{"315":1},"2":{"309":2,"315":1}}],["getting",{"0":{"272":1},"1":{"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1},"2":{"21":1,"246":1,"296":1}}],["getstorageat",{"2":{"311":1}}],["getstateupdate",{"2":{"311":1}}],["getsyncentities",{"2":{"253":3}}],["gets",{"2":{"217":1}}],["get",{"0":{"4":1,"10":1,"68":1},"2":{"10":5,"13":2,"20":2,"23":8,"25":4,"26":1,"27":1,"34":3,"39":1,"46":5,"49":1,"53":3,"57":8,"60":3,"90":1,"112":1,"121":1,"157":4,"162":3,"166":1,"167":1,"193":1,"199":1,"203":1,"204":1,"217":9,"231":5,"233":9,"236":3,"237":1,"239":1,"240":5,"242":2,"246":1,"296":1,"298":1,"301":1,"305":1,"315":1}}],["goal",{"2":{"242":2}}],["goalkeeper",{"2":{"38":1,"127":1}}],["governed",{"2":{"114":1}}],["governance",{"2":{"36":1}}],["goerli",{"2":{"79":2}}],["good",{"2":{"59":1,"243":1}}],["goblinactionsimpl",{"2":{"39":1}}],["goblin",{"2":{"39":10}}],["goblins",{"2":{"39":2,"104":1}}],["got",{"2":{"26":1,"222":1,"236":1,"264":1,"266":2}}],["go",{"2":{"1":1,"15":1,"27":2,"198":1,"213":1,"226":1,"287":2}}],["cs",{"2":{"261":2,"265":5}}],["ctor",{"2":{"261":1,"265":1}}],["ctx",{"2":{"20":1}}],["c3",{"2":{"233":4,"237":4}}],["cycle",{"2":{"203":1}}],["cmd",{"2":{"123":1}}],["cd",{"2":{"85":1,"187":1,"213":1,"248":1}}],["c++",{"2":{"84":1}}],["c",{"0":{"137":1},"2":{"74":2,"121":1,"137":1,"265":1,"292":1}}],["ceases",{"2":{"103":1}}],["certified",{"2":{"102":1}}],["certhash",{"2":{"27":3}}],["centralized",{"2":{"103":1}}],["central",{"2":{"62":1,"274":1,"289":1}}],["cfg",{"2":{"59":1,"60":1,"233":1}}],["clear",{"2":{"225":1}}],["cleaning",{"0":{"225":1}}],["cleaner",{"2":{"105":1}}],["clean",{"2":{"16":1,"27":1,"163":1}}],["cloning",{"2":{"324":1}}],["clone",{"0":{"94":1},"2":{"85":2,"94":1,"150":1,"187":1,"268":2}}],["closely",{"2":{"108":1,"154":1,"175":1}}],["clarify",{"2":{"23":1}}],["classic",{"2":{"75":1}}],["classhash",{"2":{"19":4,"27":2,"64":6,"198":3}}],["class",{"2":{"14":1,"19":4,"26":4,"60":3,"64":3,"134":1,"154":1,"164":7,"165":2,"219":4,"220":3,"225":1,"233":5,"235":6,"260":2,"284":1,"293":1,"328":1}}],["click",{"2":{"230":1,"271":1,"277":1,"286":1,"287":2,"298":1}}],["clicking",{"2":{"27":1}}],["clientcomponents",{"2":{"255":1}}],["clients",{"2":{"66":2,"113":1,"203":2}}],["client",{"0":{"66":1,"117":1,"253":1},"1":{"67":1},"2":{"12":1,"64":1,"66":2,"108":1,"116":1,"193":1,"203":4,"205":2,"209":1,"222":1,"253":1}}],["cli",{"0":{"138":1},"1":{"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1},"2":{"1":1,"26":1,"27":3,"88":1,"89":1,"182":1,"184":1,"185":2}}],["curr",{"2":{"231":2,"233":7,"236":3,"237":3,"240":15}}],["currently",{"2":{"37":1,"56":1,"102":1,"107":1,"123":1,"149":1,"154":1,"173":1,"175":2,"248":1,"257":1,"261":1,"285":1,"300":1}}],["current",{"2":{"10":1,"22":1,"23":4,"25":1,"199":1,"217":1,"231":8,"237":1,"287":1}}],["cursors",{"2":{"201":1}}],["cursor",{"0":{"201":1},"2":{"200":1,"201":4,"202":1,"315":1}}],["curl",{"2":{"87":1,"89":2,"97":1,"120":1,"157":3,"177":1}}],["customize",{"2":{"277":1}}],["customizable",{"2":{"204":1}}],["customtypes",{"2":{"257":1}}],["custom",{"0":{"20":1,"36":1,"38":1,"277":1},"2":{"12":1,"17":1,"20":2,"23":2,"32":1,"37":1,"57":1,"58":1,"127":1,"193":1,"197":3,"209":1,"278":1,"292":1,"298":1}}],["choose",{"2":{"89":1,"164":1,"277":1,"286":1,"287":1,"298":1}}],["cheaper",{"2":{"107":1}}],["cheating",{"2":{"102":1}}],["chess",{"0":{"242":1},"1":{"243":1,"244":1},"2":{"75":2,"116":2,"224":1,"225":1,"226":4,"230":1,"233":4,"239":1,"240":4,"241":3,"243":6,"244":1}}],["che",{"2":{"74":1}}],["checkmate",{"2":{"241":1}}],["checking",{"2":{"240":1}}],["checks",{"2":{"6":1,"217":3,"241":1}}],["check",{"2":{"4":1,"27":1,"60":3,"89":2,"102":1,"157":3,"160":1,"178":1,"217":2,"220":1,"231":3,"236":2,"237":1,"239":1,"243":1,"256":1,"258":1,"265":1,"298":1}}],["children",{"2":{"38":1,"127":1}}],["challenges",{"2":{"241":1}}],["charging",{"2":{"144":1}}],["character",{"2":{"15":1,"122":1}}],["channel",{"2":{"116":1}}],["change",{"2":{"42":1,"43":1,"134":1,"231":1}}],["changes",{"0":{"126":1,"133":1},"1":{"134":1,"135":1},"2":{"27":1,"41":1,"124":1,"128":1,"134":1,"222":1,"290":1,"291":1}}],["chainid",{"2":{"311":1}}],["chain",{"2":{"26":1,"75":2,"103":2,"107":1,"113":1,"116":2,"142":1,"145":3,"172":2,"230":1,"243":1}}],["chains",{"2":{"5":1}}],["chapters",{"2":{"244":1}}],["chapter",{"2":{"5":1,"23":1,"215":1,"223":1,"226":1,"227":1,"229":1,"239":1}}],["cryptographic",{"2":{"107":1}}],["crypto",{"2":{"104":1}}],["crypts",{"2":{"74":1}}],["crystallized",{"2":{"103":1}}],["credentials",{"2":{"80":1,"182":1,"213":2}}],["createburneraccount",{"2":{"283":2}}],["createclientcomponents",{"2":{"255":3}}],["createclient",{"2":{"253":1}}],["createcardimpl",{"2":{"130":1}}],["created",{"2":{"27":1,"111":1,"116":1,"130":1,"168":1,"169":1,"170":2,"232":2,"279":1}}],["createdat",{"2":{"27":5,"203":2}}],["createsystemcalls",{"2":{"256":2}}],["creates",{"2":{"22":1,"284":1}}],["create",{"0":{"162":1,"217":1},"2":{"16":1,"27":2,"30":1,"34":1,"39":1,"60":1,"61":1,"90":1,"105":1,"129":1,"130":2,"134":4,"135":2,"139":1,"154":1,"170":2,"173":1,"199":1,"213":3,"214":1,"224":1,"226":1,"241":1,"248":1,"253":1,"271":1,"277":2,"282":1,"284":3,"298":2,"317":2}}],["creative",{"2":{"184":1}}],["creativity",{"2":{"28":1}}],["creation",{"0":{"129":1,"281":1,"282":1,"283":1},"1":{"282":1,"283":1},"2":{"16":1,"27":1,"36":1,"280":1,"292":1}}],["creating",{"0":{"277":1},"2":{"1":1,"60":1,"229":1,"281":1,"289":1}}],["crates",{"2":{"89":2,"264":1}}],["crawler",{"2":{"75":1}}],["crafting",{"2":{"23":1}}],["craft",{"2":{"17":1,"28":1,"36":1}}],["crucial",{"2":{"5":2,"38":1,"58":1,"103":1,"127":1,"172":1,"284":1}}],["causing",{"2":{"210":1}}],["categorized",{"2":{"309":1}}],["cater",{"2":{"172":1}}],["catalyze",{"2":{"103":1}}],["catalyst",{"2":{"103":1}}],["castling",{"2":{"241":1}}],["cast",{"2":{"217":2}}],["casm",{"2":{"164":2}}],["cases",{"2":{"172":1,"241":1}}],["case",{"2":{"10":1,"26":1,"34":1,"121":4,"129":1}}],["capture",{"2":{"239":1,"240":1,"241":1}}],["captured",{"2":{"12":1,"18":1,"19":1,"239":1}}],["captain",{"2":{"129":1,"130":1}}],["capable",{"2":{"103":1}}],["capabilities",{"2":{"101":1,"102":1,"105":1}}],["capacity",{"2":{"103":1}}],["caverns",{"2":{"74":1}}],["cartrige",{"2":{"176":1}}],["cartridge",{"0":{"72":1},"2":{"3":1,"75":2,"79":2,"177":1,"213":1,"322":1}}],["care",{"2":{"105":1}}],["careful",{"2":{"52":1}}],["carefully",{"2":{"50":1}}],["cargo",{"2":{"84":1,"85":5,"96":1,"150":2,"187":1}}],["card",{"2":{"38":2,"127":2,"129":1,"130":2,"134":4,"135":2}}],["calculations",{"2":{"43":1}}],["calculate",{"2":{"23":1,"217":1}}],["calldata",{"2":{"199":4,"284":3,"326":2}}],["call",{"0":{"166":1,"221":1},"2":{"49":1,"166":1,"167":1,"221":1,"222":1,"239":1,"263":2,"266":2,"284":9,"311":1}}],["caller",{"2":{"10":4,"11":3,"12":1,"13":1,"19":1,"20":2,"23":5,"25":1,"34":2,"46":2,"53":2,"57":3,"60":4,"162":1,"193":1,"217":6,"231":3}}],["called",{"2":{"6":1,"9":1,"10":1,"25":1,"41":2,"56":1,"130":1,"154":1,"166":1,"170":1,"217":1,"221":1,"222":2,"256":2,"264":1,"266":3,"276":1}}],["calling",{"0":{"280":1},"1":{"281":1,"282":1,"283":1,"284":1},"2":{"10":1,"170":2,"217":1,"272":1}}],["calls",{"0":{"263":1},"2":{"8":1,"60":1,"209":1,"233":1,"240":1,"263":1,"284":4}}],["cannot",{"2":{"222":1,"230":1,"265":1}}],["can",{"0":{"117":1,"118":1,"167":1,"222":1},"2":{"7":1,"8":1,"10":1,"11":1,"15":2,"16":2,"17":1,"20":1,"23":1,"25":1,"26":1,"27":5,"29":1,"30":2,"32":1,"33":1,"34":1,"35":1,"36":1,"39":2,"44":1,"45":1,"55":3,"60":1,"62":1,"64":1,"65":1,"66":2,"85":1,"89":4,"102":1,"103":4,"105":1,"108":1,"110":2,"112":1,"116":3,"118":1,"121":1,"122":1,"128":2,"142":1,"150":1,"154":7,"157":3,"160":1,"167":1,"169":1,"170":1,"173":1,"175":1,"186":1,"198":1,"199":1,"200":2,"202":2,"203":3,"204":1,"205":3,"209":1,"210":1,"213":4,"214":1,"217":14,"220":1,"221":2,"222":1,"224":1,"228":1,"229":1,"231":1,"239":1,"244":1,"255":1,"256":2,"260":1,"263":1,"264":2,"271":1,"284":1,"292":1,"309":2,"310":1,"321":1,"322":1}}],["cairo",{"0":{"98":1,"105":1,"115":1,"151":1,"156":1,"215":1},"1":{"106":1,"107":1,"108":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"1":2,"10":1,"14":3,"16":1,"21":1,"23":10,"32":1,"45":1,"46":4,"47":1,"59":1,"60":1,"74":1,"79":2,"86":1,"89":7,"92":1,"98":1,"102":4,"105":4,"106":2,"108":1,"115":3,"125":1,"128":1,"150":2,"151":1,"156":1,"162":1,"164":1,"167":1,"217":1,"222":1,"225":14,"226":3,"227":2,"230":4,"233":1,"236":1,"239":1,"243":1,"266":2,"292":1,"323":1,"325":1}}],["colors",{"2":{"236":1}}],["color",{"2":{"226":10,"230":21,"231":7,"233":16,"236":3,"237":3,"240":16}}],["collected",{"2":{"210":1}}],["collection",{"2":{"44":1,"104":1}}],["cost",{"2":{"129":1,"130":1}}],["costly",{"2":{"107":1,"116":1}}],["costs",{"2":{"107":1}}],["coordination",{"2":{"103":1}}],["cool",{"2":{"36":2,"242":1}}],["coexisting",{"2":{"75":1}}],["counts",{"2":{"217":2}}],["count",{"2":{"39":15,"217":2}}],["counter",{"2":{"39":16}}],["could",{"2":{"12":2,"30":1,"35":2,"102":2,"241":1}}],["corresponds",{"2":{"220":1}}],["corresponding",{"2":{"30":1}}],["correpsonding",{"2":{"197":1}}],["correctly",{"2":{"232":1}}],["correct",{"2":{"80":1,"232":1}}],["corruption",{"0":{"42":1},"2":{"42":1,"43":1}}],["corebasic",{"2":{"264":2}}],["core",{"0":{"249":1},"2":{"27":16,"62":1,"102":1,"217":1,"264":1}}],["cover",{"2":{"30":3,"243":1}}],["covered",{"2":{"25":1,"26":1,"27":1}}],["copy",{"2":{"16":2,"23":3,"27":1,"33":1,"34":1,"36":1,"39":4,"46":2,"85":1,"132":1,"162":1,"213":1,"217":1,"226":3,"233":1,"239":1,"293":1}}],["codegen",{"2":{"292":1}}],["codes",{"2":{"225":1}}],["code",{"0":{"234":1,"240":1},"1":{"235":1,"236":1,"237":1},"2":{"8":1,"23":2,"59":1,"86":1,"98":1,"105":1,"117":1,"125":1,"131":1,"135":1,"230":8,"231":2,"239":1,"242":1,"243":1,"252":1,"282":1,"283":1}}],["comes",{"2":{"225":1}}],["combination",{"2":{"201":1}}],["combat",{"2":{"36":2}}],["comfort",{"2":{"102":1}}],["coming",{"2":{"99":1,"100":1,"171":1}}],["com",{"2":{"14":1,"26":1,"30":1,"79":2,"85":2,"89":2,"94":1,"97":1,"150":1,"157":1,"187":1,"225":1,"298":1}}],["complied",{"2":{"228":1}}],["completions",{"0":{"147":1},"1":{"148":1},"2":{"147":1,"148":2}}],["completed",{"2":{"77":1,"230":1}}],["complete",{"2":{"39":1,"105":1,"115":1,"178":1,"187":1,"244":1}}],["complex",{"2":{"8":1,"16":1,"38":2,"127":2,"167":1}}],["comparable",{"2":{"194":1}}],["comparisons",{"2":{"43":1}}],["compatibility",{"2":{"154":1}}],["computed",{"2":{"107":1}}],["computation",{"2":{"105":1,"107":2,"115":1}}],["computations",{"2":{"102":1}}],["compete",{"2":{"102":1}}],["compiling",{"2":{"78":1,"164":1}}],["compilation",{"2":{"57":1}}],["compiled",{"2":{"26":1,"66":1,"78":1,"163":1}}],["compilerservices",{"2":{"265":1}}],["compiler",{"2":{"23":1,"46":2,"58":1,"84":1,"89":1,"105":1,"131":1,"164":4}}],["compile",{"0":{"163":1,"218":1,"228":1},"2":{"8":1,"14":1,"45":1,"78":1,"115":1,"163":1,"218":1,"225":1,"231":1,"323":1}}],["comprehensive",{"2":{"45":1}}],["composable",{"2":{"104":1}}],["composability",{"2":{"33":1}}],["composite",{"2":{"34":2,"264":1}}],["components",{"0":{"125":1},"2":{"22":1,"23":1,"28":1,"53":1,"60":1,"103":1,"124":1,"125":2,"203":1,"253":1,"255":2,"292":1}}],["component",{"2":{"22":1,"23":1,"33":1,"51":1,"53":1,"103":1,"125":2,"149":1,"209":1,"252":5,"261":1,"278":1,"291":1,"326":1}}],["comma",{"2":{"212":1}}],["commands",{"0":{"8":1,"9":1,"182":1,"190":1,"191":1,"317":1},"1":{"9":1,"10":1,"11":1,"12":1,"13":1},"2":{"8":6,"9":1,"20":1,"25":1,"26":1,"45":1,"49":2,"105":3,"121":1,"181":1,"322":1,"326":1,"328":1}}],["command",{"0":{"10":1,"11":1,"12":1,"13":1},"2":{"7":1,"10":2,"11":1,"12":1,"13":1,"20":1,"22":1,"25":2,"26":1,"27":5,"34":1,"46":2,"77":1,"85":1,"88":1,"89":4,"140":1,"150":1,"155":1,"157":1,"163":1,"164":1,"173":1,"177":1,"184":1,"213":4,"214":2,"219":1,"228":1,"264":2,"270":1,"292":1,"320":1,"326":1,"328":1}}],["commit",{"2":{"121":3}}],["communication",{"0":{"265":1},"2":{"265":1,"290":1}}],["communications",{"2":{"116":1}}],["community",{"2":{"1":1,"68":2,"238":1,"241":1}}],["common",{"0":{"189":1,"259":1},"1":{"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1},"2":{"8":1,"35":1,"39":1}}],["connection",{"2":{"200":1,"203":3,"261":1}}],["connections",{"2":{"143":3}}],["conditions",{"2":{"135":1}}],["confidence",{"2":{"154":1}}],["confirmed",{"2":{"284":1}}],["confirm",{"2":{"96":1,"116":1,"265":1}}],["configuring",{"0":{"275":1},"1":{"276":1,"277":1,"278":1},"2":{"212":1}}],["configurations",{"0":{"277":1},"2":{"213":1}}],["configuration",{"0":{"160":1,"276":1,"278":1},"2":{"145":1,"213":1,"276":2,"277":2,"278":2,"317":1}}],["configured",{"2":{"265":1}}],["configure",{"2":{"142":1,"154":1,"287":1}}],["config",{"0":{"14":1},"2":{"253":3,"270":1,"276":1}}],["concurrent",{"2":{"143":1}}],["concise",{"2":{"50":1}}],["concentrate",{"2":{"46":1}}],["concepts",{"0":{"288":1},"1":{"289":1,"290":1,"291":1,"292":1,"293":1},"2":{"284":1,"288":1}}],["concept",{"2":{"1":1,"2":1,"3":1,"15":1,"86":1,"103":1,"125":1}}],["conversionfailed",{"2":{"264":1}}],["conversion",{"0":{"43":1},"2":{"43":1}}],["converted",{"2":{"284":1}}],["converting",{"2":{"43":1}}],["convert",{"2":{"42":1,"43":1,"264":1}}],["convenient",{"2":{"7":1,"8":1,"154":1,"321":1}}],["consensus",{"2":{"102":2}}],["consistent",{"2":{"43":1,"200":1}}],["considering",{"2":{"241":1}}],["considered",{"2":{"103":1,"107":1}}],["consider",{"2":{"15":1,"18":1,"33":1,"38":1,"39":1,"40":1,"46":1,"116":1,"127":1,"284":1}}],["considerations",{"2":{"5":1}}],["constructor",{"2":{"165":2,"217":3}}],["constitutes",{"2":{"116":1}}],["const",{"2":{"36":1,"39":2,"60":1,"217":2,"233":4,"236":2,"240":2,"251":2,"252":4,"253":2,"256":1}}],["constant",{"2":{"36":1}}],["congratulations",{"0":{"241":1},"2":{"22":1,"213":1,"230":1}}],["continues",{"2":{"41":1}}],["continue",{"2":{"23":2}}],["continuously",{"2":{"22":1}}],["content",{"2":{"226":1}}],["contents",{"2":{"23":2}}],["context",{"2":{"20":1,"22":1,"23":1,"29":1,"39":1,"48":1,"57":1,"291":1}}],["contained",{"2":{"105":1}}],["container",{"0":{"100":1}}],["containing",{"2":{"38":1,"50":1,"127":1,"251":1,"256":1,"328":1}}],["contains",{"2":{"23":1,"26":1,"34":1,"44":1,"142":1}}],["contain",{"2":{"15":1,"33":1,"128":1}}],["controlling",{"2":{"289":1}}],["controlled",{"2":{"75":1,"76":1,"114":1}}],["control",{"2":{"197":1,"290":1}}],["contractcomponents",{"2":{"253":2,"255":3,"257":2}}],["contractupgraded",{"2":{"19":1}}],["contractdeployed",{"2":{"19":1}}],["contractstate",{"2":{"23":2,"39":2,"46":2,"53":2,"57":4,"130":2,"162":3,"217":11,"231":1}}],["contracts",{"2":{"19":1,"26":1,"27":2,"29":1,"46":2,"50":1,"57":1,"58":2,"78":3,"103":1,"128":3,"134":1,"139":1,"149":1,"154":8,"167":1,"235":1,"241":1,"284":1,"292":1,"323":1,"325":1}}],["contractaddress",{"2":{"15":2,"19":4,"23":4,"33":1,"34":2,"37":1,"46":3,"53":1,"57":2,"64":10,"132":2,"162":1,"217":18,"226":6,"231":3,"233":1,"257":1,"264":1,"284":4,"293":1}}],["contract",{"0":{"25":1,"31":1,"55":1,"57":1,"62":1,"131":1,"156":1,"161":1,"163":1,"164":1,"165":1,"166":1,"167":1,"215":1,"216":1,"218":1,"219":1,"220":1,"221":1,"222":1,"239":1,"284":1},"1":{"63":1,"64":1,"65":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"216":1,"217":2,"218":2,"219":2,"220":2,"221":2,"222":2,"240":1,"241":1},"2":{"5":1,"17":1,"18":2,"19":1,"20":1,"23":1,"25":1,"26":3,"27":2,"29":1,"30":1,"31":2,"39":2,"46":3,"47":2,"49":2,"50":4,"51":1,"52":1,"53":2,"55":2,"56":1,"57":6,"60":6,"62":5,"63":2,"64":3,"103":1,"105":1,"128":4,"131":2,"134":6,"135":1,"154":1,"162":4,"163":2,"164":5,"165":5,"166":1,"167":2,"204":1,"207":1,"209":2,"212":1,"217":12,"218":1,"219":4,"220":5,"221":1,"222":3,"227":4,"229":1,"232":3,"233":9,"235":3,"236":2,"237":1,"239":2,"240":2,"243":3,"253":2,"264":1,"266":3,"280":1,"284":3,"326":1}}],["contribute",{"0":{"258":1},"2":{"103":1,"110":1,"258":2}}],["contributing",{"0":{"101":1}}],["contribution",{"2":{"4":1}}],["contributors",{"2":{"3":1}}],["b5",{"2":{"240":8}}],["b7",{"2":{"240":4}}],["bp",{"2":{"240":10}}],["black",{"2":{"226":2,"230":3,"231":1,"232":1,"233":9,"236":2,"239":3,"240":11}}],["blazingly",{"2":{"82":1}}],["blog",{"2":{"68":1}}],["blockhashandnumber",{"2":{"311":1}}],["blocknumber",{"2":{"311":1}}],["blocks",{"2":{"155":1,"168":1,"170":2,"209":1}}],["blockfier",{"2":{"149":1}}],["blockifier",{"2":{"149":2,"150":2}}],["block",{"2":{"26":1,"27":11,"63":1,"142":5,"154":6,"155":5,"168":1,"169":4,"170":3,"212":3,"214":1,"300":1,"301":1,"302":1,"303":1}}],["blockchains",{"2":{"103":1,"118":1}}],["blockchain",{"2":{"5":1,"102":1,"103":2,"113":1,"116":3,"154":1,"299":1}}],["b",{"2":{"35":4,"142":1,"265":1}}],["burnermanager",{"2":{"283":4}}],["burneraccount",{"2":{"283":1}}],["burner",{"0":{"283":1},"2":{"281":1,"283":1,"284":1}}],["bun",{"2":{"248":2}}],["but",{"2":{"103":2,"113":1,"114":1,"116":1,"170":1,"242":1,"303":1}}],["button",{"2":{"27":1,"286":1,"287":1}}],["builds",{"2":{"105":1}}],["builders",{"2":{"68":1}}],["build",{"0":{"262":1,"323":1},"2":{"26":2,"78":1,"149":1,"150":1,"151":1,"163":1,"167":1,"190":1,"213":3,"218":1,"225":1,"228":3,"231":1,"243":1,"261":1,"262":1,"264":1,"265":3,"269":1,"286":3,"287":4,"292":2,"320":1,"323":2}}],["building",{"0":{"83":1,"85":1,"242":1,"243":1,"285":1,"286":1,"287":1},"1":{"84":1,"85":1,"243":1,"244":1,"286":1,"287":1},"2":{"1":1,"26":1,"62":1,"85":1,"105":1,"111":2,"184":1,"230":1,"243":1,"272":2,"285":2}}],["built",{"0":{"160":1},"2":{"1":2,"27":1,"29":1,"75":2,"87":1,"160":4,"197":1,"220":1}}],["baron",{"2":{"75":1}}],["basis",{"2":{"89":1}}],["basics",{"0":{"158":1},"1":{"159":1,"160":1},"2":{"243":1}}],["basic",{"0":{"226":1,"227":1},"2":{"41":1,"46":1,"215":1,"223":1,"226":1,"230":1,"241":1}}],["bashrc",{"2":{"148":2}}],["bash",{"2":{"87":1,"120":1,"123":1,"147":1,"148":2,"157":1,"177":1}}],["base",{"2":{"26":1,"64":1}}],["based",{"2":{"1":2,"23":1,"27":1,"75":1,"102":1,"200":1,"201":1,"202":1,"204":1,"243":1,"248":1,"286":1,"290":1}}],["balance",{"2":{"34":2}}],["backtrace",{"2":{"264":1}}],["backtrace=1",{"2":{"264":1}}],["backward",{"2":{"201":2,"271":1}}],["backend",{"2":{"193":1}}],["back",{"2":{"27":2,"42":1,"43":1,"164":1,"226":1}}],["bridge",{"2":{"290":1,"291":1}}],["briq",{"0":{"71":1},"2":{"3":1}}],["brave",{"2":{"103":1}}],["branch",{"0":{"122":1},"2":{"85":1,"119":1,"121":8}}],["broadening",{"2":{"102":1}}],["broadens",{"2":{"102":1}}],["browsers",{"2":{"113":1}}],["browser",{"2":{"27":1,"102":1,"117":1}}],["brew",{"2":{"121":1}}],["brewing",{"2":{"75":1}}],["break",{"2":{"284":1}}],["breaks",{"2":{"203":1}}],["breakdown",{"0":{"47":1},"1":{"48":1,"49":1}}],["breaking",{"0":{"24":1,"54":1},"1":{"25":1,"55":1,"56":1,"57":1},"2":{"124":1}}],["breeze",{"2":{"26":1}}],["bigint",{"2":{"256":1,"257":1}}],["bishop",{"2":{"226":1,"230":1}}],["binding",{"0":{"279":1}}],["bindings",{"0":{"260":1},"2":{"66":1,"137":1,"260":3,"261":1,"279":2,"284":4,"292":3}}],["bindgen",{"2":{"264":1}}],["bingens",{"2":{"264":1}}],["bingen",{"0":{"264":1,"292":1},"2":{"279":1,"284":1}}],["binaries",{"0":{"123":1},"2":{"123":1}}],["binary",{"2":{"102":1,"149":1,"150":1,"185":2,"186":1}}],["bin",{"2":{"85":3,"187":1}}],["bit",{"2":{"22":1,"27":1}}],["bibliothecadao",{"2":{"3":1}}],["bokken",{"2":{"265":3}}],["board",{"2":{"226":1,"230":3,"231":4,"236":1,"237":1}}],["boilerplate",{"0":{"225":1},"2":{"46":1,"57":1,"105":1,"131":1,"225":1}}],["boxtrait",{"2":{"39":1}}],["box",{"2":{"39":1}}],["bool",{"2":{"35":4,"64":2,"129":1,"130":1,"217":8,"230":9}}],["book",{"0":{"101":1},"2":{"2":1,"101":2,"102":1,"106":2,"160":1,"242":2}}],["both",{"2":{"22":1,"25":1,"34":1,"84":1,"150":1,"197":1,"200":1,"201":1,"272":1,"285":1,"307":1}}],["byte",{"2":{"38":2,"127":4,"293":1}}],["by",{"0":{"69":1,"78":1},"1":{"70":1,"71":1,"72":1,"73":1},"2":{"1":1,"3":1,"5":1,"8":2,"12":2,"18":1,"19":1,"20":1,"22":1,"23":2,"25":1,"27":2,"30":3,"31":1,"34":3,"39":1,"41":1,"45":1,"57":1,"60":1,"63":1,"64":1,"74":1,"75":3,"85":2,"96":1,"97":1,"102":1,"103":3,"105":3,"107":2,"114":2,"115":1,"116":1,"123":1,"129":1,"149":2,"150":3,"154":4,"157":3,"168":1,"169":1,"170":1,"172":1,"176":1,"194":1,"199":2,"203":2,"204":1,"213":1,"217":2,"227":1,"230":1,"232":1,"242":1,"243":1,"260":2,"264":1,"271":1,"279":1,"284":1,"289":4,"292":1,"302":1,"307":1,"309":1,"321":1,"324":1}}],["being",{"2":{"260":1}}],["between",{"2":{"242":1,"290":1,"291":1}}],["better",{"2":{"123":1,"241":1}}],["become",{"2":{"200":1}}],["becomes",{"2":{"197":1}}],["becoming",{"2":{"193":1}}],["because",{"2":{"42":1,"102":1}}],["behaviour",{"2":{"169":1}}],["behind",{"2":{"46":1,"57":1,"108":1}}],["benchmarks",{"0":{"152":1},"2":{"152":1}}],["benefit",{"2":{"22":1,"197":1}}],["beneficial",{"2":{"20":1}}],["believers",{"2":{"103":1}}],["believe",{"2":{"103":1}}],["below",{"2":{"38":1,"127":1,"230":3,"233":1,"239":1}}],["beware",{"2":{"75":1}}],["beer",{"2":{"75":2}}],["been",{"2":{"1":1,"10":1,"15":1,"27":1,"31":1,"103":1,"125":2,"129":1,"213":1,"232":1}}],["best",{"2":{"33":1,"59":1}}],["bear",{"2":{"23":1}}],["beginners",{"2":{"243":1}}],["beginner",{"2":{"242":1}}],["beginning",{"2":{"241":1}}],["begin",{"2":{"22":1}}],["before",{"2":{"10":1,"50":1,"76":1,"86":1,"130":1,"201":3,"213":1,"215":1,"223":1,"229":1,"239":1,"242":1,"246":1,"255":1,"291":1,"296":1}}],["be",{"2":{"1":2,"11":1,"12":1,"14":1,"15":2,"18":1,"20":1,"23":2,"26":3,"30":1,"34":1,"35":1,"36":1,"39":1,"44":1,"50":1,"52":1,"62":1,"64":1,"65":1,"66":2,"78":1,"81":1,"89":1,"103":5,"116":2,"129":1,"130":1,"142":2,"144":2,"150":2,"154":1,"155":1,"159":1,"160":1,"165":2,"166":1,"167":1,"170":5,"172":1,"173":1,"186":1,"202":2,"204":1,"210":3,"217":1,"220":2,"221":1,"222":2,"226":1,"227":1,"231":1,"233":9,"236":2,"237":2,"239":1,"240":10,"242":1,"255":2,"256":2,"263":1,"284":4,"292":1,"298":1,"309":2,"310":1,"321":1,"322":1}}],["ts",{"2":{"257":2}}],["tsx",{"2":{"252":2,"255":1,"256":1}}],["tsubasa",{"2":{"134":1}}],["turn",{"2":{"199":1,"230":4,"231":6,"233":11,"235":1}}],["turing",{"2":{"105":1,"115":1}}],["tutorials",{"2":{"242":1}}],["tutorial",{"0":{"215":1},"1":{"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"156":1,"178":1,"213":1,"230":1,"241":1,"243":1}}],["tuple",{"2":{"10":1,"38":4,"127":4}}],["tcontractstate",{"2":{"46":2,"129":3,"162":3,"284":2}}],["tcp",{"2":{"27":3}}],["ty",{"2":{"38":7,"127":8}}],["typeof",{"2":{"255":1}}],["typename",{"2":{"203":3}}],["typeversioninvoke1",{"2":{"175":1}}],["typed",{"2":{"129":1}}],["type",{"2":{"38":4,"39":1,"42":2,"43":2,"127":8,"200":2,"226":1,"230":1,"231":6,"233":6,"236":2,"237":2,"240":10,"255":1,"264":1}}],["types",{"0":{"37":1,"38":1,"175":1},"2":{"27":1,"32":1,"33":1,"37":2,"38":2,"127":3,"175":2,"257":1}}],["typical",{"2":{"23":1}}],["template",{"2":{"262":6,"287":1}}],["templates",{"0":{"74":1},"2":{"74":1,"262":2}}],["terms",{"2":{"107":1}}],["terminated",{"2":{"172":1}}],["terminal",{"2":{"26":4,"27":4,"89":1,"123":1,"157":1,"164":1,"196":1,"213":2,"214":1,"219":1,"264":1,"266":2,"270":1}}],["terminology",{"2":{"23":1,"103":1}}],["technologies",{"2":{"193":1}}],["technology",{"2":{"103":1,"193":1}}],["technical",{"2":{"107":1}}],["tech",{"2":{"102":1}}],["team",{"2":{"74":1,"75":2,"108":2,"150":1}}],["textual",{"2":{"42":1}}],["testnets",{"2":{"81":1}}],["testnet",{"2":{"76":1,"154":1}}],["testing",{"0":{"58":1,"133":1,"135":1},"1":{"59":1,"60":1,"61":1,"134":1,"135":1},"2":{"58":2,"59":1,"76":1,"134":1,"154":3,"170":1,"172":1,"210":1,"231":1,"232":1}}],["test",{"0":{"61":1,"232":1,"236":1,"237":1,"239":1,"325":1},"1":{"240":1,"241":1},"2":{"23":1,"58":2,"59":8,"60":11,"61":2,"96":2,"134":2,"135":2,"154":4,"176":1,"190":1,"232":2,"233":14,"235":7,"239":3,"240":1,"243":1,"325":3}}],["tests",{"0":{"59":1,"60":1,"233":1},"1":{"61":1},"2":{"23":1,"58":2,"59":2,"60":6,"154":1,"225":4,"233":2,"239":1,"240":3,"325":1}}],["tip",{"2":{"122":1}}],["tinkering",{"2":{"103":1}}],["tight",{"2":{"22":1}}],["timestamp",{"2":{"301":1,"303":2}}],["time",{"2":{"6":1,"8":1,"17":1,"23":1,"25":1,"26":1,"27":1,"31":1,"45":1,"142":2,"154":1,"163":1,"169":3,"170":1,"198":1,"203":1,"302":2}}],["t",{"2":{"22":1,"27":1,"41":1,"42":1,"43":1,"64":24,"78":1,"102":1,"103":1,"142":1,"165":1,"217":5,"238":1,"241":1,"242":1,"243":2,"263":1,"264":1,"279":1}}],["task",{"2":{"283":1,"284":2}}],["tasks",{"2":{"184":1,"284":1}}],["tailor",{"2":{"275":1}}],["tab",{"2":{"262":1,"270":1,"287":2}}],["tables",{"2":{"27":1}}],["table",{"2":{"18":3}}],["tandem",{"2":{"209":1}}],["tangible",{"2":{"39":1}}],["tarrencev",{"2":{"121":4}}],["tarrence",{"2":{"104":1}}],["targeted",{"2":{"203":1}}],["targeting",{"2":{"163":1,"218":1}}],["target",{"2":{"14":1,"162":1,"164":1,"217":1,"219":1,"225":1,"286":1}}],["tallies",{"2":{"39":1}}],["takeaways",{"2":{"127":1}}],["takes",{"2":{"105":1,"303":1}}],["take",{"2":{"36":1,"46":1}}],["taking",{"2":{"22":1}}],["tag",{"2":{"23":1,"26":1,"79":1,"225":1}}],["two",{"2":{"15":1,"25":1,"103":1,"149":1,"172":1,"197":1,"200":1,"201":1,"281":1}}],["twitter",{"2":{"4":1,"30":1,"68":1,"73":1}}],["troubleshooting",{"2":{"265":1}}],["triggered",{"2":{"290":1}}],["trigger",{"2":{"250":1}}],["treejs",{"2":{"248":1}}],["treated",{"2":{"15":1,"23":1,"226":1}}],["trust",{"2":{"116":1}}],["trustless",{"2":{"103":1}}],["truthful",{"2":{"102":1}}],["true",{"2":{"14":1,"35":1,"79":1,"217":9,"225":1}}],["try",{"2":{"60":1,"222":1,"228":1,"230":1,"233":1,"235":1,"241":1,"262":1}}],["trace",{"0":{"313":1}}],["traceback",{"2":{"222":1,"266":2}}],["transports",{"2":{"307":2}}],["transport",{"0":{"307":1},"2":{"265":1}}],["transform",{"2":{"45":1}}],["transactions",{"0":{"199":1},"2":{"144":2,"149":1,"170":2,"199":3,"209":2,"300":1}}],["transactionhash",{"2":{"27":2,"199":4,"204":3}}],["transaction",{"0":{"175":1,"266":1},"2":{"26":1,"107":1,"116":1,"144":1,"149":1,"154":1,"164":1,"165":1,"168":1,"175":2,"199":2,"204":1,"209":1,"220":1,"222":5,"255":3,"256":1,"266":2,"284":2,"315":1}}],["traits",{"0":{"35":1,"229":1},"1":{"230":1},"2":{"32":1,"35":1,"39":2,"134":1,"217":1,"229":1,"230":1}}],["trait",{"2":{"16":3,"23":2,"35":3,"38":1,"39":1,"46":1,"57":1,"64":1,"126":1,"127":1,"129":2,"162":1,"217":5,"230":6,"284":1}}],["tlsv1",{"2":{"89":2,"97":1,"157":1}}],["tl",{"2":{"8":1,"32":1,"50":1,"205":1}}],["tldr",{"2":{"1":1}}],["thus",{"2":{"165":1}}],["those",{"2":{"101":1,"154":2,"291":1}}],["thorough",{"2":{"76":1}}],["third",{"2":{"167":1,"220":1,"221":1,"222":1}}],["thinkers",{"2":{"68":1}}],["think",{"2":{"52":1}}],["this",{"0":{"244":1},"2":{"0":1,"2":2,"5":2,"7":1,"12":1,"14":1,"15":2,"16":2,"18":4,"20":1,"21":1,"22":6,"23":8,"26":7,"27":10,"28":1,"29":1,"31":2,"33":1,"34":3,"35":2,"36":2,"39":2,"41":3,"42":2,"43":1,"46":2,"48":1,"49":2,"53":3,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"77":1,"81":1,"88":1,"89":5,"91":2,"102":2,"103":5,"105":1,"116":3,"117":1,"121":4,"125":1,"126":1,"129":1,"130":1,"131":1,"154":1,"156":2,"160":1,"164":1,"165":1,"169":1,"170":1,"172":1,"173":1,"182":1,"187":1,"193":2,"198":3,"199":2,"200":1,"203":8,"204":3,"210":1,"213":3,"219":1,"221":1,"225":5,"226":4,"227":2,"230":2,"231":3,"239":2,"241":2,"242":4,"243":4,"244":1,"251":1,"252":2,"253":1,"255":1,"256":1,"257":2,"261":1,"262":1,"264":2,"265":1,"267":1,"272":1,"274":1,"276":1,"277":1,"279":1,"280":1,"282":1,"284":5,"292":1,"299":1,"317":1,"326":2,"328":2}}],["throwasync",{"2":{"265":1}}],["throughput",{"2":{"107":1}}],["throughout",{"2":{"103":1,"125":1,"204":1}}],["through",{"2":{"50":1,"107":1,"154":2,"156":1,"205":1,"213":2,"262":1,"272":1}}],["threading",{"2":{"284":1}}],["thread",{"2":{"264":1}}],["three",{"2":{"42":1,"217":1,"220":1,"248":1}}],["thriving",{"2":{"68":1}}],["than",{"2":{"89":2,"107":1,"128":1,"227":1}}],["thanks",{"2":{"17":1,"116":1}}],["that",{"2":{"8":1,"10":4,"15":3,"17":1,"20":1,"21":1,"23":4,"26":5,"27":5,"34":3,"35":1,"36":1,"39":1,"40":1,"41":1,"43":1,"44":1,"45":1,"51":2,"56":1,"58":1,"60":1,"62":1,"64":1,"74":1,"78":1,"89":4,"96":1,"101":1,"102":1,"103":5,"105":1,"107":1,"113":1,"114":2,"116":1,"142":1,"150":2,"154":2,"170":1,"175":1,"184":1,"193":5,"194":1,"200":1,"203":5,"213":2,"217":9,"220":1,"226":2,"227":1,"228":1,"231":1,"232":2,"235":1,"236":2,"243":1,"247":1,"253":1,"255":1,"256":1,"260":1,"263":1,"265":1,"270":2,"284":1,"291":1,"298":1,"303":1}}],["thesis",{"2":{"104":1}}],["these",{"0":{"2":1},"2":{"5":1,"8":1,"12":3,"17":2,"19":2,"20":1,"25":1,"28":1,"33":1,"36":1,"48":1,"51":1,"53":1,"101":1,"102":2,"103":2,"123":1,"160":1,"163":1,"204":1,"209":1,"241":1,"277":1,"279":1,"280":1,"284":1,"289":1,"291":1,"298":1}}],["therefore",{"2":{"284":1}}],["thereby",{"2":{"57":1}}],["there",{"2":{"17":1,"20":1,"103":1,"150":1,"172":1,"197":1,"201":1,"226":1,"231":1,"241":1,"246":1,"248":1}}],["then",{"2":{"10":1,"16":1,"18":2,"34":1,"39":2,"60":1,"80":1,"88":1,"102":1,"130":1,"154":1,"155":1,"157":3,"163":1,"209":1,"213":3,"218":1,"228":1,"235":2,"236":1,"237":1,"253":1,"298":1,"322":1}}],["their",{"2":{"8":1,"14":1,"41":1,"46":1,"50":1,"102":2,"103":2,"116":1,"154":3,"217":1,"236":2,"289":1}}],["they",{"2":{"8":1,"9":1,"16":1,"23":1,"25":2,"34":1,"39":2,"42":1,"102":2,"103":2,"105":1,"150":1,"197":1,"202":1,"204":1,"240":1}}],["themselves",{"2":{"102":1,"251":1}}],["them",{"2":{"8":1,"29":1,"32":1,"36":1,"58":1,"76":1,"87":1,"154":2,"160":1,"167":1,"170":1,"229":1,"239":1,"289":1}}],["theory",{"2":{"2":1,"15":1,"26":1,"86":1}}],["the",{"0":{"10":1,"11":1,"12":1,"13":1,"34":1,"46":1,"48":1,"57":1,"62":1,"98":1,"112":1,"224":1,"225":1,"234":1,"271":1,"275":1},"1":{"63":1,"64":1,"65":1,"235":1,"236":1,"237":1,"276":1,"277":1,"278":1},"2":{"1":2,"2":4,"3":1,"5":4,"6":8,"7":7,"8":2,"9":2,"10":16,"11":6,"12":1,"13":2,"15":6,"16":2,"17":2,"18":7,"19":2,"20":2,"21":2,"22":5,"23":45,"25":24,"26":11,"27":23,"28":1,"29":2,"30":14,"31":1,"32":3,"33":3,"34":9,"35":1,"36":4,"38":7,"39":6,"40":1,"41":8,"42":10,"43":5,"44":2,"46":8,"48":5,"49":5,"50":3,"51":2,"52":2,"53":7,"56":4,"57":11,"59":5,"60":3,"61":3,"62":13,"63":3,"64":2,"65":1,"68":1,"74":1,"75":11,"76":3,"77":2,"78":1,"80":2,"83":2,"84":4,"85":3,"86":3,"88":2,"89":19,"91":2,"96":2,"97":1,"98":1,"101":4,"102":10,"103":20,"104":1,"105":8,"107":7,"108":5,"110":2,"111":2,"112":3,"113":2,"114":2,"115":1,"116":7,"117":3,"118":2,"121":5,"123":1,"125":1,"126":1,"127":12,"129":3,"130":4,"131":2,"132":1,"134":4,"135":3,"142":6,"143":2,"144":1,"145":7,"147":1,"149":10,"150":14,"152":1,"154":28,"155":6,"156":1,"157":5,"160":5,"162":1,"163":7,"164":3,"165":2,"166":5,"167":9,"169":4,"170":5,"172":7,"173":9,"174":1,"175":6,"177":2,"178":3,"182":3,"184":4,"187":3,"193":6,"194":1,"196":1,"197":9,"198":11,"199":5,"200":2,"201":6,"202":2,"203":11,"204":3,"205":2,"209":8,"210":7,"212":4,"213":23,"214":4,"215":1,"217":20,"218":6,"219":1,"220":11,"221":7,"222":12,"223":2,"225":1,"226":3,"227":3,"228":2,"229":2,"230":5,"231":5,"232":6,"233":1,"236":9,"237":7,"238":1,"239":4,"240":1,"241":6,"242":6,"243":4,"244":3,"246":1,"247":1,"248":3,"250":2,"251":4,"252":11,"253":7,"255":6,"256":7,"257":2,"258":3,"260":6,"261":5,"262":10,"263":3,"264":4,"265":4,"266":7,"267":3,"268":2,"269":2,"270":9,"271":5,"272":3,"274":8,"275":1,"276":1,"277":2,"278":5,"279":4,"280":1,"283":3,"284":17,"285":1,"286":5,"287":10,"288":1,"289":5,"290":7,"291":10,"292":5,"295":1,"296":1,"298":12,"299":3,"301":2,"302":2,"303":2,"305":2,"309":6,"310":3,"316":1,"317":2,"319":1,"323":2,"324":2,"325":2,"326":6,"328":3}}],["tostring",{"2":{"284":1}}],["too",{"2":{"243":1}}],["tools",{"2":{"87":1,"111":1,"156":1}}],["tool",{"2":{"7":1,"14":2,"26":1,"30":1,"89":1,"184":2,"213":1,"225":2,"322":2}}],["tooling",{"2":{"1":1}}],["toolchain",{"2":{"1":1,"21":1,"30":1,"31":1,"83":1,"91":1,"108":1,"118":1,"176":1,"180":1}}],["torri",{"2":{"214":1}}],["toriiurl",{"2":{"253":2,"261":1,"265":1}}],["toriiclient",{"2":{"253":2,"261":3,"265":2}}],["torii",{"0":{"66":1,"192":1,"206":1,"214":1,"253":1,"265":1,"314":1},"1":{"67":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"315":1},"2":{"12":2,"17":1,"18":1,"19":1,"20":1,"27":35,"66":1,"85":3,"87":1,"176":1,"180":1,"196":3,"197":1,"200":1,"205":1,"207":1,"208":1,"209":1,"210":2,"214":2,"248":1,"250":1,"253":4,"261":2,"265":7,"269":1,"289":1,"293":1,"309":3,"315":1}}],["todo",{"2":{"131":1,"136":1,"151":1,"152":1}}],["topic",{"2":{"114":1}}],["top",{"2":{"102":1}}],["tower",{"2":{"75":1}}],["tokens",{"2":{"44":1}}],["token",{"2":{"38":1,"127":1,"129":1,"130":1,"132":2,"264":1}}],["totalcount",{"2":{"199":2,"201":2}}],["total",{"2":{"26":2,"217":4}}],["touched",{"2":{"25":1}}],["toml",{"2":{"14":2,"23":1,"26":1,"30":2,"46":1,"79":1,"80":1,"162":1,"213":2,"217":1,"225":2,"322":1,"328":1}}],["to",{"0":{"2":1,"45":1,"78":1,"79":1,"80":1,"81":1,"82":1,"101":1,"102":1,"124":1,"125":1,"136":1,"204":1},"1":{"46":1,"47":1,"48":1,"49":1,"80":1,"81":1,"82":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1},"2":{"1":3,"2":1,"3":1,"5":5,"6":1,"7":4,"8":5,"9":1,"10":4,"11":1,"12":1,"14":1,"15":5,"17":3,"18":1,"21":1,"22":3,"23":14,"25":2,"26":6,"27":18,"28":2,"29":1,"30":6,"31":1,"32":1,"33":3,"34":5,"35":1,"36":6,"37":1,"38":2,"39":1,"40":2,"41":4,"42":5,"43":3,"46":1,"48":1,"49":1,"50":5,"51":2,"52":3,"53":2,"57":3,"58":3,"59":2,"60":1,"62":5,"63":2,"65":2,"66":2,"75":1,"76":1,"77":2,"78":3,"79":3,"80":1,"81":2,"83":1,"84":1,"85":1,"86":1,"89":14,"90":2,"91":3,"96":3,"101":1,"102":6,"103":8,"105":4,"107":2,"108":4,"110":1,"111":2,"112":1,"113":1,"115":2,"116":4,"117":1,"118":1,"119":1,"121":10,"123":1,"124":1,"125":3,"127":3,"128":1,"129":1,"130":3,"131":2,"132":1,"134":1,"135":1,"142":4,"143":1,"144":3,"148":1,"149":2,"150":9,"151":1,"154":13,"156":3,"157":3,"160":1,"162":2,"163":2,"164":6,"165":3,"166":2,"167":3,"169":2,"170":3,"172":3,"173":5,"175":3,"177":2,"178":1,"184":3,"193":5,"194":3,"196":1,"197":3,"198":1,"199":4,"200":2,"201":3,"202":1,"203":9,"204":3,"205":3,"209":2,"210":4,"212":3,"213":10,"214":2,"215":1,"217":12,"218":1,"219":1,"220":3,"221":2,"222":3,"223":1,"225":3,"226":3,"228":1,"230":3,"231":2,"233":1,"235":1,"236":3,"237":2,"238":1,"239":11,"240":3,"241":2,"242":6,"243":3,"244":2,"246":1,"248":4,"250":1,"251":3,"252":5,"253":1,"255":4,"256":4,"257":1,"258":2,"260":2,"261":2,"262":5,"263":2,"264":5,"266":1,"270":1,"271":3,"272":2,"274":3,"275":2,"276":1,"277":1,"278":1,"279":2,"282":1,"284":8,"286":2,"287":4,"288":1,"289":2,"290":2,"291":4,"292":4,"295":1,"296":1,"298":8,"299":1,"303":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":3}}],["dynamic",{"2":{"290":1}}],["dynamically",{"2":{"197":1,"290":1}}],["dynamics",{"2":{"17":1}}],["due",{"2":{"125":1,"261":1}}],["dungeon",{"2":{"75":1}}],["duration",{"2":{"36":1}}],["during",{"0":{"122":1,"266":1},"2":{"30":2,"43":1,"96":1,"262":1,"289":1}}],["d",{"2":{"36":1,"212":1,"271":1}}],["dark",{"2":{"75":1}}],["dangerous",{"2":{"75":1}}],["dao",{"2":{"74":1}}],["datasets",{"2":{"202":1}}],["dataset",{"2":{"197":1}}],["database",{"0":{"210":1},"2":{"27":1,"34":1,"142":2,"173":4,"174":1,"209":1,"210":6,"212":3}}],["data",{"0":{"40":1,"42":1},"2":{"23":6,"25":2,"27":6,"32":2,"40":1,"41":4,"42":4,"43":6,"46":2,"103":2,"154":1,"162":3,"166":1,"167":2,"172":1,"193":4,"197":2,"198":4,"199":2,"200":1,"201":1,"203":3,"204":6,"205":1,"209":1,"210":1,"231":1,"279":1,"291":1}}],["days",{"2":{"1":1}}],["db",{"2":{"13":1,"142":1,"173":1,"174":4,"210":3,"212":1}}],["drag",{"2":{"274":2,"278":1,"279":1}}],["drei",{"2":{"248":1}}],["dribble",{"2":{"129":1,"130":1}}],["driving",{"2":{"75":1,"108":1}}],["driven",{"2":{"290":1}}],["drive",{"2":{"75":1}}],["drug",{"2":{"75":1}}],["dropdown",{"2":{"286":1}}],["drop",{"2":{"15":2,"16":2,"18":2,"19":4,"20":1,"23":6,"33":1,"34":1,"36":1,"39":4,"46":2,"57":2,"132":3,"217":3,"226":7,"293":2}}],["dr",{"2":{"8":1,"32":1,"50":1,"205":1}}],["did",{"2":{"165":1}}],["dir",{"2":{"142":1,"173":1,"174":2}}],["directed",{"2":{"242":1}}],["direct",{"2":{"27":3}}],["directory",{"2":{"22":2,"58":1,"60":1,"77":1,"121":2,"142":3,"163":1,"173":3,"174":1,"218":1,"225":1,"262":1,"263":1,"266":1,"292":2,"298":1,"324":1,"328":1}}],["directly",{"2":{"15":1,"20":1,"42":1,"51":1,"66":1,"149":1,"150":1,"205":1,"251":1,"262":1,"272":1,"276":1,"287":1}}],["directions",{"2":{"177":1}}],["direction",{"2":{"12":1,"20":6,"23":27,"25":3,"53":3,"57":12,"60":2,"198":2,"242":1,"256":1,"293":6}}],["dive",{"2":{"114":1,"288":1,"291":1}}],["diving",{"0":{"234":1},"1":{"235":1,"236":1,"237":1},"2":{"86":1}}],["diffs",{"2":{"26":1}}],["diff",{"2":{"26":1}}],["differences",{"2":{"39":1}}],["difference",{"2":{"23":1}}],["different",{"2":{"15":1,"85":1,"150":1,"152":1,"164":1,"172":1,"175":1,"213":1,"277":1,"289":1}}],["disk",{"2":{"172":1}}],["disrupt",{"2":{"41":1}}],["display",{"2":{"264":1}}],["displays",{"2":{"27":1}}],["dispatchers",{"2":{"235":1}}],["dispatcher",{"2":{"39":1,"46":2,"49":1,"57":4,"131":1,"134":2,"135":1}}],["distribution",{"2":{"96":1}}],["distribute",{"2":{"29":1}}],["distinct",{"2":{"39":1,"46":1}}],["disable",{"2":{"26":1,"77":1,"142":1,"144":4,"159":1,"164":1,"219":1}}],["discover",{"2":{"272":1}}],["discord",{"2":{"4":1,"68":1,"70":1,"71":1,"72":1,"112":1}}],["discuss",{"2":{"26":1}}],["discussed",{"2":{"5":1}}],["diagram",{"2":{"6":1}}],["double",{"2":{"265":1}}],["dope",{"2":{"75":1}}],["doing",{"2":{"39":1}}],["doesn",{"2":{"43":1,"103":1,"241":1}}],["does",{"2":{"30":1,"116":1,"123":1,"243":1}}],["documentations",{"2":{"310":1}}],["documentation",{"0":{"249":1,"250":1},"1":{"251":1,"252":1},"2":{"27":2,"89":1,"175":1,"198":2,"242":1,"298":1}}],["docs",{"0":{"2":1},"2":{"27":1,"57":1,"89":2,"97":1,"157":1}}],["donkey",{"2":{"102":3}}],["don",{"2":{"27":1,"64":1,"142":1,"165":1,"238":1,"243":1,"263":1}}],["done",{"2":{"26":1,"125":1,"213":1,"298":1}}],["downloaded",{"2":{"298":1}}],["download",{"2":{"89":2,"262":2,"298":2}}],["down",{"0":{"24":1,"54":1},"1":{"25":1,"55":1,"56":1,"57":1},"2":{"23":1,"36":2,"284":1,"293":2}}],["do",{"0":{"4":1},"2":{"15":1,"41":2,"62":2,"113":1,"121":1,"150":1,"213":2,"226":1,"239":1,"241":1,"242":2,"260":1,"279":1}}],["dojoconfig",{"2":{"278":1,"282":1,"283":1}}],["dojo5",{"2":{"270":1}}],["dojo+keysclause",{"2":{"261":1}}],["dojoupfor",{"2":{"88":1}}],["dojoup",{"0":{"87":1,"88":1,"119":1},"1":{"120":1,"121":1,"122":1,"123":1},"2":{"85":3,"87":1,"88":4,"121":8,"122":1,"123":2,"149":1,"157":2,"186":1,"213":1,"264":1,"292":1}}],["dojostarknet",{"2":{"30":1}}],["dojoengine",{"2":{"14":1,"26":1,"30":1,"79":1,"85":2,"87":1,"94":1,"120":1,"150":1,"157":1,"187":1,"225":1,"248":1,"253":1,"255":1}}],["dojo",{"0":{"1":1,"21":1,"22":1,"23":1,"48":1,"49":1,"57":1,"61":1,"69":1,"101":1,"110":1,"111":1,"112":1,"117":1,"118":1,"131":1,"137":1,"245":1,"247":1,"267":2,"269":1,"270":1,"285":1,"288":1,"294":1,"298":1},"1":{"2":1,"3":1,"4":1,"22":1,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"70":1,"71":1,"72":1,"73":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"268":2,"269":2,"270":2,"271":2,"286":1,"287":1,"289":1,"290":1,"291":1,"292":1,"293":1,"295":1,"296":1,"297":1,"298":1},"2":{"1":3,"2":2,"3":1,"8":2,"14":8,"15":1,"17":1,"21":1,"22":3,"23":10,"25":2,"26":10,"27":2,"28":2,"29":1,"30":1,"34":2,"39":7,"44":1,"45":2,"46":7,"47":2,"48":1,"49":1,"50":1,"51":2,"53":4,"57":6,"58":2,"59":1,"60":5,"62":2,"66":1,"68":3,"74":3,"75":4,"76":2,"79":4,"85":5,"87":1,"89":4,"90":2,"91":1,"94":1,"101":3,"105":3,"108":4,"110":2,"111":1,"112":2,"117":1,"118":3,"119":1,"121":5,"122":1,"128":3,"131":2,"134":1,"150":2,"172":1,"184":2,"187":2,"193":1,"198":1,"199":1,"204":1,"205":1,"213":4,"223":2,"224":1,"225":5,"226":1,"227":1,"233":2,"238":1,"240":1,"241":2,"242":2,"243":1,"247":1,"248":3,"258":1,"260":1,"261":5,"262":7,"263":4,"264":2,"265":4,"266":1,"267":2,"268":2,"269":1,"270":1,"272":4,"274":4,"276":1,"279":1,"280":1,"282":2,"283":2,"284":10,"285":1,"287":1,"289":1,"290":4,"291":9,"292":1,"293":4,"295":2,"297":1,"298":7,"322":2,"324":1,"328":1}}],["dealing",{"2":{"321":1}}],["demonstrate",{"2":{"204":1}}],["demonstrated",{"2":{"169":1}}],["demand",{"0":{"170":1},"2":{"142":1,"170":3}}],["detect",{"2":{"279":1}}],["detected",{"2":{"261":1}}],["determine",{"2":{"168":1}}],["details",{"2":{"22":1,"127":1,"160":1,"198":1,"261":1}}],["debug",{"2":{"213":1}}],["debugging",{"2":{"88":1}}],["debian",{"2":{"121":1}}],["deep",{"2":{"68":1}}],["deeper",{"2":{"15":1,"114":1}}],["describe",{"2":{"317":2}}],["description",{"0":{"209":1},"1":{"210":1},"2":{"29":1,"30":2}}],["desired",{"2":{"89":1,"154":2,"278":1,"279":1}}],["designated",{"2":{"38":1,"127":1}}],["design",{"2":{"8":1,"16":1,"22":1,"33":1,"45":1,"53":1,"105":1,"193":1,"226":1,"244":1}}],["designed",{"2":{"1":1,"28":1,"75":1,"105":1,"107":1,"115":1,"184":1,"193":1}}],["desktop",{"0":{"261":1,"286":1},"2":{"84":1,"261":1,"272":2,"285":1,"286":1,"295":1}}],["despite",{"2":{"43":1}}],["devnet",{"2":{"156":1,"163":1,"218":1}}],["device",{"2":{"76":1}}],["dev",{"0":{"299":1},"1":{"300":1,"301":1,"302":1,"303":1},"2":{"27":1,"164":1,"170":1,"217":24,"219":1,"248":1,"299":2,"300":1,"301":1,"302":1,"303":2,"309":1,"321":3,"322":2}}],["develop",{"2":{"295":1}}],["developing",{"2":{"105":1,"139":1}}],["develops",{"2":{"101":1}}],["developed",{"2":{"74":1,"75":2,"105":1,"149":1,"150":1,"176":1,"180":1,"205":1}}],["developer",{"2":{"64":1}}],["developers",{"2":{"1":1,"8":1,"45":1,"46":1,"57":1,"103":1,"105":1,"154":3}}],["development",{"0":{"45":1,"91":1,"183":1},"1":{"46":1,"47":1,"48":1,"49":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1},"2":{"1":1,"45":1,"57":1,"58":1,"76":2,"84":1,"87":1,"91":1,"105":1,"154":2,"160":1,"163":1,"210":1,"218":1,"272":1,"291":1}}],["deduct",{"2":{"23":1}}],["dedicated",{"2":{"2":1,"3":1,"36":1,"186":1}}],["decrease",{"2":{"328":1}}],["declaration",{"2":{"164":1}}],["declared",{"2":{"164":1,"219":1,"260":1}}],["declare",{"0":{"164":1,"219":1},"2":{"163":1,"164":2,"219":2}}],["declaring",{"2":{"23":2,"164":1,"260":1}}],["deckcreated",{"2":{"132":4}}],["decide",{"2":{"42":1,"164":1,"241":1}}],["decentralized",{"2":{"36":1,"103":3,"105":1}}],["decorator",{"0":{"57":1,"131":1},"2":{"23":1,"32":1,"50":1,"57":4,"128":1,"131":1}}],["decoding",{"2":{"17":1}}],["delivers",{"2":{"193":1}}],["delving",{"0":{"46":1}}],["delve",{"2":{"22":1,"27":1}}],["deleted",{"2":{"18":1}}],["deletes",{"2":{"13":1}}],["delete",{"0":{"13":1},"2":{"13":2,"64":1,"317":2}}],["derive",{"2":{"15":2,"16":2,"18":2,"19":4,"20":1,"23":6,"25":1,"32":1,"33":2,"34":1,"36":1,"39":4,"41":2,"46":2,"48":1,"57":2,"125":2,"132":3,"217":3,"226":7,"293":2}}],["dependency",{"2":{"298":2}}],["dependencies",{"0":{"96":1,"297":1},"2":{"14":1,"26":1,"79":1,"96":2,"162":2,"187":1,"217":2,"225":1,"248":1}}],["depending",{"2":{"96":1}}],["depths",{"2":{"75":1}}],["deployburner",{"2":{"283":1}}],["deployments",{"0":{"77":1,"316":1},"1":{"317":1},"2":{"182":2,"213":2,"214":2,"316":1,"317":1}}],["deployment",{"0":{"76":1,"79":1,"161":1,"216":1},"1":{"77":1,"78":1,"80":1,"81":1,"82":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"77":1,"78":1,"165":1,"184":1,"213":4,"214":3,"220":1,"285":1,"317":5,"323":1}}],["deploy",{"0":{"78":1,"80":1,"81":1,"82":1,"118":1,"156":1,"165":1,"178":1,"213":1,"215":1,"220":1},"1":{"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"214":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"26":3,"60":4,"61":1,"64":2,"79":1,"80":1,"81":1,"134":3,"154":3,"165":2,"178":2,"220":2,"232":1,"233":4,"235":4}}],["deployed",{"2":{"26":2,"27":1,"29":1,"64":1,"135":1,"154":2,"159":1,"165":3,"167":1,"213":1,"220":3}}],["deployer",{"2":{"7":1}}],["deploying",{"2":{"5":1,"77":1,"78":1,"103":1,"139":1,"156":1,"165":1,"184":1,"185":1,"213":1,"220":1}}],["defense",{"2":{"75":1,"129":1,"130":1}}],["defender",{"2":{"38":1,"127":1}}],["defi",{"2":{"44":1,"105":1}}],["defintions",{"0":{"197":1}}],["definitions",{"2":{"154":1}}],["definition",{"2":{"27":1,"103":2,"198":1,"291":2}}],["defining",{"2":{"15":1,"34":1,"35":1,"50":1,"52":1,"128":1,"129":1,"217":1}}],["definecomponent",{"0":{"257":1},"2":{"257":1}}],["definecontractcomponents",{"2":{"253":1}}],["define",{"2":{"16":2,"23":3,"32":2,"33":1,"34":2,"35":2,"51":1,"128":1,"160":1,"220":1,"230":1,"255":1}}],["defined",{"2":{"11":1,"14":1,"25":1,"30":1,"31":1,"48":1,"57":2,"89":1,"322":1}}],["defines",{"2":{"10":1,"16":1,"36":1,"127":1,"289":1}}],["defaults",{"2":{"173":1}}],["default",{"0":{"276":1},"2":{"10":1,"14":1,"26":1,"30":1,"143":2,"144":1,"145":1,"149":1,"150":2,"154":1,"164":1,"168":1,"169":1,"172":1,"212":4,"225":1,"266":2,"276":1,"278":1,"307":1}}],["wp",{"2":{"240":11}}],["w",{"2":{"212":1,"271":1}}],["wsl",{"2":{"123":1}}],["wrong",{"2":{"60":3}}],["writing",{"0":{"59":1,"60":1},"1":{"61":1},"2":{"57":1,"59":1}}],["written",{"2":{"11":1,"15":1,"102":1}}],["write",{"0":{"167":1,"222":1,"312":1},"2":{"8":1,"50":1,"52":1,"58":1,"60":2,"62":1,"105":1,"128":1,"162":1,"217":11,"231":1,"242":1}}],["writer",{"2":{"7":4,"64":3,"266":2,"326":4}}],["wait",{"2":{"284":1}}],["waiting",{"2":{"255":1}}],["walkthrough",{"2":{"267":1}}],["wallet",{"2":{"232":1}}],["warning",{"2":{"298":1}}],["warn",{"2":{"266":1}}],["wars",{"2":{"75":2}}],["wasm",{"2":{"66":1,"108":1}}],["was",{"2":{"53":1,"111":1,"217":1,"241":1}}],["wanting",{"2":{"83":1,"91":1}}],["want",{"2":{"35":1,"41":1,"60":1,"89":1,"116":1,"150":1,"154":1,"170":1,"193":1,"224":1,"241":1,"251":1,"274":1,"303":1}}],["way",{"2":{"8":1,"52":1,"84":1,"149":1,"150":1,"184":1,"205":2,"299":1}}],["ways",{"2":{"8":1,"15":1,"226":1,"241":1}}],["wondering",{"2":{"198":1}}],["won",{"2":{"41":1,"42":1,"243":1}}],["worry",{"2":{"243":1}}],["worth",{"2":{"64":1,"86":1}}],["workaround",{"2":{"210":1}}],["workflow",{"2":{"163":1}}],["working",{"0":{"263":1},"2":{"108":1,"154":1,"242":1}}],["workloads",{"2":{"84":1}}],["works",{"2":{"62":1}}],["workspace",{"2":{"27":1}}],["work",{"2":{"27":1,"41":1,"42":1,"75":1,"89":1,"193":2}}],["worldmanagerdata",{"2":{"277":1,"289":1}}],["worldmanagerdatalocalconfig",{"2":{"276":1}}],["worldmanagerlocalconfig",{"2":{"270":1}}],["worldmanager",{"2":{"261":3,"265":2,"274":1,"278":2}}],["worldaddress",{"2":{"253":1}}],["world",{"0":{"19":1,"30":1,"62":1,"64":1,"70":1,"71":1,"114":1,"191":1,"235":1,"275":1,"289":1},"1":{"63":1,"64":1,"65":1,"276":1,"277":1,"278":1},"2":{"5":3,"6":1,"8":1,"9":1,"10":6,"11":3,"12":1,"13":2,"14":1,"15":2,"17":2,"18":3,"19":1,"20":5,"22":2,"23":14,"25":6,"26":9,"27":9,"29":2,"30":4,"32":1,"34":2,"39":7,"46":7,"48":1,"49":3,"50":3,"51":2,"53":7,"56":1,"57":13,"60":11,"61":3,"62":9,"63":2,"64":4,"65":1,"75":4,"76":1,"78":2,"79":3,"80":1,"90":1,"103":5,"114":2,"129":1,"130":1,"131":1,"134":1,"184":2,"196":2,"197":3,"199":1,"200":1,"207":1,"209":2,"212":2,"213":4,"214":2,"225":1,"231":9,"232":2,"233":19,"235":8,"236":1,"237":1,"240":9,"253":5,"257":1,"261":1,"265":1,"270":1,"272":1,"274":1,"275":1,"276":1,"288":1,"289":5,"290":4,"291":3,"292":1,"326":5,"327":1,"328":1}}],["worldspawned",{"2":{"19":1}}],["worlds",{"0":{"103":1},"1":{"104":1},"2":{"2":1,"3":1,"5":2,"14":1,"26":1,"27":1,"28":1,"29":1,"30":2,"53":1,"66":1,"86":1,"103":7,"104":5,"105":1,"108":1,"114":1,"124":1,"184":1,"185":1,"288":1,"295":1}}],["would",{"2":{"10":1,"34":1,"39":1,"102":1,"116":1,"150":1,"284":1}}],["well",{"2":{"105":1}}],["welcome",{"2":{"101":1,"156":1,"213":1}}],["were",{"2":{"102":1,"116":1,"154":2,"290":1}}],["webgl",{"0":{"262":1,"287":1},"2":{"261":1,"262":5,"272":2,"285":1,"287":6}}],["websocket",{"2":{"307":1}}],["websockets",{"2":{"203":1}}],["website",{"2":{"30":2,"70":1,"71":1,"72":1}}],["webassembly",{"2":{"108":1}}],["web",{"2":{"27":1,"113":1,"193":1,"248":1,"295":1}}],["webrtc",{"2":{"27":3}}],["we",{"0":{"243":1},"2":{"10":2,"11":1,"15":2,"16":1,"22":2,"23":6,"25":4,"26":3,"27":4,"30":1,"36":2,"39":3,"41":4,"46":1,"49":1,"51":1,"59":1,"62":1,"83":1,"89":1,"91":1,"103":2,"116":3,"156":2,"160":2,"165":2,"198":1,"203":2,"204":1,"213":4,"220":1,"226":3,"227":1,"229":1,"230":1,"231":1,"235":4,"236":4,"237":2,"239":4,"243":3,"244":2,"253":2,"281":1}}],["why",{"0":{"111":1}}],["who",{"0":{"110":1},"2":{"154":1}}],["whole",{"2":{"52":1}}],["whether",{"2":{"185":1,"217":2}}],["where",{"2":{"33":1,"116":1,"156":1,"169":1,"172":2,"173":1,"213":2,"227":1,"274":1,"284":2,"298":1}}],["whenever",{"2":{"27":1,"203":1,"250":1,"290":1}}],["when",{"2":{"6":1,"15":1,"18":2,"19":2,"25":2,"27":1,"35":1,"36":1,"40":1,"42":2,"43":2,"52":1,"56":1,"62":1,"64":1,"111":1,"144":1,"149":1,"154":1,"160":1,"170":1,"172":1,"173":2,"197":1,"203":2,"217":1,"229":1,"239":1,"241":1,"255":2,"260":1,"264":1,"265":1,"290":1,"299":1,"321":1}}],["white",{"2":{"226":2,"230":3,"231":1,"232":1,"233":18,"236":5,"237":5,"239":3,"240":14}}],["while",{"2":{"22":1,"33":1,"36":1,"39":1,"46":1,"102":2,"103":5,"107":1,"154":1,"220":1,"222":1,"226":1,"266":3,"289":1,"291":1}}],["which",{"2":{"7":1,"10":1,"12":1,"14":1,"15":2,"23":1,"25":1,"27":1,"35":1,"53":1,"57":1,"64":1,"88":1,"107":1,"108":2,"118":2,"124":1,"129":1,"131":1,"142":1,"154":1,"194":1,"203":2,"213":2,"236":1,"280":1,"289":1,"300":1}}],["what",{"0":{"1":1,"44":1,"51":1,"112":1,"113":1,"114":1,"115":1,"116":1,"243":1,"244":1},"1":{"2":1,"3":1,"4":1},"2":{"2":1,"17":1,"28":1,"68":1,"116":1,"149":1,"193":1,"224":1,"239":1,"242":1}}],["wip",{"2":{"249":1}}],["wish",{"2":{"154":1,"214":1}}],["winner",{"2":{"116":1,"226":1}}],["window",{"2":{"262":1,"274":1,"277":1,"287":1,"298":2}}],["windows",{"0":{"99":1,"286":1},"2":{"84":1,"123":1,"286":2}}],["wind",{"2":{"104":1}}],["wired",{"2":{"104":1}}],["will",{"2":{"1":1,"7":1,"8":1,"12":1,"15":1,"18":4,"20":1,"26":1,"27":4,"28":1,"30":2,"39":2,"42":1,"58":1,"61":2,"78":1,"80":1,"84":2,"88":2,"89":3,"103":1,"123":1,"143":1,"154":2,"155":2,"157":3,"159":1,"160":1,"165":1,"170":4,"173":3,"187":1,"198":2,"199":1,"200":1,"203":1,"204":2,"210":1,"213":3,"220":1,"222":1,"226":2,"227":2,"243":1,"244":1,"250":1,"255":2,"279":1,"324":1,"325":1,"326":1,"328":1}}],["without",{"2":{"41":2,"102":2,"103":1,"150":1,"154":1,"262":1,"319":1}}],["within",{"2":{"5":2,"8":1,"9":1,"15":2,"16":1,"20":1,"46":1,"51":2,"58":1,"105":2,"108":1,"114":1,"118":1,"129":1,"132":1,"163":1,"164":1,"204":1,"218":1,"219":1,"260":1,"261":1,"266":1,"272":1,"277":1,"278":1,"279":1,"284":1,"289":1,"291":2,"292":1,"298":1,"325":1}}],["with",{"0":{"39":1,"76":1,"156":1,"267":1},"1":{"77":1,"78":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"268":1,"269":1,"270":1,"271":1},"2":{"1":1,"2":1,"5":1,"8":1,"9":1,"14":1,"18":2,"19":1,"20":1,"21":1,"22":1,"23":3,"25":1,"26":3,"27":5,"29":1,"32":1,"33":1,"34":2,"36":1,"41":1,"42":1,"43":1,"45":1,"46":1,"47":1,"48":1,"49":1,"53":1,"57":1,"60":1,"61":1,"62":3,"64":1,"66":2,"74":1,"75":2,"76":1,"78":1,"81":1,"83":1,"84":3,"86":1,"87":1,"89":3,"91":1,"101":1,"102":1,"103":2,"107":1,"108":1,"113":1,"116":1,"119":1,"121":1,"125":1,"129":1,"130":1,"134":1,"135":1,"142":1,"144":1,"149":1,"150":2,"154":9,"163":1,"164":1,"165":1,"167":1,"173":1,"184":2,"193":2,"199":2,"203":3,"209":1,"213":7,"215":1,"217":1,"220":2,"222":3,"225":3,"226":1,"232":1,"233":1,"235":3,"241":2,"243":1,"251":1,"256":2,"261":1,"264":1,"265":1,"269":1,"272":1,"276":1,"280":1,"283":1,"284":1,"288":1,"291":2,"295":1,"298":1,"309":1,"321":1,"322":1,"326":3,"328":2}}],["edit",{"2":{"226":1,"262":1,"287":1}}],["edges",{"2":{"198":2,"199":2,"201":2}}],["err",{"2":{"264":1}}],["error",{"0":{"264":1,"265":1,"266":1},"2":{"222":6,"261":4,"262":1,"264":1,"265":3,"266":8}}],["errors",{"0":{"262":1},"2":{"210":1}}],["erc",{"2":{"44":1}}],["ephemeral",{"2":{"172":2,"210":1}}],["eg",{"2":{"154":1}}],["etc",{"2":{"122":1,"154":1}}],["ethereum",{"2":{"5":1,"103":1,"107":3,"142":1}}],["ecosystem",{"0":{"69":1},"1":{"70":1,"71":1,"72":1,"73":1},"2":{"86":1}}],["ecs",{"0":{"22":1},"1":{"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"2":{"15":4,"22":1,"23":1,"33":1,"62":1,"226":1,"291":2}}],["e2e",{"2":{"60":1}}],["effective",{"2":{"291":1}}],["effortless",{"2":{"49":1}}],["efficiently",{"2":{"46":1,"193":1}}],["efficient",{"2":{"17":1,"77":1,"163":1,"201":1,"205":1}}],["either",{"2":{"30":1,"85":1,"142":2,"210":1,"278":1,"284":1,"292":1,"298":1}}],["estimatemessagefee",{"2":{"311":1}}],["estimatefee",{"2":{"311":1}}],["establish",{"2":{"36":1,"102":1,"116":1,"265":1}}],["established",{"2":{"27":1,"103":1}}],["establishes",{"2":{"26":1,"27":1}}],["especially",{"2":{"40":1,"154":1}}],["essentially",{"2":{"23":1,"202":1}}],["essential",{"0":{"106":1,"274":1},"2":{"23":1,"40":1,"43":1,"101":1,"103":1,"204":1,"288":1,"289":1,"291":1}}],["e",{"2":{"23":1,"25":1,"42":2,"43":2,"75":1,"121":1,"226":1,"236":1}}],["equivalent",{"2":{"122":1,"322":1}}],["equipped",{"2":{"28":1}}],["equips",{"2":{"22":1}}],["equal",{"2":{"10":1,"35":3,"59":4,"89":1}}],["evm",{"2":{"102":1}}],["evaluating",{"2":{"26":1}}],["evolving",{"2":{"22":1,"112":1}}],["eventemitted",{"2":{"204":3}}],["eventually",{"2":{"103":1}}],["eventid",{"2":{"27":3,"203":2}}],["event",{"2":{"18":4,"19":4,"20":3,"23":7,"57":5,"63":1,"132":5,"203":4,"204":1,"217":6,"290":1}}],["events",{"0":{"17":1,"18":1,"19":1,"20":1,"63":1,"132":1,"204":1,"327":1},"1":{"18":1,"19":1,"20":1},"2":{"12":2,"17":4,"19":3,"20":3,"63":1,"124":1,"132":2,"154":1,"191":1,"204":2,"205":1,"209":1,"327":3}}],["even",{"2":{"17":1,"144":1,"241":1}}],["everything",{"2":{"22":1,"63":1,"184":1,"239":1}}],["every",{"2":{"6":1,"17":1,"53":1,"62":1,"103":1,"116":2,"169":1,"203":1,"226":1,"243":1}}],["ease",{"2":{"119":1}}],["easier",{"2":{"107":1,"111":1,"202":1}}],["easiest",{"2":{"84":1}}],["easily",{"2":{"29":1,"39":1,"87":1}}],["easy",{"0":{"77":1},"2":{"17":1,"27":1,"79":1,"185":1,"193":1}}],["earlier",{"2":{"25":1,"129":1,"150":1}}],["each",{"2":{"10":1,"34":2,"39":1,"60":1,"116":1,"127":1,"128":2,"129":1,"130":1,"197":1,"213":1,"222":1,"232":1,"235":1,"236":1,"251":1,"309":1}}],["elements",{"2":{"235":1}}],["elvish",{"2":{"147":1}}],["elusive",{"2":{"103":1}}],["elucidates",{"2":{"2":1}}],["eliminates",{"2":{"57":1,"154":1,"172":1}}],["else",{"2":{"14":1}}],["embarking",{"2":{"291":1}}],["embed",{"2":{"23":1,"39":1,"46":1,"53":1,"57":1,"130":2,"162":1,"217":1,"231":1}}],["emerging",{"2":{"103":1}}],["emergent",{"2":{"2":1}}],["emoji",{"2":{"75":1}}],["employ",{"2":{"36":1}}],["empty",{"2":{"22":1,"142":1,"173":1,"230":2,"324":1}}],["emitting",{"2":{"20":1}}],["emitted",{"2":{"19":1,"199":1,"204":2,"217":1}}],["emits",{"2":{"17":1,"19":1,"63":1}}],["emit",{"0":{"12":1},"2":{"12":4,"18":2,"20":4,"23":2,"57":2,"64":1,"217":2}}],["exec",{"2":{"265":1}}],["executing",{"2":{"144":1,"149":1,"203":1,"222":1,"264":1,"266":3}}],["execution",{"0":{"149":1,"266":1,"284":1},"1":{"150":1,"151":1,"152":1},"2":{"8":1,"102":1,"103":3,"145":1,"149":4,"150":3,"152":1,"164":1,"219":1,"222":3,"266":3,"280":1}}],["executor",{"2":{"64":2,"266":1}}],["executecalls",{"2":{"284":1}}],["executes",{"2":{"284":1}}],["executetasks",{"2":{"265":1}}],["executeraw",{"2":{"263":1,"284":3}}],["execute",{"2":{"22":1,"26":2,"27":2,"77":1,"117":1,"128":1,"129":1,"134":1,"164":1,"191":1,"199":1,"203":1,"204":2,"214":1,"219":1,"266":1,"283":1,"284":1,"292":1}}],["executed",{"2":{"6":1,"144":1,"170":1,"292":1}}],["ex",{"2":{"212":1}}],["extracted",{"2":{"230":1}}],["extract",{"2":{"204":1,"256":1,"257":1}}],["extension",{"0":{"98":1},"2":{"98":1}}],["external",{"2":{"29":1,"154":1,"212":3}}],["exact",{"2":{"303":1}}],["exactly",{"2":{"155":1,"193":1}}],["examine",{"2":{"23":1}}],["examples",{"0":{"148":1,"155":1,"174":1},"2":{"14":1,"39":4,"53":2,"57":2,"60":2}}],["example",{"0":{"0":1,"267":1,"271":1,"293":1},"1":{"268":1,"269":1,"270":1,"271":1},"2":{"0":1,"10":1,"14":1,"15":1,"18":1,"20":1,"30":3,"35":1,"38":1,"39":1,"41":2,"42":1,"59":1,"60":1,"74":1,"79":1,"89":1,"102":1,"127":1,"132":1,"160":1,"169":1,"197":1,"199":2,"202":1,"203":2,"204":2,"219":1,"248":1,"256":1,"257":1,"260":1,"262":1,"267":1,"284":1,"309":1,"320":1,"326":1,"328":1}}],["exist",{"2":{"103":1,"113":3,"154":1,"231":1}}],["exists",{"2":{"56":1,"108":1,"114":1,"118":1,"212":1,"226":1,"236":1}}],["existing",{"2":{"40":1,"41":5,"42":2,"43":1,"154":1,"173":1,"174":1,"185":1,"213":1,"253":1,"290":1,"298":1}}],["exchange",{"2":{"279":1}}],["exception",{"2":{"222":1,"261":2,"265":1,"266":2}}],["excellent",{"2":{"14":1}}],["excavating",{"2":{"75":1}}],["excluding",{"2":{"23":1}}],["exclusively",{"2":{"22":1}}],["exciting",{"2":{"17":1,"288":1}}],["exposing",{"2":{"193":1}}],["exposes",{"2":{"25":1,"64":1,"209":1}}],["export",{"2":{"163":2,"218":2,"255":2,"265":3}}],["experimentation",{"2":{"172":1}}],["experimental",{"2":{"142":1}}],["experience",{"2":{"76":1,"116":1}}],["experiences",{"2":{"29":1}}],["expected",{"2":{"263":1}}],["expect",{"2":{"117":1,"165":1,"166":1,"167":1,"220":1,"221":1}}],["expressive",{"2":{"105":1}}],["expression",{"2":{"102":1}}],["expanding",{"2":{"103":1}}],["expand",{"2":{"103":1}}],["expanded",{"2":{"8":1}}],["expansion",{"2":{"57":1}}],["expansive",{"2":{"28":1}}],["exploring",{"2":{"198":1}}],["exploration",{"2":{"103":1}}],["explores",{"2":{"280":1}}],["explored",{"2":{"49":1}}],["explorers",{"2":{"63":1}}],["explorer",{"2":{"27":1,"198":1}}],["explore",{"2":{"2":1,"194":1,"199":1,"288":1,"291":1}}],["explicit",{"2":{"51":1}}],["explained",{"2":{"25":4}}],["encounter",{"2":{"264":1,"266":1}}],["encountering",{"2":{"262":1,"265":1}}],["encouraged",{"2":{"242":1}}],["encapsulating",{"2":{"105":1}}],["encapsulates",{"2":{"46":1}}],["en",{"2":{"241":1}}],["enhancing",{"2":{"102":1}}],["enhancements",{"2":{"103":1}}],["enhance",{"2":{"5":1,"41":1,"105":1}}],["enact",{"2":{"51":1}}],["enabled",{"2":{"150":1,"154":1,"299":1,"307":1}}],["enable",{"2":{"108":1,"154":1,"169":1,"170":1,"173":1}}],["enables",{"2":{"1":1,"63":1,"105":1,"154":1}}],["enabling",{"2":{"29":1,"33":1,"76":1,"184":1}}],["engage",{"2":{"50":1}}],["engines",{"0":{"149":1},"1":{"150":1,"151":1,"152":1},"2":{"149":1,"152":1}}],["engineering",{"2":{"104":1}}],["engineers",{"2":{"1":1}}],["engine",{"0":{"150":1},"2":{"1":1,"2":1,"27":11,"101":2,"104":1,"149":3,"150":4,"226":1,"241":1}}],["ensure",{"2":{"50":1,"77":1,"89":2,"116":1,"125":1,"129":1,"130":1,"163":1,"218":1,"232":1,"247":1,"260":2,"262":1,"263":1,"287":2,"291":1,"298":1}}],["ensures",{"2":{"43":1,"78":1,"101":1,"193":1}}],["ensuring",{"2":{"17":1,"57":1,"102":1,"103":2,"116":1,"154":1,"163":1,"185":1,"262":1,"290":1,"291":1}}],["ended",{"2":{"255":1}}],["endless",{"2":{"75":1}}],["end",{"2":{"28":2,"116":1,"154":2,"241":1}}],["endpoints",{"2":{"209":2,"212":1,"214":1}}],["endpoint",{"2":{"27":1,"79":2,"209":1,"212":1,"213":2}}],["entail",{"2":{"116":1}}],["entry",{"2":{"103":1,"197":1}}],["enter",{"2":{"27":1,"298":1}}],["entirely",{"2":{"113":1,"114":1,"117":1}}],["entire",{"2":{"27":1,"60":1,"201":1}}],["entities",{"0":{"15":1},"2":{"15":3,"27":2,"64":1,"65":1,"197":2,"198":1,"199":1,"200":1,"201":6,"202":1,"204":1,"251":2,"252":1,"253":3,"261":1,"271":1,"274":1,"289":5,"290":5,"291":1}}],["entityid",{"2":{"252":1,"256":4}}],["entityupdated",{"2":{"27":3,"203":3}}],["entity",{"2":{"10":2,"11":1,"15":3,"22":1,"23":1,"25":2,"27":2,"33":2,"36":1,"39":10,"64":4,"114":1,"203":3,"205":1,"209":1,"226":1,"232":2,"250":1,"251":1,"252":4,"256":1,"271":3,"290":2,"291":2}}],["enums",{"0":{"38":1},"2":{"16":2,"32":1,"37":1,"127":1}}],["enum",{"0":{"16":1},"2":{"16":3,"23":1,"38":3,"57":1,"127":3,"132":1,"217":1,"226":2,"293":2}}],["enviroment",{"2":{"163":1}}],["environments",{"2":{"103":1,"172":1,"277":1,"321":1}}],["environment",{"0":{"145":1,"163":1,"218":1},"2":{"22":1,"26":1,"76":1,"91":1,"116":1,"154":2,"163":2,"212":1,"218":2,"264":1,"290":2,"291":2}}],["env",{"2":{"14":1,"26":1,"163":2,"213":1,"218":2,"225":1,"319":1,"322":2,"328":1}}],["pseudo",{"2":{"252":1}}],["pwa",{"2":{"248":1}}],["pc=0",{"2":{"222":6,"266":9}}],["p",{"2":{"143":1}}],["phaser",{"2":{"75":1,"248":2}}],["put",{"2":{"236":1}}],["push",{"2":{"203":1}}],["pushing",{"2":{"68":1}}],["pull",{"2":{"121":1}}],["purposes",{"2":{"154":1,"170":1}}],["purpose",{"2":{"108":1,"115":1}}],["purely",{"2":{"46":1,"113":1}}],["puzzle",{"2":{"107":1}}],["public",{"0":{"80":1},"2":{"5":2,"113":1,"118":1,"260":5,"284":5,"293":5}}],["png",{"2":{"30":2}}],["people",{"2":{"242":1}}],["pending",{"2":{"170":1,"300":1}}],["percentage",{"2":{"217":11}}],["period",{"2":{"210":1}}],["perfectly",{"2":{"108":1,"118":1}}],["performing",{"2":{"172":2}}],["performance",{"2":{"105":1,"150":1,"172":1}}],["perform",{"2":{"27":1,"154":1}}],["perpetual",{"2":{"103":1}}],["permanently",{"2":{"103":1}}],["permits",{"2":{"53":1}}],["permissionless",{"2":{"103":3,"107":1}}],["permission",{"2":{"51":1,"103":1}}],["permissions",{"0":{"52":1},"2":{"50":2}}],["persisted",{"2":{"172":1}}],["persistence",{"2":{"103":1}}],["persistently",{"2":{"210":1}}],["persistent",{"0":{"173":1},"1":{"174":1},"2":{"103":1,"172":2,"173":2,"210":3}}],["persist",{"2":{"103":1}}],["perspective",{"2":{"41":1}}],["per",{"2":{"89":1,"128":1,"135":1}}],["peer",{"2":{"27":3}}],["pick",{"2":{"248":1}}],["pieces",{"2":{"236":1,"239":1,"240":1,"243":2}}],["pieceimpl",{"2":{"230":1}}],["piecetrait",{"2":{"230":3,"231":1}}],["piecetype",{"2":{"226":2,"230":7,"231":2,"233":7,"236":2,"237":2,"240":11}}],["piece",{"2":{"225":2,"226":6,"230":18,"231":27,"232":2,"233":19,"235":1,"236":7,"237":5,"239":1,"240":22}}],["pixel",{"2":{"75":1}}],["pixelaw",{"2":{"75":1}}],["pivotal",{"2":{"17":1,"51":1}}],["pinned",{"2":{"14":1}}],["plugins",{"2":{"264":1,"298":1}}],["plugin",{"0":{"264":1},"2":{"89":2,"284":1,"292":1}}],["platform",{"2":{"261":1,"286":2}}],["platforms",{"2":{"261":1,"272":1,"285":1,"298":1}}],["plausible",{"2":{"117":1}}],["planning",{"2":{"184":1}}],["plan",{"2":{"50":1}}],["places",{"2":{"240":1}}],["place",{"2":{"36":1,"163":1,"198":1,"218":1,"239":1}}],["playtests",{"2":{"172":1}}],["playground",{"0":{"194":1},"2":{"27":1,"194":1,"212":1}}],["play",{"2":{"17":1,"51":1,"83":1,"91":1,"102":1,"103":1,"176":1,"199":1,"243":2,"271":1}}],["player=",{"2":{"252":1}}],["playercomponent",{"2":{"252":2}}],["playertrait",{"2":{"230":3}}],["playeractions",{"2":{"53":1}}],["playeractionsimpl",{"2":{"46":1,"53":1,"57":1}}],["playersystem",{"2":{"284":1}}],["players",{"2":{"23":1,"75":1,"102":2,"103":1,"116":2,"236":3,"251":1,"252":7}}],["player",{"2":{"10":2,"11":2,"13":2,"15":2,"18":2,"23":25,"25":11,"33":1,"34":6,"41":13,"46":8,"48":1,"53":4,"56":2,"57":11,"132":2,"198":2,"203":2,"225":2,"226":6,"230":6,"231":6,"232":1,"233":9,"235":1,"237":1,"240":1,"251":2,"252":12,"256":1,"257":1,"262":2,"270":2,"284":8,"287":2,"293":3}}],["please",{"2":{"21":1,"89":2,"112":1,"160":1,"279":1}}],["plenty",{"2":{"15":1}}],["pr",{"2":{"121":1}}],["practise",{"2":{"59":2}}],["practice",{"0":{"39":1}}],["practices",{"2":{"33":1}}],["prefixing",{"2":{"309":1}}],["prefunded",{"2":{"283":1}}],["prefab",{"2":{"274":3}}],["prefabs",{"0":{"274":1},"2":{"274":1}}],["pressing",{"2":{"271":1}}],["press",{"2":{"271":1}}],["presentation",{"2":{"262":1,"287":1}}],["present",{"2":{"252":1,"263":1,"291":1}}],["presently",{"2":{"199":1}}],["predefined",{"2":{"197":2}}],["predeployedaccounts",{"0":{"305":1},"2":{"305":1}}],["predeployed",{"2":{"144":1,"154":1,"305":1}}],["precompiled",{"0":{"123":1},"2":{"123":1}}],["precise",{"2":{"103":1}}],["prerequisites",{"0":{"84":1,"92":1,"246":1,"268":1,"296":1},"1":{"247":1,"248":1,"297":1,"298":1},"2":{"89":1}}],["pre",{"0":{"196":1},"2":{"77":1,"144":1,"163":1,"218":1}}],["preparing",{"2":{"26":1}}],["previous",{"2":{"132":1,"135":1,"173":1}}],["previously",{"2":{"126":1,"142":1,"173":1,"174":1}}],["preventing",{"2":{"261":1}}],["prevent",{"2":{"102":1}}],["prev",{"2":{"19":1}}],["price",{"2":{"145":3}}],["prioritize",{"2":{"50":1}}],["primer",{"2":{"104":1}}],["primed",{"2":{"36":1}}],["primitives",{"2":{"44":1,"74":1}}],["primary",{"2":{"15":2,"23":1,"26":2,"27":1,"32":1,"33":1,"41":1,"46":1,"48":2,"172":1,"242":1}}],["print",{"2":{"16":1,"142":3,"182":1,"212":2,"317":1,"326":1,"328":3}}],["private",{"2":{"14":1,"26":1,"79":3,"213":3,"225":1,"260":1,"270":1,"283":2,"322":3}}],["prod",{"2":{"321":1}}],["produces",{"2":{"169":1}}],["produced",{"2":{"168":1}}],["producing",{"2":{"155":1}}],["production",{"2":{"81":1,"172":1,"210":1}}],["projets",{"2":{"248":1}}],["projects",{"0":{"67":1,"75":1,"248":1},"2":{"23":2,"30":1,"74":1,"105":1,"178":1,"184":1,"242":2,"248":1}}],["project",{"0":{"23":1,"162":1,"190":1,"217":1,"224":1,"228":1},"2":{"14":1,"22":4,"23":1,"25":1,"26":4,"27":1,"58":2,"60":1,"77":2,"78":2,"89":3,"110":1,"112":1,"163":1,"184":1,"213":6,"218":1,"224":2,"225":2,"241":1,"242":1,"246":1,"248":3,"258":1,"262":6,"264":1,"265":1,"266":2,"270":1,"274":2,"276":1,"277":1,"279":2,"284":2,"287":3,"292":3,"296":1,"298":5,"324":3,"325":2}}],["props",{"2":{"252":1}}],["proposal",{"2":{"217":1}}],["properly",{"2":{"260":1}}],["properties",{"2":{"102":1}}],["proper",{"2":{"43":1,"50":1,"89":1,"260":1}}],["profiles",{"0":{"321":1},"1":{"322":1},"2":{"321":1,"322":1}}],["profile",{"2":{"189":1,"321":4,"322":3}}],["program",{"2":{"204":1,"265":2}}],["programs",{"2":{"117":1}}],["programming",{"2":{"115":1}}],["progressive",{"2":{"248":1}}],["progresses",{"2":{"101":1}}],["progress",{"2":{"16":1}}],["proof",{"2":{"102":1,"107":1,"116":2}}],["proofs",{"0":{"117":1},"2":{"102":1,"103":1,"107":1,"108":2,"116":2}}],["protocol",{"2":{"261":1}}],["protoc",{"2":{"92":1}}],["proto",{"2":{"89":2,"97":1,"157":1}}],["problems",{"0":{"259":1},"1":{"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1},"2":{"89":1,"111":1}}],["proceed",{"2":{"27":1,"135":1,"262":1,"292":1}}],["processes",{"2":{"222":1}}],["processed",{"2":{"27":11}}],["processing",{"2":{"149":1}}],["process",{"0":{"43":1},"2":{"43":1,"57":1,"58":1,"96":1,"105":1,"111":1,"154":1,"167":1,"172":2,"213":1,"280":1,"286":1}}],["processors",{"2":{"27":5}}],["promotion",{"2":{"241":1}}],["promoting",{"2":{"3":1}}],["prompt",{"2":{"213":1}}],["promise",{"2":{"102":1}}],["promises",{"2":{"22":1}}],["provider",{"2":{"142":1,"154":1,"282":2,"283":3}}],["provides",{"2":{"28":1,"41":1,"45":1,"49":1,"58":1,"111":1,"184":1,"185":1,"200":1,"203":1,"267":1,"299":1}}],["provided",{"2":{"23":1,"34":1,"103":1,"150":1,"289":1,"307":1}}],["provide",{"2":{"8":1,"10":1,"15":1,"29":1,"34":1,"135":1,"197":1,"237":1}}],["providing",{"0":{"7":1},"2":{"103":1,"154":1,"209":1,"232":1}}],["provable",{"0":{"102":1,"116":1},"2":{"1":1,"2":2,"102":2,"104":2,"116":1}}],["panicked",{"2":{"264":1}}],["panic",{"2":{"230":3}}],["palyerimpl",{"2":{"230":1}}],["paste",{"2":{"230":3}}],["passing",{"2":{"284":1}}],["passant",{"2":{"241":1}}],["pass",{"2":{"50":1,"61":1,"165":1,"203":1,"221":1,"252":1}}],["pawn",{"2":{"226":1,"230":1,"233":4,"237":4,"239":6,"240":18,"241":1}}],["pay",{"2":{"222":1}}],["paginate",{"2":{"201":1}}],["pagination",{"0":{"200":1},"1":{"201":1,"202":1},"2":{"199":1,"200":2,"201":4,"202":1,"204":1}}],["page",{"2":{"0":1,"123":1,"201":1,"298":1}}],["patch",{"2":{"121":2}}],["path=",{"2":{"328":1}}],["path",{"2":{"85":5,"122":1,"142":4,"173":3,"187":1,"264":1,"328":3}}],["pattern",{"2":{"22":1,"39":1,"62":1,"103":1,"105":1}}],["paper",{"2":{"75":1}}],["paint",{"2":{"75":1}}],["pair",{"2":{"48":1}}],["pace",{"2":{"101":1}}],["pac",{"2":{"75":1}}],["package",{"0":{"97":1},"2":{"14":2,"79":1,"84":1,"97":1,"186":1,"205":1,"225":1,"298":8}}],["params",{"2":{"300":1,"301":1,"302":1,"303":1,"305":1,"315":1}}],["parameters",{"2":{"135":1,"284":1}}],["parameter",{"2":{"36":1,"50":1,"53":2,"57":1,"62":1,"166":2,"167":4,"221":4,"222":4}}],["paradigm",{"2":{"193":1}}],["parts",{"2":{"241":1}}],["particular",{"2":{"203":1}}],["particularly",{"2":{"154":1,"172":1}}],["partialeq",{"2":{"16":1,"226":2}}],["part",{"2":{"58":1,"104":1}}],["parsed",{"2":{"209":1}}],["parse",{"2":{"43":1}}],["parsing",{"2":{"30":1}}],["port",{"2":{"143":3}}],["powerful",{"2":{"154":1,"184":1}}],["powershell",{"2":{"123":1,"147":1}}],["power",{"2":{"76":1,"105":1,"204":1}}],["powered",{"0":{"69":1},"1":{"70":1,"71":1,"72":1,"73":1}}],["potions",{"2":{"39":4}}],["potential",{"2":{"2":1,"28":1,"103":3,"199":1}}],["points",{"2":{"40":1,"173":2}}],["point",{"2":{"22":1,"30":1,"103":1,"197":1}}],["pos",{"2":{"233":10,"236":3,"237":5,"240":21}}],["postman",{"2":{"194":1}}],["possibilities",{"2":{"102":1}}],["possible",{"2":{"31":1,"37":1,"53":1,"68":1,"175":1,"193":1,"284":1}}],["possibly",{"2":{"23":2}}],["possess",{"2":{"39":2,"102":1,"103":1}}],["possesses",{"2":{"6":1}}],["positionid",{"2":{"256":3}}],["positionimpl",{"2":{"35":1}}],["positionmodels",{"2":{"197":1}}],["positiontrait",{"2":{"35":3}}],["position",{"0":{"48":1},"2":{"10":5,"11":5,"15":1,"20":4,"23":33,"25":10,"26":2,"27":2,"35":7,"39":12,"46":7,"53":4,"57":12,"59":4,"60":12,"198":4,"203":2,"226":3,"230":65,"231":17,"232":1,"236":2,"237":3,"255":2,"256":3,"257":2,"326":1}}],["sdk",{"0":{"298":1},"2":{"272":2,"274":1,"295":1,"298":1}}],["square",{"2":{"226":2,"236":2}}],["sqlite",{"2":{"27":1,"209":1,"210":1}}],["smoother",{"2":{"163":1}}],["small",{"2":{"33":1}}],["smart",{"0":{"156":1,"215":1},"1":{"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1},"2":{"5":1,"58":1,"105":1,"139":1,"154":4,"156":1,"163":1,"167":2}}],["switch",{"2":{"169":1}}],["switching",{"2":{"150":1}}],["swmansion",{"2":{"89":2,"97":1,"157":1}}],["swarm",{"2":{"27":1}}],["ssf",{"2":{"89":2,"97":1,"157":1}}],["slice",{"2":{"201":1}}],["slow",{"2":{"200":1}}],["slotup",{"2":{"177":1}}],["slot",{"0":{"176":1,"178":1,"179":1,"213":1,"261":1,"316":1},"1":{"177":1,"178":1,"180":1,"181":1,"182":1,"214":1,"317":1},"2":{"79":1,"81":1,"176":1,"177":3,"178":3,"180":1,"181":1,"182":2,"213":10,"214":3,"261":2,"272":1,"277":1,"316":1}}],["slenderduck",{"2":{"75":2}}],["skin",{"2":{"75":1}}],["snake",{"2":{"75":1}}],["scriptableobject",{"2":{"277":1,"278":1}}],["scriptableobjects",{"2":{"277":1}}],["scriptable",{"2":{"270":2,"289":1}}],["scripting",{"2":{"265":3}}],["script",{"2":{"147":1,"148":1,"266":1}}],["scratch",{"2":{"107":1}}],["screen",{"2":{"88":1,"213":1}}],["schemes",{"2":{"102":1}}],["schemaintrospection",{"2":{"38":3,"126":1,"127":3}}],["schema",{"0":{"127":1,"197":1},"2":{"27":2,"30":1,"197":1,"198":1}}],["scissors",{"2":{"75":1}}],["scene",{"0":{"273":1},"1":{"274":1,"275":1,"276":1,"277":1,"278":1,"279":1},"2":{"263":2,"270":2,"271":1,"272":1,"274":3,"278":1}}],["scenes",{"2":{"46":1,"57":1,"270":1}}],["scenario",{"2":{"239":1}}],["scenarios",{"2":{"50":1,"172":1}}],["score",{"2":{"41":6,"102":2}}],["scaffolding",{"2":{"184":1}}],["scale",{"2":{"107":1}}],["scalable",{"2":{"105":1,"107":1}}],["scalability",{"2":{"22":1}}],["scarbthis",{"2":{"89":1}}],["scarb",{"0":{"89":1,"97":1,"157":1},"2":{"14":3,"23":1,"26":1,"30":2,"46":1,"79":1,"80":1,"89":16,"97":2,"157":3,"162":2,"163":2,"213":2,"215":1,"217":2,"218":2,"225":2,"322":1,"328":1}}],["suscription",{"2":{"204":1}}],["susbcription",{"0":{"204":1}}],["suits",{"2":{"276":1}}],["suitable",{"2":{"172":1}}],["suited",{"2":{"105":1,"108":1,"118":1}}],["suite",{"2":{"96":1,"111":1}}],["sudo",{"2":{"121":1}}],["sudoku",{"2":{"107":1}}],["submit",{"2":{"217":1}}],["submitted",{"2":{"116":1}}],["submitting",{"2":{"102":1}}],["subsequent",{"2":{"204":1}}],["subset",{"2":{"201":1}}],["subscribe",{"2":{"205":1}}],["subscribed",{"2":{"203":2}}],["subscription",{"0":{"203":1},"1":{"204":1},"2":{"27":5,"196":1,"203":8,"204":1}}],["subscriptions",{"2":{"27":1,"193":1,"203":2}}],["subcommand",{"2":{"182":1,"317":1,"326":1,"328":1}}],["subcommands",{"0":{"146":1},"1":{"147":1,"148":1},"2":{"178":1,"187":1}}],["subcomponents",{"2":{"127":1}}],["subterranean",{"2":{"75":1}}],["suggested",{"2":{"91":1,"96":1}}],["suggest",{"2":{"62":1,"83":1,"91":1}}],["summary",{"2":{"43":1,"142":1,"328":1}}],["suppose",{"2":{"36":1,"41":1}}],["supporting",{"2":{"62":1}}],["support",{"2":{"37":1,"123":1,"154":1,"173":1,"199":2,"204":1,"213":1}}],["supported",{"0":{"175":1,"307":1,"308":1},"1":{"309":1},"2":{"31":1,"32":1,"147":1,"175":1,"199":1,"201":1,"247":1}}],["supports",{"2":{"29":1,"30":1,"107":1,"149":1,"160":1,"172":1,"175":1,"203":1,"285":1,"307":1,"310":1}}],["super",{"2":{"23":1,"46":2,"53":1,"57":1,"59":1,"60":1,"130":1,"162":1,"217":1}}],["sure",{"2":{"26":1,"96":1,"164":1,"196":1,"213":1,"219":1,"225":2,"265":1}}],["succinct",{"2":{"45":1}}],["successful",{"2":{"164":1,"213":2,"214":1,"219":1}}],["successfully",{"2":{"26":1,"27":1,"213":2,"228":1,"290":1}}],["success",{"2":{"26":1,"78":1}}],["such",{"2":{"8":1,"29":1,"35":1,"36":1,"39":1,"43":1,"103":1,"111":1,"150":1,"172":1,"175":1,"204":1}}],["sample",{"2":{"270":1}}],["same",{"2":{"23":1,"26":1,"59":1,"89":1,"107":1,"150":1,"167":1,"202":1,"203":1,"222":1,"226":1,"230":1,"231":1}}],["saving",{"2":{"154":1}}],["saved",{"2":{"172":1,"174":1}}],["save",{"2":{"39":1}}],["say",{"2":{"41":1}}],["safest",{"2":{"107":1}}],["safe",{"2":{"41":1}}],["salt",{"2":{"19":1,"60":1,"64":1,"165":1,"220":1,"233":1,"235":1}}],["src",{"2":{"23":4,"46":1,"163":1,"218":1,"225":1,"264":1,"266":1}}],["shells",{"2":{"147":1}}],["shell",{"2":{"147":1,"148":1}}],["shipped",{"2":{"149":1}}],["shif",{"2":{"89":1}}],["shinai",{"2":{"79":1}}],["sh",{"2":{"89":3,"97":2,"157":4,"177":1,"266":2}}],["sharing",{"2":{"116":1}}],["share",{"2":{"39":1,"103":1,"241":1}}],["shape",{"2":{"22":1}}],["shows",{"2":{"201":1}}],["show",{"2":{"59":1}}],["short",{"2":{"25":1}}],["shortly",{"2":{"22":1}}],["shorthands",{"2":{"8":1}}],["shorthand",{"2":{"8":1,"122":1}}],["should",{"2":{"14":1,"23":1,"26":2,"27":1,"89":2,"126":1,"132":1,"160":1,"203":1,"210":1,"213":1,"214":1,"227":2,"230":2,"231":2,"233":12,"235":1,"236":3,"237":3,"240":15,"241":1,"242":1}}],["sir",{"2":{"150":2}}],["silent",{"2":{"142":1}}],["side",{"0":{"117":1},"2":{"108":1}}],["singular",{"2":{"128":1}}],["single",{"2":{"85":1,"114":1,"122":1}}],["since",{"2":{"23":1,"52":1,"58":1,"123":1,"222":1}}],["signingkey",{"2":{"282":1,"283":1}}],["significantly",{"2":{"163":1}}],["significant",{"2":{"49":1,"134":1}}],["signer",{"2":{"222":1,"282":2,"283":2}}],["signature",{"2":{"144":1}}],["signals",{"2":{"23":1}}],["situation",{"2":{"42":1}}],["size",{"2":{"38":3,"127":5,"261":1}}],["simultaneously",{"2":{"284":1}}],["simulatetransactions",{"2":{"313":1}}],["simulate",{"2":{"154":1}}],["simulator",{"2":{"75":1}}],["simulation",{"2":{"75":2}}],["simplifies",{"2":{"45":1,"184":1,"289":1}}],["simplify",{"2":{"16":1}}],["simply",{"2":{"15":1,"16":1,"58":1,"62":1,"88":1,"89":1,"102":1,"271":1,"279":1}}],["simplestorage",{"2":{"162":2,"164":1}}],["simplest",{"2":{"53":1}}],["simple",{"0":{"162":1,"282":1},"2":{"15":1,"26":1,"27":1,"46":1,"52":1,"78":1,"80":1,"116":1,"162":2,"164":1,"210":1,"243":1,"248":1,"277":1,"281":1,"282":1,"284":1}}],["similarities",{"2":{"103":1}}],["similarly",{"2":{"18":1,"48":1,"107":1}}],["similar",{"2":{"5":1,"8":1,"23":1,"26":1,"89":2,"128":1,"165":1,"166":1,"167":1,"194":1,"199":1,"204":1,"220":1,"221":1,"303":1}}],["sierra",{"2":{"14":1,"79":1,"89":2,"164":2,"225":1}}],["syncstatus",{"2":{"311":1}}],["synchronizeentities",{"2":{"290":1}}],["synchronized",{"2":{"290":1}}],["synchronize",{"2":{"290":1}}],["synchronizing",{"2":{"290":1}}],["synchronization",{"0":{"290":1},"2":{"279":1,"290":3,"291":2}}],["sync",{"2":{"253":1}}],["syntax",{"2":{"9":1,"226":1}}],["system",{"0":{"25":1,"49":1,"52":1,"53":1,"55":1},"1":{"55":1,"56":1},"2":{"5":1,"6":3,"7":2,"8":2,"10":1,"22":1,"25":1,"26":1,"27":2,"33":1,"34":1,"40":1,"41":2,"51":1,"53":2,"55":1,"56":1,"57":1,"59":1,"60":7,"62":1,"64":3,"103":1,"107":1,"128":2,"129":3,"134":2,"135":1,"187":1,"191":1,"209":2,"233":8,"235":3,"236":2,"237":1,"240":6,"243":2,"261":3,"265":6,"284":6,"291":1,"293":1,"326":3}}],["systems",{"0":{"50":1,"51":1,"128":1,"227":1,"280":1},"1":{"51":1,"52":1,"53":1,"129":1,"130":1,"131":1,"281":1,"282":1,"283":1,"284":1},"2":{"5":1,"7":1,"8":2,"9":1,"15":2,"22":1,"23":3,"26":2,"27":1,"28":1,"50":8,"51":2,"52":1,"53":1,"57":1,"60":1,"61":2,"62":1,"103":1,"105":1,"124":2,"128":6,"134":2,"227":2,"233":1,"235":1,"263":1,"272":2,"280":1}}],["spinning",{"2":{"176":1,"180":1}}],["springett",{"2":{"104":1}}],["space",{"2":{"271":2}}],["span",{"2":{"18":3,"38":6,"64":17,"127":6,"132":2,"134":1}}],["spawned",{"2":{"290":1}}],["spawnhuman",{"2":{"39":1}}],["spawns",{"2":{"25":1,"56":1,"290":2}}],["spawn",{"0":{"49":1,"56":1,"236":1},"2":{"7":2,"23":2,"25":2,"27":3,"39":2,"46":2,"49":1,"53":1,"56":1,"57":1,"60":3,"61":1,"204":1,"231":1,"232":3,"233":5,"235":2,"236":4,"239":2,"240":1,"243":1,"270":2,"271":1,"326":1}}],["specalist",{"2":{"117":1}}],["specify",{"2":{"127":1,"144":1,"154":1,"163":1,"193":1,"212":2,"218":1,"292":1,"321":1}}],["specifies",{"2":{"26":1,"38":1,"127":1,"129":1,"173":1,"203":1}}],["specified",{"2":{"23":1,"39":1,"57":1,"154":1,"164":1,"165":1,"173":1,"174":1,"209":1,"217":2,"284":1}}],["specifically",{"2":{"193":1}}],["specifications",{"2":{"175":1,"310":1}}],["specification",{"2":{"31":1}}],["specifics",{"2":{"47":1}}],["specific",{"2":{"14":1,"17":1,"23":1,"50":1,"89":2,"105":1,"108":1,"118":1,"119":1,"121":5,"127":1,"142":1,"154":1,"170":1,"197":1,"203":1,"209":1,"275":1,"278":1}}],["specialized",{"2":{"45":1}}],["special",{"2":{"2":1,"23":1,"39":1,"241":2}}],["spearheaded",{"2":{"3":1}}],["stuck",{"2":{"238":1}}],["studio",{"2":{"84":1,"98":1}}],["studios",{"0":{"69":1},"1":{"70":1,"71":1,"72":1,"73":1}}],["steady",{"2":{"203":1}}],["step",{"0":{"78":2},"2":{"222":1,"243":2,"262":1,"279":2,"284":1}}],["steps",{"0":{"28":1,"90":1},"2":{"78":1,"145":6,"246":1,"262":1,"265":1,"269":1,"272":1,"277":1,"280":1,"287":1,"296":1,"298":1}}],["still",{"2":{"41":1}}],["storing",{"2":{"36":1}}],["stores",{"2":{"217":1}}],["storesetrecord",{"2":{"18":1,"63":1}}],["stored",{"2":{"34":1,"41":1,"42":3,"162":3,"166":1,"167":2,"172":1,"173":1,"209":1,"210":1,"212":1}}],["storedelrecord",{"2":{"18":1}}],["store",{"2":{"32":1,"33":1,"41":1,"42":1,"48":1,"62":2,"210":1}}],["storage",{"0":{"162":1,"172":1,"173":1},"1":{"173":1,"174":2},"2":{"10":1,"34":1,"40":1,"41":1,"53":3,"55":1,"154":1,"162":4,"164":1,"172":6,"173":3,"210":3,"217":2,"298":1}}],["staging",{"2":{"321":1,"322":1}}],["stage",{"2":{"46":1,"77":1,"285":1}}],["standard",{"2":{"193":1}}],["standardizes",{"2":{"111":1}}],["stack",{"2":{"102":1}}],["stable",{"2":{"89":1,"96":1,"121":1}}],["star",{"2":{"193":1}}],["starkliup",{"2":{"157":1}}],["starkli",{"0":{"157":1,"158":1,"160":1},"1":{"159":1,"160":1},"2":{"157":5,"160":2,"163":2,"164":1,"165":2,"166":1,"167":2,"215":1,"219":1,"220":2,"221":1,"222":5}}],["starkland",{"2":{"75":1}}],["starkex",{"2":{"108":1}}],["starkware",{"2":{"105":1,"115":1,"149":1}}],["stark",{"2":{"75":1,"107":2}}],["starknetvm",{"2":{"118":1}}],["starknet",{"0":{"80":1,"107":1,"108":1,"118":1,"144":1,"150":1,"156":1,"310":1},"1":{"145":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"311":1,"312":1,"313":1},"2":{"18":2,"19":4,"20":1,"23":3,"25":1,"46":3,"53":2,"55":1,"57":5,"60":1,"64":1,"75":1,"76":1,"79":1,"80":1,"82":1,"102":2,"105":1,"106":1,"107":3,"108":2,"128":1,"129":1,"130":1,"132":3,"139":2,"142":2,"149":4,"150":7,"154":1,"155":2,"160":1,"162":6,"163":2,"164":1,"175":3,"209":1,"212":1,"217":13,"218":2,"219":1,"226":3,"233":5,"236":2,"240":2,"264":1,"282":1,"283":1,"284":2,"293":1,"310":1,"311":21,"312":3,"313":1}}],["startup",{"2":{"142":1,"253":1}}],["starts",{"2":{"27":1,"53":1,"196":2,"209":1}}],["starting",{"2":{"22":1,"27":1,"155":1,"159":1,"213":1,"215":1,"223":1,"227":1,"242":1}}],["starter",{"0":{"248":1,"267":1,"269":1},"1":{"268":1,"269":1,"270":1,"271":1},"2":{"22":1,"23":4,"26":5,"27":1,"39":1,"59":1,"60":1,"213":2,"248":3,"267":1,"268":1,"269":1,"324":1}}],["started",{"0":{"68":1,"272":1},"1":{"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1},"2":{"16":3,"21":1,"246":1,"296":1,"298":1}}],["start",{"0":{"86":1},"1":{"87":1,"88":1,"89":1},"2":{"22":1,"27":1,"77":1,"83":1,"91":1,"96":1,"129":1,"155":1,"210":1,"212":3,"213":1,"214":1,"231":1,"243":1,"248":2,"261":1,"282":1,"283":1,"293":1}}],["status",{"2":{"16":4,"217":4,"222":1,"261":1,"265":1}}],["stateless",{"2":{"50":1}}],["states",{"2":{"16":1,"51":1,"113":1,"154":1,"155":1,"217":1,"250":1}}],["state",{"0":{"154":1,"166":1,"167":1,"221":1,"222":1,"254":1},"1":{"155":1,"255":1,"256":1,"257":1},"2":{"5":1,"6":1,"8":1,"9":1,"10":2,"11":2,"18":1,"22":1,"23":2,"25":1,"26":1,"48":1,"50":1,"53":2,"56":1,"62":1,"102":1,"103":3,"113":1,"116":1,"149":1,"154":3,"172":2,"173":1,"174":1,"209":1,"253":2,"265":1,"299":1}}],["stream",{"2":{"213":1,"214":1}}],["streamlining",{"2":{"57":1}}],["streamline",{"2":{"8":1,"105":1,"154":1,"163":1,"184":1}}],["strictly",{"2":{"110":1}}],["strings",{"2":{"42":1,"284":1}}],["string",{"2":{"41":2,"42":9,"43":1,"261":3,"265":4,"283":3,"284":3}}],["strategy",{"2":{"75":1,"107":1}}],["straightforward",{"2":{"41":1,"77":1,"116":1}}],["strongest",{"2":{"104":1}}],["strongly",{"2":{"62":1,"83":1,"89":1,"91":1}}],["strong",{"2":{"23":1}}],["structs",{"0":{"33":1},"1":{"34":1,"35":1,"36":1,"37":1,"38":1},"2":{"11":1,"15":1,"32":1,"33":1,"48":1}}],["struct",{"0":{"48":1},"2":{"10":1,"15":2,"16":1,"18":3,"19":4,"20":1,"23":8,"25":1,"33":1,"34":1,"36":1,"38":1,"39":4,"41":2,"42":2,"46":3,"53":1,"57":1,"127":1,"132":2,"162":1,"217":3,"226":5,"293":1}}],["structured",{"2":{"22":1,"32":1,"193":1}}],["structures",{"2":{"19":1}}],["structure",{"0":{"3":1,"53":1},"1":{"55":1,"56":1},"2":{"5":1,"18":2,"20":1,"23":2,"53":1,"62":1,"127":1,"217":1,"291":1}}],["s",{"2":{"5":1,"17":2,"19":1,"20":1,"22":3,"23":11,"25":5,"26":4,"27":6,"29":1,"38":3,"40":1,"41":2,"45":1,"51":2,"53":2,"56":1,"62":1,"89":5,"102":1,"103":1,"107":1,"108":1,"114":1,"115":2,"116":2,"121":4,"127":3,"132":1,"154":1,"163":1,"167":2,"182":1,"193":1,"194":1,"198":2,"199":1,"203":1,"212":1,"213":2,"221":1,"222":3,"228":1,"232":1,"236":1,"237":1,"239":1,"262":2,"264":1,"271":1,"275":2,"276":1,"284":4,"288":1,"291":3,"298":2,"317":2,"325":1,"326":1,"328":1}}],["sorting",{"2":{"197":1}}],["solve",{"2":{"111":1}}],["solving",{"2":{"107":1}}],["solutions",{"0":{"259":1},"1":{"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1}}],["solution",{"2":{"103":1,"107":3}}],["soon",{"2":{"99":1,"100":1,"168":1,"171":1}}],["software",{"2":{"58":1}}],["socials",{"2":{"30":4}}],["social",{"2":{"29":1,"30":1}}],["sometimes",{"2":{"242":1}}],["something",{"2":{"16":1,"27":2,"242":1}}],["somewhat",{"2":{"103":1,"194":1}}],["some",{"2":{"26":1,"40":1,"47":1,"57":1,"124":1,"198":1,"236":1,"242":1,"243":2,"288":1}}],["so",{"2":{"20":1,"28":1,"30":1,"39":2,"41":1,"62":1,"121":1,"150":1,"228":1,"229":1,"241":1,"242":1,"256":1,"260":1,"279":1}}],["sozo",{"0":{"184":1,"188":1,"319":1,"321":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1},"1":{"189":1,"190":1,"191":1,"320":1,"322":1},"2":{"7":2,"22":1,"26":3,"27":2,"30":2,"57":1,"58":2,"78":3,"85":3,"87":1,"89":2,"184":1,"185":1,"186":1,"187":3,"199":1,"204":1,"213":4,"224":1,"225":1,"228":2,"231":1,"264":1,"269":1,"270":1,"284":1,"292":2,"319":1,"320":2,"322":3,"323":1,"324":1,"325":1,"326":2,"327":1,"328":2}}],["sovereignty",{"2":{"102":1}}],["sovereign",{"2":{"5":1}}],["source",{"0":{"83":1,"187":1},"1":{"84":1,"85":1},"2":{"1":2,"3":1,"105":1,"110":1,"149":1,"150":1,"163":1,"218":1}}],["separated",{"2":{"212":1}}],["separate",{"2":{"154":1,"164":1,"219":1,"277":1}}],["sent",{"2":{"199":1}}],["senderaddress",{"2":{"199":4}}],["sending",{"2":{"194":1,"203":1,"255":1}}],["send",{"2":{"142":1,"203":1,"256":1}}],["sensei",{"2":{"1":2}}],["select",{"2":{"262":1,"271":1,"286":1,"287":2,"298":1}}],["selection",{"2":{"199":1,"262":1}}],["selected",{"2":{"169":1,"262":3,"287":1}}],["selector",{"2":{"128":1,"284":2}}],["self",{"2":{"16":8,"35":8,"39":2,"46":3,"49":1,"53":1,"57":4,"64":22,"105":1,"129":1,"130":1,"162":6,"217":40,"230":67,"284":1}}],["sequencer",{"0":{"159":1},"2":{"76":1,"82":1,"108":1,"118":1,"139":1,"142":1,"149":1}}],["search",{"2":{"58":1}}],["seamless",{"2":{"49":1,"272":1,"279":1,"290":1,"291":1}}],["seamlessly",{"2":{"17":1,"41":1,"108":1,"204":1,"290":1}}],["serious",{"2":{"160":1}}],["serialize",{"2":{"38":4,"127":4}}],["serve",{"2":{"291":1}}],["served",{"2":{"103":1}}],["serves",{"2":{"41":1,"48":1,"164":1,"219":1}}],["server",{"0":{"143":1},"2":{"27":12,"89":1,"143":1,"193":1,"196":2,"199":1,"203":5,"212":1,"261":1,"265":2}}],["service",{"2":{"142":1}}],["services",{"2":{"29":1}}],["serving",{"2":{"27":1}}],["serdelen",{"2":{"126":1}}],["serde",{"2":{"15":2,"16":2,"23":5,"33":1,"34":1,"36":1,"39":4,"46":2,"226":7,"293":2}}],["seeing",{"2":{"255":1}}],["seen",{"2":{"134":1,"222":1}}],["seemingly",{"2":{"46":1}}],["seems",{"2":{"22":1,"243":1}}],["see",{"2":{"25":1,"26":1,"27":1,"55":1,"88":1,"142":1,"178":1,"187":1,"230":1,"251":1,"256":1,"328":1}}],["seed",{"2":{"14":1,"26":1,"144":3,"213":1,"225":1}}],["several",{"2":{"10":1}}],["setnextblocktimestamp",{"0":{"303":1},"2":{"303":1}}],["settlement",{"0":{"171":1},"2":{"142":1}}],["settled",{"2":{"103":1}}],["settings",{"2":{"36":3,"39":1,"89":1,"163":1,"262":3,"265":1,"275":1,"286":1,"287":4,"289":2}}],["setting",{"0":{"36":1,"269":1,"270":1,"273":1,"298":1},"1":{"274":1,"275":1,"276":1,"277":1,"278":1,"279":1},"2":{"30":2,"46":1,"56":1,"77":1,"91":1,"154":1,"237":1}}],["setupnetwork",{"2":{"255":1}}],["setupnetworkresult",{"2":{"255":2}}],["setup",{"0":{"91":1,"134":1,"218":1,"223":1,"235":1},"1":{"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1},"2":{"46":1,"60":3,"96":2,"135":1,"203":1,"230":1,"233":4,"236":1,"239":1,"240":4,"269":1,"272":1}}],["set",{"0":{"11":1},"2":{"6":2,"10":1,"11":3,"20":2,"22":1,"23":3,"25":4,"26":1,"27":1,"30":3,"31":1,"34":2,"39":4,"46":2,"49":1,"53":1,"57":4,"64":3,"77":1,"87":1,"89":1,"96":1,"114":1,"154":1,"162":2,"167":2,"199":1,"201":1,"213":1,"231":3,"236":1,"239":1,"290":1}}],["secure",{"2":{"105":1}}],["security",{"2":{"5":1,"44":1,"50":1,"107":2}}],["secondary",{"2":{"242":1}}],["seconds",{"2":{"169":1,"176":1,"302":1}}],["second",{"2":{"26":1,"166":1,"167":1,"201":1,"220":1,"221":1,"222":1,"226":1}}],["sections",{"2":{"291":1}}],["section",{"2":{"2":1,"21":2,"27":2,"30":1,"160":1,"198":1,"258":1,"267":1,"272":1,"279":1,"280":1,"284":1}}],["occurring",{"2":{"291":1}}],["occurs",{"2":{"43":1}}],["old",{"2":{"213":1}}],["o",{"2":{"172":1}}],["objects",{"2":{"270":1,"289":1}}],["object",{"2":{"251":1,"256":1,"265":1,"270":1,"278":1}}],["obtained",{"2":{"284":1}}],["obtain",{"2":{"164":1,"219":1}}],["observe",{"2":{"27":1,"199":1}}],["optimizing",{"2":{"241":1}}],["optimized",{"2":{"108":1}}],["options",{"0":{"141":1,"142":1,"143":1,"144":1,"145":1,"189":1,"211":1,"212":1},"1":{"142":1,"143":1,"144":1,"145":2,"212":1},"2":{"140":1,"181":1,"208":1,"281":1,"326":1,"328":2}}],["optional",{"0":{"89":1},"2":{"128":1,"131":1}}],["option",{"2":{"64":1,"84":1,"210":1,"286":1,"287":1}}],["operation",{"0":{"198":1},"1":{"199":1,"200":1,"201":1,"202":1}}],["operations",{"0":{"203":1},"1":{"204":1},"2":{"8":1,"27":1,"105":1,"163":1,"172":1,"196":1}}],["operating",{"2":{"103":1}}],["operates",{"2":{"107":1,"172":1,"276":1}}],["operate",{"2":{"102":2}}],["opened",{"2":{"271":1}}],["opens",{"2":{"203":1,"298":1}}],["opensource",{"2":{"115":1}}],["openness",{"2":{"5":1}}],["open",{"2":{"1":2,"3":1,"5":1,"23":2,"26":1,"27":2,"103":3,"105":1,"110":1,"112":2,"157":1,"213":1,"270":1,"287":1,"298":2}}],["omit",{"2":{"57":1}}],["overridable",{"2":{"255":1}}],["overridablecomponent",{"0":{"255":1},"2":{"255":2}}],["overrides",{"2":{"256":1}}],["override",{"2":{"96":1,"255":3,"256":1,"328":1}}],["overhead",{"2":{"172":1}}],["over",{"2":{"45":1,"102":1,"107":1}}],["overview",{"0":{"295":1},"2":{"28":1,"178":1,"187":1,"291":1}}],["o7cbnfrorx0ydpdklgn8odgfdg6vcjnnugt5exkq",{"2":{"27":3}}],["owns",{"0":{"110":1}}],["own",{"2":{"17":1,"27":1,"75":1,"79":1,"154":3,"241":2}}],["owners",{"2":{"7":1,"31":1}}],["owner",{"2":{"5":1,"7":3,"51":1,"64":3}}],["others",{"2":{"241":1,"242":1}}],["otherwise",{"2":{"164":1,"219":1,"230":1}}],["other",{"2":{"10":1,"29":2,"66":1,"116":1,"173":1,"197":1}}],["origins",{"2":{"212":4}}],["original",{"2":{"41":1}}],["origami",{"0":{"44":1},"2":{"44":2,"74":1}}],["org",{"2":{"30":1,"87":1,"120":1,"157":1}}],["organizing",{"2":{"289":1}}],["organization",{"2":{"102":1}}],["organizational",{"0":{"3":1}}],["organize",{"2":{"27":1}}],["order",{"2":{"27":1,"156":1,"246":1}}],["or",{"2":{"5":1,"8":1,"12":1,"14":1,"27":1,"30":2,"43":1,"46":1,"66":2,"74":1,"85":2,"89":1,"96":1,"102":1,"103":1,"105":1,"117":1,"119":1,"121":1,"123":2,"135":1,"142":2,"154":2,"170":1,"172":1,"182":1,"185":1,"198":1,"200":1,"201":1,"203":1,"205":1,"210":1,"212":1,"217":2,"231":1,"241":2,"252":1,"262":2,"278":1,"281":1,"284":1,"286":1,"287":1,"289":1,"290":1,"291":1,"292":1,"298":2,"317":1,"326":1,"328":1}}],["ought",{"2":{"50":1}}],["our",{"2":{"4":2,"23":2,"27":4,"41":2,"42":1,"102":2,"117":1,"160":1,"186":1,"203":1,"213":2,"226":1,"227":1,"231":1,"235":2,"236":1,"239":3,"241":1,"244":1,"284":1}}],["outlined",{"2":{"269":1}}],["outlines",{"2":{"127":1}}],["outside",{"2":{"217":1}}],["outputted",{"2":{"177":1}}],["outputs",{"2":{"102":1}}],["output",{"2":{"26":2,"27":3,"89":2,"142":1,"165":1,"166":1,"167":1,"198":2,"199":1,"203":1,"204":1,"220":1,"221":1,"265":3,"270":2,"284":1,"292":2}}],["out",{"2":{"4":1,"102":1,"117":1,"178":1,"230":3,"231":2}}],["onsynchronized",{"2":{"290":1}}],["onscreen",{"2":{"89":1}}],["onto",{"2":{"278":1}}],["online",{"2":{"75":1}}],["only",{"0":{"166":1,"221":1},"2":{"6":1,"7":1,"56":1,"103":1,"149":1,"150":1,"154":1,"170":1,"198":1,"210":1,"298":1,"299":1}}],["onentityspawned",{"2":{"290":1}}],["ones",{"2":{"185":2,"213":1,"290":1}}],["one",{"2":{"23":1,"34":1,"40":1,"63":1,"89":1,"107":1,"114":1,"121":1,"160":1,"184":1,"278":1,"298":1}}],["once",{"2":{"23":1,"27":1,"89":1,"103":1,"154":1,"177":1,"200":1,"213":2,"214":1,"292":1,"298":1}}],["onchain",{"0":{"45":1,"102":1,"113":1},"1":{"46":1,"47":1,"48":1,"49":1},"2":{"1":3,"74":1,"75":6,"102":3,"111":1,"113":3,"114":1,"272":1,"285":1,"288":1}}],["on",{"0":{"78":1,"118":1,"156":1,"170":1,"261":1},"1":{"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1},"2":{"2":1,"10":1,"15":1,"22":1,"23":1,"25":1,"26":3,"27":5,"29":1,"30":1,"40":1,"46":2,"51":1,"75":5,"76":1,"79":1,"84":1,"88":1,"89":2,"96":1,"102":6,"103":3,"104":1,"105":1,"108":1,"112":1,"113":2,"116":1,"117":1,"118":1,"123":1,"126":1,"142":3,"143":2,"150":1,"154":5,"155":1,"160":1,"163":1,"170":3,"173":1,"175":1,"184":1,"187":1,"196":1,"197":1,"203":3,"204":1,"210":2,"217":1,"218":1,"222":1,"226":1,"228":1,"229":1,"230":1,"236":2,"242":1,"243":2,"244":1,"248":1,"253":1,"261":1,"264":1,"271":1,"279":1,"286":1,"290":1,"291":1,"298":1,"307":1}}],["often",{"2":{"65":1}}],["offline=",{"2":{"319":1}}],["offline",{"0":{"318":1,"319":1},"1":{"319":1,"320":2},"2":{"189":1,"319":1,"320":2}}],["official",{"2":{"149":1,"295":1}}],["off",{"2":{"107":1,"116":2}}],["offering",{"2":{"107":1,"289":1}}],["offer",{"2":{"103":1}}],["offers",{"2":{"7":1,"154":1,"172":2,"194":1,"199":1}}],["offchain",{"2":{"29":1}}],["offset",{"0":{"202":1},"2":{"18":2,"64":2,"200":1,"202":2}}],["of",{"0":{"23":1,"42":1,"158":1},"1":{"159":1,"160":1},"2":{"1":1,"2":2,"3":1,"7":1,"10":2,"14":1,"15":1,"16":4,"17":1,"18":2,"22":1,"23":9,"25":4,"26":3,"27":3,"28":3,"33":1,"35":1,"38":1,"39":2,"42":5,"44":1,"46":2,"49":1,"53":3,"55":1,"57":1,"58":1,"59":3,"62":2,"68":2,"74":1,"75":4,"76":2,"77":1,"84":1,"85":1,"86":1,"87":1,"89":4,"102":4,"103":9,"105":5,"107":4,"111":2,"116":3,"122":1,"124":1,"125":1,"127":3,"130":1,"132":1,"134":1,"142":1,"143":1,"144":2,"145":2,"149":2,"150":1,"154":6,"155":1,"159":1,"160":3,"162":1,"165":1,"166":1,"167":2,"169":1,"170":2,"172":4,"178":1,"182":1,"184":2,"185":1,"187":1,"193":2,"194":1,"197":5,"198":4,"199":2,"200":1,"201":5,"203":1,"204":1,"210":1,"212":3,"215":1,"217":6,"220":4,"221":1,"222":1,"223":1,"225":1,"226":1,"230":6,"231":5,"236":2,"241":1,"242":1,"243":2,"251":1,"252":4,"256":1,"257":1,"258":1,"260":1,"261":1,"270":2,"280":1,"283":1,"284":4,"288":1,"290":1,"291":5,"292":2,"298":1,"302":1,"305":1,"310":1,"315":1,"317":1,"326":1,"328":1}}],["ohayoo",{"2":{"79":1}}],["ohayo",{"2":{"1":1}}]],"serializationVersion":2}
